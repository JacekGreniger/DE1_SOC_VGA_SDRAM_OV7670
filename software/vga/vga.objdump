
vga.elf:     file format elf32-littlenios2
vga.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04010230

Program Header:
    LOAD off    0x00001000 vaddr 0x04010000 paddr 0x04010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04010020 paddr 0x04010020 align 2**12
         filesz 0x00005498 memsz 0x00005498 flags r-x
    LOAD off    0x000064b8 vaddr 0x040154b8 paddr 0x040168a0 align 2**12
         filesz 0x000013e8 memsz 0x000013e8 flags rw-
    LOAD off    0x00007c88 vaddr 0x04017c88 paddr 0x04017c88 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04010000  04010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04010020  04010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000050f4  04010230  04010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000194  04015324  04015324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013e8  040154b8  040168a0  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  04017c88  04017c88  00007c88  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000000  00000000  000078a0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04017db4  04017db4  000078a0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000007a0  00000000  00000000  000078c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000b8cb  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d8d  00000000  00000000  00013933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000042b0  00000000  00000000  000176c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001500  00000000  00000000  0001b970  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002cac  00000000  00000000  0001ce70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000017d5  00000000  00000000  0001fb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000212f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000318  00000000  00000000  00021338  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00023dc2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00023dc5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00023dd1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00023dd2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00023dd3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00023dd7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00023ddb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00023ddf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00023dea  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00023df5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  00023e04  2**0
                  CONTENTS, READONLY
 30 .jdi          00005e48  00000000  00000000  00023e2b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00058ae4  00000000  00000000  00029c73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04010000 l    d  .entry	00000000 .entry
04010020 l    d  .exceptions	00000000 .exceptions
04010230 l    d  .text	00000000 .text
04015324 l    d  .rodata	00000000 .rodata
040154b8 l    d  .rwdata	00000000 .rwdata
04017c88 l    d  .bss	00000000 .bss
00000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04017db4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_bsp//obj/HAL/src/crt0.o
04010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
04016868 l     O .rwdata	00000004 port_val_prev.3262
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04010738 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04015548 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
04011278 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04011410 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401154c l     F .text	00000034 alt_dev_reg
04015628 l     O .rwdata	00000038 i2c_0
04015660 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
04011628 l     F .text	00000110 optional_irq_callback
04011788 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04013464 l     F .text	0000020c altera_avalon_jtag_uart_irq
04013670 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04013ca8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04014020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04014154 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04014180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401446c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
040145cc l     F .text	0000003c alt_get_errno
04014608 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04017ca8 g     O .bss	00000004 alt_instruction_exception_handler
04011364 g     F .text	0000007c alt_main
04010688 g     F .text	00000080 _puts_r
04017cb4 g     O .bss	00000100 alt_irq
040168a0 g       *ABS*	00000000 __flash_rwdata_start
0401063c g     F .text	0000004c printf
04011e80 g     F .text	000000a8 alt_avalon_i2c_rx_read
04013098 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
04011c04 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
040128e8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04014ce0 g     F .text	00000024 altera_nios2_gen2_irq_init
04010000 g     F .entry	0000000c __reset
04017c90 g     O .bss	00000004 edge_capture
04010020 g       *ABS*	00000000 __flash_exceptions_start
04017c94 g     O .bss	00000004 errno
04017ca0 g     O .bss	00000004 alt_argv
0401e868 g       *ABS*	00000000 _gp
040113e0 g     F .text	00000030 usleep
040130dc g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
04011d94 g     F .text	00000044 alt_avalon_i2c_is_busy
04010340 g     F .text	00000174 ov7670_i2c_initialize
040166e8 g     O .rwdata	00000180 alt_fd_list
04011b38 g     F .text	000000cc alt_avalon_i2c_master_config_set
04014320 g     F .text	00000090 alt_find_dev
04014f34 g     F .text	00000028 memcpy
04014550 g     F .text	0000007c alt_io_redirect
04015324 g       *ABS*	00000000 __DTOR_END__
04012728 g     F .text	000001c0 alt_avalon_i2c_master_transmit
04010708 g     F .text	00000014 puts
040143d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04013868 g     F .text	0000021c altera_avalon_jtag_uart_read
04010600 g     F .text	0000003c _printf_r
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04010ef4 g     F .text	00000064 .hidden __udivsi3
040119a4 g     F .text	00000098 alt_avalon_i2c_enable
0401026c g     F .text	00000068 key_ISR
04012fcc g     F .text	00000068 alt_avalon_i2c_int_disable
04016890 g     O .rwdata	00000004 alt_max_fd
04012af4 g     F .text	00000210 alt_avalon_i2c_master_receive
04013034 g     F .text	00000064 alt_avalon_i2c_int_enable
0401686c g     O .rwdata	00000004 _global_impure_ptr
04017db4 g       *ABS*	00000000 __bss_end
04011188 g     F .text	000000f0 alt_iic_isr_register
04014bd8 g     F .text	00000108 alt_tick
04012ef4 g     F .text	00000058 alt_avalon_i2c_int_status_get
0401113c g     F .text	0000004c alt_ic_irq_enabled
04014b3c g     F .text	0000009c alt_alarm_stop
04011824 g     F .text	00000054 alt_avalon_i2c_register_callback
04011878 g     F .text	000000ec alt_avalon_i2c_init
04017c98 g     O .bss	00000004 alt_irq_active
040100fc g     F .exceptions	000000d4 alt_irq_handler
040166c0 g     O .rwdata	00000028 alt_dev_null
040104b4 g     F .text	00000054 memset32
04014134 g     F .text	00000020 alt_dcache_flush_all
040168a0 g       *ABS*	00000000 __ram_rwdata_end
04016888 g     O .rwdata	00000008 alt_dev_list
0401144c g     F .text	00000100 write
04014fb0 g     F .text	00000058 _putc_r
040121b4 g     F .text	0000004c alt_avalon_i2c_check_arblost
04012f90 g     F .text	0000003c alt_avalon_i2c_int_clear
040154b8 g       *ABS*	00000000 __ram_rodata_end
04016878 g     O .rwdata	00000008 alt_avalon_i2c_list
04010f58 g     F .text	00000058 .hidden __umodsi3
04017db4 g       *ABS*	00000000 end
040133a4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04011964 g     F .text	00000040 alt_avalon_i2c_open
04015324 g       *ABS*	00000000 __CTOR_LIST__
04020000 g       *ABS*	00000000 __alt_stack_pointer
0401233c g     F .text	000000e8 alt_avalon_i2c_master_tx
04013d20 g     F .text	0000007c alt_avalon_timer_sc_init
04013a84 g     F .text	00000224 altera_avalon_jtag_uart_write
040107a4 g     F .text	0000052c ___vfprintf_internal_r
04014850 g     F .text	0000022c alt_printf
04015160 g     F .text	00000190 __call_exitprocs
04011738 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
04010230 g     F .text	0000003c _start
04017cac g     O .bss	00000004 _alt_tick_rate
04012d04 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
04013128 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
04017cb0 g     O .bss	00000004 _alt_nticks
040115b8 g     F .text	00000070 alt_sys_init
04017c8c g     O .bss	00000004 context
04015008 g     F .text	00000158 __register_exitproc
04012560 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04013710 g     F .text	00000068 altera_avalon_jtag_uart_close
04010fb0 g     F .text	00000028 .hidden __mulsi3
040154b8 g       *ABS*	00000000 __ram_rwdata_start
04015324 g       *ABS*	00000000 __ram_rodata_start
04013240 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04014e0c g     F .text	000000c4 alt_get_fd
04013ec8 g     F .text	00000158 alt_busy_sleep
04014f04 g     F .text	00000030 memcmp
04011dd8 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
04013300 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04017db4 g       *ABS*	00000000 __alt_stack_base
04013350 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040102d4 g     F .text	0000006c EnablePioInterrupt
04014d04 g     F .text	00000108 alt_find_file
040141bc g     F .text	000000a4 alt_dev_llist_insert
04012200 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
04012168 g     F .text	0000004c alt_avalon_i2c_check_nack
04010cec g     F .text	000000b8 __sfvwrite_small_dev
04017c88 g     O .bss	00000004 int_cnt
04017c88 g       *ABS*	00000000 __bss_start
04010508 g     F .text	000000f8 main
04012134 g     F .text	00000034 alt_avalon_i2c_master_target_set
04017ca4 g     O .bss	00000004 alt_envp
040132a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04012f4c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04016894 g     O .rwdata	00000004 alt_errno
04014f5c g     F .text	00000054 putc
04010dfc g     F .text	00000084 .hidden __divsi3
04015324 g       *ABS*	00000000 __CTOR_END__
04015324 g       *ABS*	00000000 __flash_rodata_start
04015324 g       *ABS*	00000000 __DTOR_LIST__
04011580 g     F .text	00000038 alt_irq_init
04014ab8 g     F .text	00000084 alt_release_fd
04014ed0 g     F .text	00000014 atexit
04010da4 g     F .text	00000058 _write_r
04016870 g     O .rwdata	00000004 _impure_ptr
04017c9c g     O .bss	00000004 alt_argc
040142c0 g     F .text	00000060 _do_dtors
040120fc g     F .text	00000038 alt_avalon_i2c_master_target_get
0401200c g     F .text	000000f0 alt_avalon_i2c_send_address
04010020 g       .exceptions	00000000 alt_irq_entry
04016880 g     O .rwdata	00000008 alt_fs_list
04010020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
040131d8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
04011a3c g     F .text	0000004c alt_avalon_i2c_disable
04010fd8 g     F .text	00000050 alt_ic_isr_register
040168a0 g       *ABS*	00000000 _edata
04017db4 g       *ABS*	00000000 _end
04010230 g       *ABS*	00000000 __ram_exceptions_end
04013778 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04011a88 g     F .text	000000b0 alt_avalon_i2c_master_config_get
040110b0 g     F .text	0000008c alt_ic_irq_disable
04014ee4 g     F .text	00000020 exit
04010e80 g     F .text	00000074 .hidden __modsi3
04020000 g       *ABS*	00000000 __alt_data_end
04010020 g     F .exceptions	00000000 alt_exception
04011c98 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
04011f28 g     F .text	000000e4 alt_avalon_i2c_cmd_write
040152f0 g     F .text	00000034 _exit
04013d9c g     F .text	0000012c alt_alarm_start
0401071c g     F .text	0000001c strlen
040146f4 g     F .text	0000015c open
04014a7c g     F .text	0000003c alt_putchar
040143b0 g     F .text	00000020 alt_icache_flush_all
04016874 g     O .rwdata	00000004 alt_priority_mask
04011028 g     F .text	00000088 alt_ic_irq_enable
04010cd0 g     F .text	0000001c __vfprintf_internal
040154b8 g     O .rwdata	00000090 ov7670_regs
04016898 g     O .rwdata	00000008 alt_alarm_list
04014260 g     F .text	00000060 _do_ctors
0401405c g     F .text	000000d8 close
0401318c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
040112e0 g     F .text	00000084 alt_load
04012424 g     F .text	0000013c alt_avalon_i2c_master_rx



Disassembly of section .entry:

04010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4010000:	00410074 	movhi	at,1025
    ori r1, r1, %lo(_start)
 4010004:	08408c14 	ori	at,at,560
    jmp r1
 4010008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4010020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4010024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4010028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 401002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4010030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4010034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4010038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 401003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4010040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4010044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4010048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 401004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4010050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4010054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4010058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 401005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4010060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4010064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4010068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 401006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4010070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4010074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4010078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 401007c:	10000326 	beq	r2,zero,401008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4010080:	20000226 	beq	r4,zero,401008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4010084:	40100fc0 	call	40100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4010088:	00000706 	br	40100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 401008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4010090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4010094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4010098:	40101d00 	call	40101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 401009c:	1000021e 	bne	r2,zero,40100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40100f8:	ef80083a 	eret

040100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40100fc:	defff904 	addi	sp,sp,-28
 4010100:	dfc00615 	stw	ra,24(sp)
 4010104:	df000515 	stw	fp,20(sp)
 4010108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 401010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4010110:	0005313a 	rdctl	r2,ipending
 4010114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4010118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 401011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4010120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4010124:	00800044 	movi	r2,1
 4010128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 401012c:	e0fffb17 	ldw	r3,-20(fp)
 4010130:	e0bffc17 	ldw	r2,-16(fp)
 4010134:	1884703a 	and	r2,r3,r2
 4010138:	10001426 	beq	r2,zero,401018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 401013c:	00810074 	movhi	r2,1025
 4010140:	109f2d04 	addi	r2,r2,31924
 4010144:	e0fffd17 	ldw	r3,-12(fp)
 4010148:	180690fa 	slli	r3,r3,3
 401014c:	10c5883a 	add	r2,r2,r3
 4010150:	10c00017 	ldw	r3,0(r2)
 4010154:	00810074 	movhi	r2,1025
 4010158:	109f2d04 	addi	r2,r2,31924
 401015c:	e13ffd17 	ldw	r4,-12(fp)
 4010160:	200890fa 	slli	r4,r4,3
 4010164:	1105883a 	add	r2,r2,r4
 4010168:	10800104 	addi	r2,r2,4
 401016c:	10800017 	ldw	r2,0(r2)
 4010170:	1009883a 	mov	r4,r2
 4010174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4010178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 401017c:	0005313a 	rdctl	r2,ipending
 4010180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4010184:	e0bfff17 	ldw	r2,-4(fp)
 4010188:	00000706 	br	40101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 401018c:	e0bffc17 	ldw	r2,-16(fp)
 4010190:	1085883a 	add	r2,r2,r2
 4010194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4010198:	e0bffd17 	ldw	r2,-12(fp)
 401019c:	10800044 	addi	r2,r2,1
 40101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40101a4:	003fe106 	br	401012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
 40101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40101ac:	e0bffb17 	ldw	r2,-20(fp)
 40101b0:	103fdb1e 	bne	r2,zero,4010120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40101b4:	0001883a 	nop
}
 40101b8:	0001883a 	nop
 40101bc:	e037883a 	mov	sp,fp
 40101c0:	dfc00117 	ldw	ra,4(sp)
 40101c4:	df000017 	ldw	fp,0(sp)
 40101c8:	dec00204 	addi	sp,sp,8
 40101cc:	f800283a 	ret

040101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40101d0:	defffb04 	addi	sp,sp,-20
 40101d4:	dfc00415 	stw	ra,16(sp)
 40101d8:	df000315 	stw	fp,12(sp)
 40101dc:	df000304 	addi	fp,sp,12
 40101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40101e4:	00bfffc4 	movi	r2,-1
 40101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40101f0:	d0a51017 	ldw	r2,-27584(gp)
 40101f4:	10000726 	beq	r2,zero,4010214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40101f8:	d0a51017 	ldw	r2,-27584(gp)
 40101fc:	e0fffd17 	ldw	r3,-12(fp)
 4010200:	e1bffe17 	ldw	r6,-8(fp)
 4010204:	e17fff17 	ldw	r5,-4(fp)
 4010208:	1809883a 	mov	r4,r3
 401020c:	103ee83a 	callr	r2
 4010210:	00000206 	br	401021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4010214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4010218:	0005883a 	mov	r2,zero
}
 401021c:	e037883a 	mov	sp,fp
 4010220:	dfc00117 	ldw	ra,4(sp)
 4010224:	df000017 	ldw	fp,0(sp)
 4010228:	dec00204 	addi	sp,sp,8
 401022c:	f800283a 	ret

Disassembly of section .text:

04010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4010230:	06c100b4 	movhi	sp,1026
    ori sp, sp, %lo(__alt_stack_pointer)
 4010234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4010238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 401023c:	d6ba1a14 	ori	gp,gp,59496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4010240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4010244:	109f2214 	ori	r2,r2,31880

    movhi r3, %hi(__bss_end)
 4010248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 401024c:	18df6d14 	ori	r3,r3,32180

    beq r2, r3, 1f
 4010250:	10c00326 	beq	r2,r3,4010260 <_start+0x30>

0:
    stw zero, (r2)
 4010254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4010258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 401025c:	10fffd36 	bltu	r2,r3,4010254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4010260:	40112e00 	call	40112e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4010264:	40113640 	call	4011364 <alt_main>

04010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4010268:	003fff06 	br	4010268 <__alt_data_end+0xffff0268>

0401026c <key_ISR>:
//https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/hb/nios2/n2sw_nii52006.pdf
int int_cnt = 0;
int context=0;
volatile int edge_capture;
void key_ISR( void * context)
{
 401026c:	defffd04 	addi	sp,sp,-12
 4010270:	df000215 	stw	fp,8(sp)
 4010274:	df000204 	addi	fp,sp,8
 4010278:	e13fff15 	stw	r4,-4(fp)
	int_cnt++;
 401027c:	d0a50817 	ldw	r2,-27616(gp)
 4010280:	10800044 	addi	r2,r2,1
 4010284:	d0a50815 	stw	r2,-27616(gp)

	/* Cast context to edge_capture's type. It is important that this be declared volatile
	 * to avoid unwanted compiler optimization. */
	volatile int* edge_capture_ptr = (volatile int*) context;
 4010288:	e0bfff17 	ldw	r2,-4(fp)
 401028c:	e0bffe15 	stw	r2,-8(fp)

	/* Read the edge capture register on the button PIO.
	 * Store value.*/
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
 4010290:	008100b4 	movhi	r2,1026
 4010294:	10841b04 	addi	r2,r2,4204
 4010298:	10c00037 	ldwio	r3,0(r2)
 401029c:	e0bffe17 	ldw	r2,-8(fp)
 40102a0:	10c00015 	stw	r3,0(r2)

	/* Write to the edge capture register to reset it. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0xff);
 40102a4:	00c03fc4 	movi	r3,255
 40102a8:	008100b4 	movhi	r2,1026
 40102ac:	10841b04 	addi	r2,r2,4204
 40102b0:	10c00035 	stwio	r3,0(r2)

	/* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems with high processor -> pio latency and fast interrupts. */
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
 40102b4:	008100b4 	movhi	r2,1026
 40102b8:	10841b04 	addi	r2,r2,4204
 40102bc:	10800037 	ldwio	r2,0(r2)
}
 40102c0:	0001883a 	nop
 40102c4:	e037883a 	mov	sp,fp
 40102c8:	df000017 	ldw	fp,0(sp)
 40102cc:	dec00104 	addi	sp,sp,4
 40102d0:	f800283a 	ret

040102d4 <EnablePioInterrupt>:

void EnablePioInterrupt()
{
 40102d4:	defffc04 	addi	sp,sp,-16
 40102d8:	dfc00315 	stw	ra,12(sp)
 40102dc:	df000215 	stw	fp,8(sp)
 40102e0:	df000204 	addi	fp,sp,8
	/* Recast the edge_capture pointer to match thealt_irq_register() function prototype. */
	void* edge_capture_ptr = (void*) &edge_capture;
 40102e4:	d0a50a04 	addi	r2,gp,-27608
 40102e8:	e0bfff15 	stw	r2,-4(fp)

	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
 40102ec:	00c003c4 	movi	r3,15
 40102f0:	008100b4 	movhi	r2,1026
 40102f4:	10841a04 	addi	r2,r2,4200
 40102f8:	10c00035 	stwio	r3,0(r2)

	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0xf);
 40102fc:	00c003c4 	movi	r3,15
 4010300:	008100b4 	movhi	r2,1026
 4010304:	10841b04 	addi	r2,r2,4204
 4010308:	10c00035 	stwio	r3,0(r2)

	/* Register the ISR. */
	alt_ic_isr_register(PIO_1_IRQ_INTERRUPT_CONTROLLER_ID,
 401030c:	d8000015 	stw	zero,0(sp)
 4010310:	e1ffff17 	ldw	r7,-4(fp)
 4010314:	01810074 	movhi	r6,1025
 4010318:	31809b04 	addi	r6,r6,620
 401031c:	01400084 	movi	r5,2
 4010320:	0009883a 	mov	r4,zero
 4010324:	4010fd80 	call	4010fd8 <alt_ic_isr_register>
			PIO_1_IRQ,
			key_ISR,
			edge_capture_ptr,
			0x0);
}
 4010328:	0001883a 	nop
 401032c:	e037883a 	mov	sp,fp
 4010330:	dfc00117 	ldw	ra,4(sp)
 4010334:	df000017 	ldw	fp,0(sp)
 4010338:	dec00204 	addi	sp,sp,8
 401033c:	f800283a 	ret

04010340 <ov7670_i2c_initialize>:
};

// source: https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/ug/ug_embedded_ip.pdf
// page 182
int ov7670_i2c_initialize()
{
 4010340:	defefb04 	addi	sp,sp,-1044
 4010344:	dfc10415 	stw	ra,1040(sp)
 4010348:	df010315 	stw	fp,1036(sp)
 401034c:	df010304 	addi	fp,sp,1036
	alt_u8 txbuffer[0x200];
	alt_u8 rxbuffer[0x200];
	int i;
	ALT_AVALON_I2C_STATUS_CODE status;

	printf("OV7670 initialization started\n");
 4010350:	01010074 	movhi	r4,1025
 4010354:	2114c904 	addi	r4,r4,21284
 4010358:	40107080 	call	4010708 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //I2C_0_NAME
 401035c:	01010074 	movhi	r4,1025
 4010360:	2114d104 	addi	r4,r4,21316
 4010364:	40119640 	call	4011964 <alt_avalon_i2c_open>
 4010368:	e0befe15 	stw	r2,-1032(fp)
	if (NULL==i2c_dev)
 401036c:	e0befe17 	ldw	r2,-1032(fp)
 4010370:	1000051e 	bne	r2,zero,4010388 <ov7670_i2c_initialize+0x48>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 4010374:	01010074 	movhi	r4,1025
 4010378:	2114d404 	addi	r4,r4,21328
 401037c:	40107080 	call	4010708 <puts>
		return 1;
 4010380:	00800044 	movi	r2,1
 4010384:	00004606 	br	40104a0 <ov7670_i2c_initialize+0x160>
	}

	//set the address of the device using
	alt_avalon_i2c_master_target_set(i2c_dev, 0x21);
 4010388:	01400844 	movi	r5,33
 401038c:	e13efe17 	ldw	r4,-1032(fp)
 4010390:	40121340 	call	4012134 <alt_avalon_i2c_master_target_set>

#if 1
	i = 0;
 4010394:	e03efd15 	stw	zero,-1036(fp)
    txbuffer[i++]=0x12; txbuffer[i++]=0x80; //reset
 4010398:	e0befd17 	ldw	r2,-1036(fp)
 401039c:	10c00044 	addi	r3,r2,1
 40103a0:	e0fefd15 	stw	r3,-1036(fp)
 40103a4:	e0ff0004 	addi	r3,fp,-1024
 40103a8:	1885883a 	add	r2,r3,r2
 40103ac:	00c00484 	movi	r3,18
 40103b0:	10c00005 	stb	r3,0(r2)
 40103b4:	e0befd17 	ldw	r2,-1036(fp)
 40103b8:	10c00044 	addi	r3,r2,1
 40103bc:	e0fefd15 	stw	r3,-1036(fp)
 40103c0:	e0ff0004 	addi	r3,fp,-1024
 40103c4:	1885883a 	add	r2,r3,r2
 40103c8:	00ffe004 	movi	r3,-128
 40103cc:	10c00005 	stb	r3,0(r2)
	status=alt_avalon_i2c_master_tx(i2c_dev, txbuffer, i, ALT_AVALON_I2C_NO_INTERRUPTS);
 40103d0:	e0fefd17 	ldw	r3,-1036(fp)
 40103d4:	e0bf0004 	addi	r2,fp,-1024
 40103d8:	000f883a 	mov	r7,zero
 40103dc:	180d883a 	mov	r6,r3
 40103e0:	100b883a 	mov	r5,r2
 40103e4:	e13efe17 	ldw	r4,-1032(fp)
 40103e8:	401233c0 	call	401233c <alt_avalon_i2c_master_tx>
 40103ec:	e0beff15 	stw	r2,-1028(fp)
	if (status!=ALT_AVALON_I2C_SUCCESS) {
 40103f0:	e0beff17 	ldw	r2,-1028(fp)
 40103f4:	10000626 	beq	r2,zero,4010410 <ov7670_i2c_initialize+0xd0>
		printf("i2c_test reset write fail, ret=%d\n", status);
 40103f8:	e17eff17 	ldw	r5,-1028(fp)
 40103fc:	01010074 	movhi	r4,1025
 4010400:	2114dc04 	addi	r4,r4,21360
 4010404:	401063c0 	call	401063c <printf>
		return 1; //FAIL
 4010408:	00800044 	movi	r2,1
 401040c:	00002406 	br	40104a0 <ov7670_i2c_initialize+0x160>
	}

    usleep(100000); //100ms delay
 4010410:	010000b4 	movhi	r4,2
 4010414:	2121a804 	addi	r4,r4,-31072
 4010418:	40113e00 	call	40113e0 <usleep>

    for (i=0; i<sizeof(ov7670_regs); i=i+2) {
 401041c:	e03efd15 	stw	zero,-1036(fp)
 4010420:	00001806 	br	4010484 <ov7670_i2c_initialize+0x144>
  		status=alt_avalon_i2c_master_tx(i2c_dev, &ov7670_regs[i], 2, ALT_AVALON_I2C_NO_INTERRUPTS);
 4010424:	e0fefd17 	ldw	r3,-1036(fp)
 4010428:	00810074 	movhi	r2,1025
 401042c:	10952e04 	addi	r2,r2,21688
 4010430:	1885883a 	add	r2,r3,r2
 4010434:	000f883a 	mov	r7,zero
 4010438:	01800084 	movi	r6,2
 401043c:	100b883a 	mov	r5,r2
 4010440:	e13efe17 	ldw	r4,-1032(fp)
 4010444:	401233c0 	call	401233c <alt_avalon_i2c_master_tx>
 4010448:	e0beff15 	stw	r2,-1028(fp)
  		if (status!=ALT_AVALON_I2C_SUCCESS) {
 401044c:	e0beff17 	ldw	r2,-1028(fp)
 4010450:	10000726 	beq	r2,zero,4010470 <ov7670_i2c_initialize+0x130>
  			printf("i2c_test write fail, pos=%d ret=%d\n", i, status);
 4010454:	e1beff17 	ldw	r6,-1028(fp)
 4010458:	e17efd17 	ldw	r5,-1036(fp)
 401045c:	01010074 	movhi	r4,1025
 4010460:	2114e504 	addi	r4,r4,21396
 4010464:	401063c0 	call	401063c <printf>
  			return 1; //FAIL
 4010468:	00800044 	movi	r2,1
 401046c:	00000c06 	br	40104a0 <ov7670_i2c_initialize+0x160>
  		}
  		usleep(10000);
 4010470:	0109c404 	movi	r4,10000
 4010474:	40113e00 	call	40113e0 <usleep>
		return 1; //FAIL
	}

    usleep(100000); //100ms delay

    for (i=0; i<sizeof(ov7670_regs); i=i+2) {
 4010478:	e0befd17 	ldw	r2,-1036(fp)
 401047c:	10800084 	addi	r2,r2,2
 4010480:	e0befd15 	stw	r2,-1036(fp)
 4010484:	e0befd17 	ldw	r2,-1036(fp)
 4010488:	10802430 	cmpltui	r2,r2,144
 401048c:	103fe51e 	bne	r2,zero,4010424 <__alt_data_end+0xffff0424>
  			return 1; //FAIL
  		}
  		usleep(10000);
    }

    printf("OV7670 initialization done\n");
 4010490:	01010074 	movhi	r4,1025
 4010494:	2114ee04 	addi	r4,r4,21432
 4010498:	40107080 	call	4010708 <puts>
	status = alt_avalon_i2c_cmd_write(i2c_dev,
	                                                      alt_u8 val,
	                                                      alt_u8 issue_restart,
	                                                      alt_u8 issue_stop);
#endif
	return 0;
 401049c:	0005883a 	mov	r2,zero
}
 40104a0:	e037883a 	mov	sp,fp
 40104a4:	dfc00117 	ldw	ra,4(sp)
 40104a8:	df000017 	ldw	fp,0(sp)
 40104ac:	dec00204 	addi	sp,sp,8
 40104b0:	f800283a 	ret

040104b4 <memset32>:

void memset32(uint32_t *p, uint32_t val, uint32_t size)
{
 40104b4:	defffc04 	addi	sp,sp,-16
 40104b8:	df000315 	stw	fp,12(sp)
 40104bc:	df000304 	addi	fp,sp,12
 40104c0:	e13ffd15 	stw	r4,-12(fp)
 40104c4:	e17ffe15 	stw	r5,-8(fp)
 40104c8:	e1bfff15 	stw	r6,-4(fp)
	while(size--)
 40104cc:	00000506 	br	40104e4 <memset32+0x30>
	{
		*p++ = val;
 40104d0:	e0bffd17 	ldw	r2,-12(fp)
 40104d4:	10c00104 	addi	r3,r2,4
 40104d8:	e0fffd15 	stw	r3,-12(fp)
 40104dc:	e0fffe17 	ldw	r3,-8(fp)
 40104e0:	10c00015 	stw	r3,0(r2)
	return 0;
}

void memset32(uint32_t *p, uint32_t val, uint32_t size)
{
	while(size--)
 40104e4:	e0bfff17 	ldw	r2,-4(fp)
 40104e8:	10ffffc4 	addi	r3,r2,-1
 40104ec:	e0ffff15 	stw	r3,-4(fp)
 40104f0:	103ff71e 	bne	r2,zero,40104d0 <__alt_data_end+0xffff04d0>
	{
		*p++ = val;
	}
}
 40104f4:	0001883a 	nop
 40104f8:	e037883a 	mov	sp,fp
 40104fc:	df000017 	ldw	fp,0(sp)
 4010500:	dec00104 	addi	sp,sp,4
 4010504:	f800283a 	ret

04010508 <main>:


void main()
{
 4010508:	defffb04 	addi	sp,sp,-20
 401050c:	dfc00415 	stw	ra,16(sp)
 4010510:	df000315 	stw	fp,12(sp)
 4010514:	df000304 	addi	fp,sp,12
  printf("Hello from Nios II! DE1_SOC board\n");
 4010518:	01010074 	movhi	r4,1025
 401051c:	2114f504 	addi	r4,r4,21460
 4010520:	40107080 	call	4010708 <puts>
  printf("SDRAM start=0x%08x, size=0x%08x\n", NEW_SDRAM_CONTROLLER_0_BASE, NEW_SDRAM_CONTROLLER_0_SPAN);
 4010524:	01810034 	movhi	r6,1024
 4010528:	000b883a 	mov	r5,zero
 401052c:	01010074 	movhi	r4,1025
 4010530:	2114fe04 	addi	r4,r4,21496
 4010534:	401063c0 	call	401063c <printf>

  EnablePioInterrupt();
#endif

#if 1
  ov7670_i2c_initialize();
 4010538:	40103400 	call	4010340 <ov7670_i2c_initialize>
  printf("wait 2 sec\n");
 401053c:	01010074 	movhi	r4,1025
 4010540:	21150704 	addi	r4,r4,21532
 4010544:	40107080 	call	4010708 <puts>
  usleep(2000000);
 4010548:	010007f4 	movhi	r4,31
 401054c:	21212004 	addi	r4,r4,-31616
 4010550:	40113e00 	call	40113e0 <usleep>
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 1);
 4010554:	00c00044 	movi	r3,1
 4010558:	008100b4 	movhi	r2,1026
 401055c:	10841c04 	addi	r2,r2,4208
 4010560:	10c00035 	stwio	r3,0(r2)
  printf("FLAG DONE ASSERTED\n");
 4010564:	01010074 	movhi	r4,1025
 4010568:	21150a04 	addi	r4,r4,21544
 401056c:	40107080 	call	4010708 <puts>
  //while(1);
#endif

  int cnt = 0;
 4010570:	e03ffd15 	stw	zero,-12(fp)
  while(1) {
	  static int port_val_prev = -1;
	  int port_val = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
 4010574:	008100b4 	movhi	r2,1026
 4010578:	10841804 	addi	r2,r2,4192
 401057c:	10800037 	ldwio	r2,0(r2)
 4010580:	e0bffe15 	stw	r2,-8(fp)

	  if (port_val != port_val_prev) {
 4010584:	d0a00017 	ldw	r2,-32768(gp)
 4010588:	e0fffe17 	ldw	r3,-8(fp)
 401058c:	18bff926 	beq	r3,r2,4010574 <__alt_data_end+0xffff0574>
		  printf("%d int_cnt=%d 0x%02x\n", cnt++, int_cnt, port_val);
 4010590:	e0bffd17 	ldw	r2,-12(fp)
 4010594:	10c00044 	addi	r3,r2,1
 4010598:	e0fffd15 	stw	r3,-12(fp)
 401059c:	d0e50817 	ldw	r3,-27616(gp)
 40105a0:	e1fffe17 	ldw	r7,-8(fp)
 40105a4:	180d883a 	mov	r6,r3
 40105a8:	100b883a 	mov	r5,r2
 40105ac:	01010074 	movhi	r4,1025
 40105b0:	21150f04 	addi	r4,r4,21564
 40105b4:	401063c0 	call	401063c <printf>
	  	  uint32_t color = ((port_val>>4)&0x0F)<<1;
 40105b8:	e0bffe17 	ldw	r2,-8(fp)
 40105bc:	1005d13a 	srai	r2,r2,4
 40105c0:	108003cc 	andi	r2,r2,15
 40105c4:	1085883a 	add	r2,r2,r2
 40105c8:	e0bfff15 	stw	r2,-4(fp)
	  	  color |= color<<16;
 40105cc:	e0bfff17 	ldw	r2,-4(fp)
 40105d0:	1004943a 	slli	r2,r2,16
 40105d4:	e0ffff17 	ldw	r3,-4(fp)
 40105d8:	1884b03a 	or	r2,r3,r2
 40105dc:	e0bfff15 	stw	r2,-4(fp)

	  	  memset32(640*120*2, color, 640*30/2);
 40105e0:	01896004 	movi	r6,9600
 40105e4:	e17fff17 	ldw	r5,-4(fp)
 40105e8:	010000b4 	movhi	r4,2
 40105ec:	21160004 	addi	r4,r4,22528
 40105f0:	40104b40 	call	40104b4 <memset32>
	  	  //usleep(500000);
	  	  port_val_prev = port_val;
 40105f4:	e0bffe17 	ldw	r2,-8(fp)
 40105f8:	d0a00015 	stw	r2,-32768(gp)
	  }
  }
 40105fc:	003fdd06 	br	4010574 <__alt_data_end+0xffff0574>

04010600 <_printf_r>:
 4010600:	defffd04 	addi	sp,sp,-12
 4010604:	dfc00015 	stw	ra,0(sp)
 4010608:	d9800115 	stw	r6,4(sp)
 401060c:	d9c00215 	stw	r7,8(sp)
 4010610:	20c00217 	ldw	r3,8(r4)
 4010614:	01810074 	movhi	r6,1025
 4010618:	31833b04 	addi	r6,r6,3308
 401061c:	19800115 	stw	r6,4(r3)
 4010620:	280d883a 	mov	r6,r5
 4010624:	21400217 	ldw	r5,8(r4)
 4010628:	d9c00104 	addi	r7,sp,4
 401062c:	40107a40 	call	40107a4 <___vfprintf_internal_r>
 4010630:	dfc00017 	ldw	ra,0(sp)
 4010634:	dec00304 	addi	sp,sp,12
 4010638:	f800283a 	ret

0401063c <printf>:
 401063c:	defffc04 	addi	sp,sp,-16
 4010640:	dfc00015 	stw	ra,0(sp)
 4010644:	d9400115 	stw	r5,4(sp)
 4010648:	d9800215 	stw	r6,8(sp)
 401064c:	d9c00315 	stw	r7,12(sp)
 4010650:	00810074 	movhi	r2,1025
 4010654:	109a1c04 	addi	r2,r2,26736
 4010658:	10800017 	ldw	r2,0(r2)
 401065c:	01410074 	movhi	r5,1025
 4010660:	29433b04 	addi	r5,r5,3308
 4010664:	10c00217 	ldw	r3,8(r2)
 4010668:	d9800104 	addi	r6,sp,4
 401066c:	19400115 	stw	r5,4(r3)
 4010670:	200b883a 	mov	r5,r4
 4010674:	11000217 	ldw	r4,8(r2)
 4010678:	4010cd00 	call	4010cd0 <__vfprintf_internal>
 401067c:	dfc00017 	ldw	ra,0(sp)
 4010680:	dec00404 	addi	sp,sp,16
 4010684:	f800283a 	ret

04010688 <_puts_r>:
 4010688:	defffd04 	addi	sp,sp,-12
 401068c:	dc000015 	stw	r16,0(sp)
 4010690:	2021883a 	mov	r16,r4
 4010694:	2809883a 	mov	r4,r5
 4010698:	dfc00215 	stw	ra,8(sp)
 401069c:	dc400115 	stw	r17,4(sp)
 40106a0:	2823883a 	mov	r17,r5
 40106a4:	401071c0 	call	401071c <strlen>
 40106a8:	81400217 	ldw	r5,8(r16)
 40106ac:	01010074 	movhi	r4,1025
 40106b0:	21033b04 	addi	r4,r4,3308
 40106b4:	29000115 	stw	r4,4(r5)
 40106b8:	100f883a 	mov	r7,r2
 40106bc:	880d883a 	mov	r6,r17
 40106c0:	8009883a 	mov	r4,r16
 40106c4:	4010cec0 	call	4010cec <__sfvwrite_small_dev>
 40106c8:	00ffffc4 	movi	r3,-1
 40106cc:	10c00926 	beq	r2,r3,40106f4 <_puts_r+0x6c>
 40106d0:	81400217 	ldw	r5,8(r16)
 40106d4:	01810074 	movhi	r6,1025
 40106d8:	01c00044 	movi	r7,1
 40106dc:	28800117 	ldw	r2,4(r5)
 40106e0:	31951504 	addi	r6,r6,21588
 40106e4:	8009883a 	mov	r4,r16
 40106e8:	103ee83a 	callr	r2
 40106ec:	10bfffe0 	cmpeqi	r2,r2,-1
 40106f0:	0085c83a 	sub	r2,zero,r2
 40106f4:	dfc00217 	ldw	ra,8(sp)
 40106f8:	dc400117 	ldw	r17,4(sp)
 40106fc:	dc000017 	ldw	r16,0(sp)
 4010700:	dec00304 	addi	sp,sp,12
 4010704:	f800283a 	ret

04010708 <puts>:
 4010708:	00810074 	movhi	r2,1025
 401070c:	109a1c04 	addi	r2,r2,26736
 4010710:	200b883a 	mov	r5,r4
 4010714:	11000017 	ldw	r4,0(r2)
 4010718:	40106881 	jmpi	4010688 <_puts_r>

0401071c <strlen>:
 401071c:	2005883a 	mov	r2,r4
 4010720:	10c00007 	ldb	r3,0(r2)
 4010724:	18000226 	beq	r3,zero,4010730 <strlen+0x14>
 4010728:	10800044 	addi	r2,r2,1
 401072c:	003ffc06 	br	4010720 <__alt_data_end+0xffff0720>
 4010730:	1105c83a 	sub	r2,r2,r4
 4010734:	f800283a 	ret

04010738 <print_repeat>:
 4010738:	defffb04 	addi	sp,sp,-20
 401073c:	dc800315 	stw	r18,12(sp)
 4010740:	dc400215 	stw	r17,8(sp)
 4010744:	dc000115 	stw	r16,4(sp)
 4010748:	dfc00415 	stw	ra,16(sp)
 401074c:	2025883a 	mov	r18,r4
 4010750:	2823883a 	mov	r17,r5
 4010754:	d9800005 	stb	r6,0(sp)
 4010758:	3821883a 	mov	r16,r7
 401075c:	04000a0e 	bge	zero,r16,4010788 <print_repeat+0x50>
 4010760:	88800117 	ldw	r2,4(r17)
 4010764:	01c00044 	movi	r7,1
 4010768:	d80d883a 	mov	r6,sp
 401076c:	880b883a 	mov	r5,r17
 4010770:	9009883a 	mov	r4,r18
 4010774:	103ee83a 	callr	r2
 4010778:	843fffc4 	addi	r16,r16,-1
 401077c:	103ff726 	beq	r2,zero,401075c <__alt_data_end+0xffff075c>
 4010780:	00bfffc4 	movi	r2,-1
 4010784:	00000106 	br	401078c <print_repeat+0x54>
 4010788:	0005883a 	mov	r2,zero
 401078c:	dfc00417 	ldw	ra,16(sp)
 4010790:	dc800317 	ldw	r18,12(sp)
 4010794:	dc400217 	ldw	r17,8(sp)
 4010798:	dc000117 	ldw	r16,4(sp)
 401079c:	dec00504 	addi	sp,sp,20
 40107a0:	f800283a 	ret

040107a4 <___vfprintf_internal_r>:
 40107a4:	deffe504 	addi	sp,sp,-108
 40107a8:	d8c00804 	addi	r3,sp,32
 40107ac:	ddc01815 	stw	r23,96(sp)
 40107b0:	dd801715 	stw	r22,92(sp)
 40107b4:	dd401615 	stw	r21,88(sp)
 40107b8:	dd001515 	stw	r20,84(sp)
 40107bc:	dcc01415 	stw	r19,80(sp)
 40107c0:	dc801315 	stw	r18,76(sp)
 40107c4:	dc401215 	stw	r17,72(sp)
 40107c8:	dc001115 	stw	r16,68(sp)
 40107cc:	dfc01a15 	stw	ra,104(sp)
 40107d0:	df001915 	stw	fp,100(sp)
 40107d4:	2029883a 	mov	r20,r4
 40107d8:	2823883a 	mov	r17,r5
 40107dc:	382d883a 	mov	r22,r7
 40107e0:	d9800f15 	stw	r6,60(sp)
 40107e4:	0021883a 	mov	r16,zero
 40107e8:	d8000e15 	stw	zero,56(sp)
 40107ec:	d8000a15 	stw	zero,40(sp)
 40107f0:	002b883a 	mov	r21,zero
 40107f4:	0027883a 	mov	r19,zero
 40107f8:	0025883a 	mov	r18,zero
 40107fc:	d8000c15 	stw	zero,48(sp)
 4010800:	d8000b15 	stw	zero,44(sp)
 4010804:	002f883a 	mov	r23,zero
 4010808:	d8c00915 	stw	r3,36(sp)
 401080c:	d8c00f17 	ldw	r3,60(sp)
 4010810:	19000003 	ldbu	r4,0(r3)
 4010814:	20803fcc 	andi	r2,r4,255
 4010818:	1080201c 	xori	r2,r2,128
 401081c:	10bfe004 	addi	r2,r2,-128
 4010820:	10011e26 	beq	r2,zero,4010c9c <___vfprintf_internal_r+0x4f8>
 4010824:	00c00044 	movi	r3,1
 4010828:	b8c01426 	beq	r23,r3,401087c <___vfprintf_internal_r+0xd8>
 401082c:	1dc00216 	blt	r3,r23,4010838 <___vfprintf_internal_r+0x94>
 4010830:	b8000626 	beq	r23,zero,401084c <___vfprintf_internal_r+0xa8>
 4010834:	00011506 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 4010838:	01400084 	movi	r5,2
 401083c:	b9401d26 	beq	r23,r5,40108b4 <___vfprintf_internal_r+0x110>
 4010840:	014000c4 	movi	r5,3
 4010844:	b9402b26 	beq	r23,r5,40108f4 <___vfprintf_internal_r+0x150>
 4010848:	00011006 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 401084c:	01400944 	movi	r5,37
 4010850:	1140fc26 	beq	r2,r5,4010c44 <___vfprintf_internal_r+0x4a0>
 4010854:	88800117 	ldw	r2,4(r17)
 4010858:	d9000005 	stb	r4,0(sp)
 401085c:	01c00044 	movi	r7,1
 4010860:	d80d883a 	mov	r6,sp
 4010864:	880b883a 	mov	r5,r17
 4010868:	a009883a 	mov	r4,r20
 401086c:	103ee83a 	callr	r2
 4010870:	1000d81e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010874:	84000044 	addi	r16,r16,1
 4010878:	00010406 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 401087c:	01400c04 	movi	r5,48
 4010880:	1140fa26 	beq	r2,r5,4010c6c <___vfprintf_internal_r+0x4c8>
 4010884:	01400944 	movi	r5,37
 4010888:	11400a1e 	bne	r2,r5,40108b4 <___vfprintf_internal_r+0x110>
 401088c:	d8800005 	stb	r2,0(sp)
 4010890:	88800117 	ldw	r2,4(r17)
 4010894:	b80f883a 	mov	r7,r23
 4010898:	d80d883a 	mov	r6,sp
 401089c:	880b883a 	mov	r5,r17
 40108a0:	a009883a 	mov	r4,r20
 40108a4:	103ee83a 	callr	r2
 40108a8:	1000ca1e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 40108ac:	84000044 	addi	r16,r16,1
 40108b0:	0000f506 	br	4010c88 <___vfprintf_internal_r+0x4e4>
 40108b4:	25fff404 	addi	r23,r4,-48
 40108b8:	bdc03fcc 	andi	r23,r23,255
 40108bc:	00c00244 	movi	r3,9
 40108c0:	1dc00936 	bltu	r3,r23,40108e8 <___vfprintf_internal_r+0x144>
 40108c4:	00bfffc4 	movi	r2,-1
 40108c8:	90800426 	beq	r18,r2,40108dc <___vfprintf_internal_r+0x138>
 40108cc:	01400284 	movi	r5,10
 40108d0:	9009883a 	mov	r4,r18
 40108d4:	4010fb00 	call	4010fb0 <__mulsi3>
 40108d8:	00000106 	br	40108e0 <___vfprintf_internal_r+0x13c>
 40108dc:	0005883a 	mov	r2,zero
 40108e0:	b8a5883a 	add	r18,r23,r2
 40108e4:	0000e206 	br	4010c70 <___vfprintf_internal_r+0x4cc>
 40108e8:	01400b84 	movi	r5,46
 40108ec:	1140e426 	beq	r2,r5,4010c80 <___vfprintf_internal_r+0x4dc>
 40108f0:	05c00084 	movi	r23,2
 40108f4:	213ff404 	addi	r4,r4,-48
 40108f8:	27003fcc 	andi	fp,r4,255
 40108fc:	00c00244 	movi	r3,9
 4010900:	1f000936 	bltu	r3,fp,4010928 <___vfprintf_internal_r+0x184>
 4010904:	00bfffc4 	movi	r2,-1
 4010908:	98800426 	beq	r19,r2,401091c <___vfprintf_internal_r+0x178>
 401090c:	01400284 	movi	r5,10
 4010910:	9809883a 	mov	r4,r19
 4010914:	4010fb00 	call	4010fb0 <__mulsi3>
 4010918:	00000106 	br	4010920 <___vfprintf_internal_r+0x17c>
 401091c:	0005883a 	mov	r2,zero
 4010920:	e0a7883a 	add	r19,fp,r2
 4010924:	0000d906 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 4010928:	00c01b04 	movi	r3,108
 401092c:	10c0d226 	beq	r2,r3,4010c78 <___vfprintf_internal_r+0x4d4>
 4010930:	013fffc4 	movi	r4,-1
 4010934:	99000226 	beq	r19,r4,4010940 <___vfprintf_internal_r+0x19c>
 4010938:	d8000b15 	stw	zero,44(sp)
 401093c:	00000106 	br	4010944 <___vfprintf_internal_r+0x1a0>
 4010940:	04c00044 	movi	r19,1
 4010944:	01001a44 	movi	r4,105
 4010948:	11001626 	beq	r2,r4,40109a4 <___vfprintf_internal_r+0x200>
 401094c:	20800916 	blt	r4,r2,4010974 <___vfprintf_internal_r+0x1d0>
 4010950:	010018c4 	movi	r4,99
 4010954:	11008826 	beq	r2,r4,4010b78 <___vfprintf_internal_r+0x3d4>
 4010958:	01001904 	movi	r4,100
 401095c:	11001126 	beq	r2,r4,40109a4 <___vfprintf_internal_r+0x200>
 4010960:	01001604 	movi	r4,88
 4010964:	1100c81e 	bne	r2,r4,4010c88 <___vfprintf_internal_r+0x4e4>
 4010968:	00c00044 	movi	r3,1
 401096c:	d8c00e15 	stw	r3,56(sp)
 4010970:	00001506 	br	40109c8 <___vfprintf_internal_r+0x224>
 4010974:	01001cc4 	movi	r4,115
 4010978:	11009826 	beq	r2,r4,4010bdc <___vfprintf_internal_r+0x438>
 401097c:	20800416 	blt	r4,r2,4010990 <___vfprintf_internal_r+0x1ec>
 4010980:	01001bc4 	movi	r4,111
 4010984:	1100c01e 	bne	r2,r4,4010c88 <___vfprintf_internal_r+0x4e4>
 4010988:	05400204 	movi	r21,8
 401098c:	00000f06 	br	40109cc <___vfprintf_internal_r+0x228>
 4010990:	01001d44 	movi	r4,117
 4010994:	11000d26 	beq	r2,r4,40109cc <___vfprintf_internal_r+0x228>
 4010998:	01001e04 	movi	r4,120
 401099c:	11000a26 	beq	r2,r4,40109c8 <___vfprintf_internal_r+0x224>
 40109a0:	0000b906 	br	4010c88 <___vfprintf_internal_r+0x4e4>
 40109a4:	d8c00a17 	ldw	r3,40(sp)
 40109a8:	b7000104 	addi	fp,r22,4
 40109ac:	18000726 	beq	r3,zero,40109cc <___vfprintf_internal_r+0x228>
 40109b0:	df000d15 	stw	fp,52(sp)
 40109b4:	b5c00017 	ldw	r23,0(r22)
 40109b8:	b800080e 	bge	r23,zero,40109dc <___vfprintf_internal_r+0x238>
 40109bc:	05efc83a 	sub	r23,zero,r23
 40109c0:	02400044 	movi	r9,1
 40109c4:	00000606 	br	40109e0 <___vfprintf_internal_r+0x23c>
 40109c8:	05400404 	movi	r21,16
 40109cc:	b0c00104 	addi	r3,r22,4
 40109d0:	d8c00d15 	stw	r3,52(sp)
 40109d4:	b5c00017 	ldw	r23,0(r22)
 40109d8:	d8000a15 	stw	zero,40(sp)
 40109dc:	0013883a 	mov	r9,zero
 40109e0:	d839883a 	mov	fp,sp
 40109e4:	b8001726 	beq	r23,zero,4010a44 <___vfprintf_internal_r+0x2a0>
 40109e8:	a80b883a 	mov	r5,r21
 40109ec:	b809883a 	mov	r4,r23
 40109f0:	da401015 	stw	r9,64(sp)
 40109f4:	4010ef40 	call	4010ef4 <__udivsi3>
 40109f8:	a80b883a 	mov	r5,r21
 40109fc:	1009883a 	mov	r4,r2
 4010a00:	102d883a 	mov	r22,r2
 4010a04:	4010fb00 	call	4010fb0 <__mulsi3>
 4010a08:	b885c83a 	sub	r2,r23,r2
 4010a0c:	00c00244 	movi	r3,9
 4010a10:	da401017 	ldw	r9,64(sp)
 4010a14:	18800216 	blt	r3,r2,4010a20 <___vfprintf_internal_r+0x27c>
 4010a18:	10800c04 	addi	r2,r2,48
 4010a1c:	00000506 	br	4010a34 <___vfprintf_internal_r+0x290>
 4010a20:	d8c00e17 	ldw	r3,56(sp)
 4010a24:	18000226 	beq	r3,zero,4010a30 <___vfprintf_internal_r+0x28c>
 4010a28:	10800dc4 	addi	r2,r2,55
 4010a2c:	00000106 	br	4010a34 <___vfprintf_internal_r+0x290>
 4010a30:	108015c4 	addi	r2,r2,87
 4010a34:	e0800005 	stb	r2,0(fp)
 4010a38:	b02f883a 	mov	r23,r22
 4010a3c:	e7000044 	addi	fp,fp,1
 4010a40:	003fe806 	br	40109e4 <__alt_data_end+0xffff09e4>
 4010a44:	e6efc83a 	sub	r23,fp,sp
 4010a48:	9dc5c83a 	sub	r2,r19,r23
 4010a4c:	0080090e 	bge	zero,r2,4010a74 <___vfprintf_internal_r+0x2d0>
 4010a50:	e085883a 	add	r2,fp,r2
 4010a54:	01400c04 	movi	r5,48
 4010a58:	d8c00917 	ldw	r3,36(sp)
 4010a5c:	e009883a 	mov	r4,fp
 4010a60:	e0c0032e 	bgeu	fp,r3,4010a70 <___vfprintf_internal_r+0x2cc>
 4010a64:	e7000044 	addi	fp,fp,1
 4010a68:	21400005 	stb	r5,0(r4)
 4010a6c:	e0bffa1e 	bne	fp,r2,4010a58 <__alt_data_end+0xffff0a58>
 4010a70:	e6efc83a 	sub	r23,fp,sp
 4010a74:	d8c00b17 	ldw	r3,44(sp)
 4010a78:	4dd1883a 	add	r8,r9,r23
 4010a7c:	922dc83a 	sub	r22,r18,r8
 4010a80:	18001626 	beq	r3,zero,4010adc <___vfprintf_internal_r+0x338>
 4010a84:	48000a26 	beq	r9,zero,4010ab0 <___vfprintf_internal_r+0x30c>
 4010a88:	00800b44 	movi	r2,45
 4010a8c:	d8800805 	stb	r2,32(sp)
 4010a90:	88800117 	ldw	r2,4(r17)
 4010a94:	01c00044 	movi	r7,1
 4010a98:	d9800804 	addi	r6,sp,32
 4010a9c:	880b883a 	mov	r5,r17
 4010aa0:	a009883a 	mov	r4,r20
 4010aa4:	103ee83a 	callr	r2
 4010aa8:	10004a1e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010aac:	84000044 	addi	r16,r16,1
 4010ab0:	0580070e 	bge	zero,r22,4010ad0 <___vfprintf_internal_r+0x32c>
 4010ab4:	b00f883a 	mov	r7,r22
 4010ab8:	01800c04 	movi	r6,48
 4010abc:	880b883a 	mov	r5,r17
 4010ac0:	a009883a 	mov	r4,r20
 4010ac4:	40107380 	call	4010738 <print_repeat>
 4010ac8:	1000421e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010acc:	85a1883a 	add	r16,r16,r22
 4010ad0:	e02d883a 	mov	r22,fp
 4010ad4:	bf2fc83a 	sub	r23,r23,fp
 4010ad8:	00002006 	br	4010b5c <___vfprintf_internal_r+0x3b8>
 4010adc:	0580090e 	bge	zero,r22,4010b04 <___vfprintf_internal_r+0x360>
 4010ae0:	b00f883a 	mov	r7,r22
 4010ae4:	01800804 	movi	r6,32
 4010ae8:	880b883a 	mov	r5,r17
 4010aec:	a009883a 	mov	r4,r20
 4010af0:	da401015 	stw	r9,64(sp)
 4010af4:	40107380 	call	4010738 <print_repeat>
 4010af8:	da401017 	ldw	r9,64(sp)
 4010afc:	1000351e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010b00:	85a1883a 	add	r16,r16,r22
 4010b04:	483ff226 	beq	r9,zero,4010ad0 <__alt_data_end+0xffff0ad0>
 4010b08:	00800b44 	movi	r2,45
 4010b0c:	d8800805 	stb	r2,32(sp)
 4010b10:	88800117 	ldw	r2,4(r17)
 4010b14:	01c00044 	movi	r7,1
 4010b18:	d9800804 	addi	r6,sp,32
 4010b1c:	880b883a 	mov	r5,r17
 4010b20:	a009883a 	mov	r4,r20
 4010b24:	103ee83a 	callr	r2
 4010b28:	10002a1e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010b2c:	84000044 	addi	r16,r16,1
 4010b30:	003fe706 	br	4010ad0 <__alt_data_end+0xffff0ad0>
 4010b34:	b5bfffc4 	addi	r22,r22,-1
 4010b38:	b0800003 	ldbu	r2,0(r22)
 4010b3c:	01c00044 	movi	r7,1
 4010b40:	d9800804 	addi	r6,sp,32
 4010b44:	d8800805 	stb	r2,32(sp)
 4010b48:	88800117 	ldw	r2,4(r17)
 4010b4c:	880b883a 	mov	r5,r17
 4010b50:	a009883a 	mov	r4,r20
 4010b54:	103ee83a 	callr	r2
 4010b58:	10001e1e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010b5c:	8585c83a 	sub	r2,r16,r22
 4010b60:	b5c9883a 	add	r4,r22,r23
 4010b64:	e085883a 	add	r2,fp,r2
 4010b68:	013ff216 	blt	zero,r4,4010b34 <__alt_data_end+0xffff0b34>
 4010b6c:	1021883a 	mov	r16,r2
 4010b70:	dd800d17 	ldw	r22,52(sp)
 4010b74:	00004406 	br	4010c88 <___vfprintf_internal_r+0x4e4>
 4010b78:	00800044 	movi	r2,1
 4010b7c:	1480080e 	bge	r2,r18,4010ba0 <___vfprintf_internal_r+0x3fc>
 4010b80:	95ffffc4 	addi	r23,r18,-1
 4010b84:	b80f883a 	mov	r7,r23
 4010b88:	01800804 	movi	r6,32
 4010b8c:	880b883a 	mov	r5,r17
 4010b90:	a009883a 	mov	r4,r20
 4010b94:	40107380 	call	4010738 <print_repeat>
 4010b98:	10000e1e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010b9c:	85e1883a 	add	r16,r16,r23
 4010ba0:	b0800017 	ldw	r2,0(r22)
 4010ba4:	01c00044 	movi	r7,1
 4010ba8:	d80d883a 	mov	r6,sp
 4010bac:	d8800005 	stb	r2,0(sp)
 4010bb0:	88800117 	ldw	r2,4(r17)
 4010bb4:	880b883a 	mov	r5,r17
 4010bb8:	a009883a 	mov	r4,r20
 4010bbc:	b5c00104 	addi	r23,r22,4
 4010bc0:	103ee83a 	callr	r2
 4010bc4:	1000031e 	bne	r2,zero,4010bd4 <___vfprintf_internal_r+0x430>
 4010bc8:	84000044 	addi	r16,r16,1
 4010bcc:	b82d883a 	mov	r22,r23
 4010bd0:	00002d06 	br	4010c88 <___vfprintf_internal_r+0x4e4>
 4010bd4:	00bfffc4 	movi	r2,-1
 4010bd8:	00003106 	br	4010ca0 <___vfprintf_internal_r+0x4fc>
 4010bdc:	b5c00017 	ldw	r23,0(r22)
 4010be0:	b7000104 	addi	fp,r22,4
 4010be4:	b809883a 	mov	r4,r23
 4010be8:	401071c0 	call	401071c <strlen>
 4010bec:	9091c83a 	sub	r8,r18,r2
 4010bf0:	102d883a 	mov	r22,r2
 4010bf4:	0200090e 	bge	zero,r8,4010c1c <___vfprintf_internal_r+0x478>
 4010bf8:	400f883a 	mov	r7,r8
 4010bfc:	01800804 	movi	r6,32
 4010c00:	880b883a 	mov	r5,r17
 4010c04:	a009883a 	mov	r4,r20
 4010c08:	da001015 	stw	r8,64(sp)
 4010c0c:	40107380 	call	4010738 <print_repeat>
 4010c10:	da001017 	ldw	r8,64(sp)
 4010c14:	103fef1e 	bne	r2,zero,4010bd4 <__alt_data_end+0xffff0bd4>
 4010c18:	8221883a 	add	r16,r16,r8
 4010c1c:	88800117 	ldw	r2,4(r17)
 4010c20:	b00f883a 	mov	r7,r22
 4010c24:	b80d883a 	mov	r6,r23
 4010c28:	880b883a 	mov	r5,r17
 4010c2c:	a009883a 	mov	r4,r20
 4010c30:	103ee83a 	callr	r2
 4010c34:	103fe71e 	bne	r2,zero,4010bd4 <__alt_data_end+0xffff0bd4>
 4010c38:	85a1883a 	add	r16,r16,r22
 4010c3c:	e02d883a 	mov	r22,fp
 4010c40:	00001106 	br	4010c88 <___vfprintf_internal_r+0x4e4>
 4010c44:	00c00044 	movi	r3,1
 4010c48:	04ffffc4 	movi	r19,-1
 4010c4c:	d8000e15 	stw	zero,56(sp)
 4010c50:	d8c00a15 	stw	r3,40(sp)
 4010c54:	05400284 	movi	r21,10
 4010c58:	9825883a 	mov	r18,r19
 4010c5c:	d8000c15 	stw	zero,48(sp)
 4010c60:	d8000b15 	stw	zero,44(sp)
 4010c64:	182f883a 	mov	r23,r3
 4010c68:	00000806 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 4010c6c:	ddc00b15 	stw	r23,44(sp)
 4010c70:	05c00084 	movi	r23,2
 4010c74:	00000506 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 4010c78:	00c00044 	movi	r3,1
 4010c7c:	d8c00c15 	stw	r3,48(sp)
 4010c80:	05c000c4 	movi	r23,3
 4010c84:	00000106 	br	4010c8c <___vfprintf_internal_r+0x4e8>
 4010c88:	002f883a 	mov	r23,zero
 4010c8c:	d8c00f17 	ldw	r3,60(sp)
 4010c90:	18c00044 	addi	r3,r3,1
 4010c94:	d8c00f15 	stw	r3,60(sp)
 4010c98:	003edc06 	br	401080c <__alt_data_end+0xffff080c>
 4010c9c:	8005883a 	mov	r2,r16
 4010ca0:	dfc01a17 	ldw	ra,104(sp)
 4010ca4:	df001917 	ldw	fp,100(sp)
 4010ca8:	ddc01817 	ldw	r23,96(sp)
 4010cac:	dd801717 	ldw	r22,92(sp)
 4010cb0:	dd401617 	ldw	r21,88(sp)
 4010cb4:	dd001517 	ldw	r20,84(sp)
 4010cb8:	dcc01417 	ldw	r19,80(sp)
 4010cbc:	dc801317 	ldw	r18,76(sp)
 4010cc0:	dc401217 	ldw	r17,72(sp)
 4010cc4:	dc001117 	ldw	r16,68(sp)
 4010cc8:	dec01b04 	addi	sp,sp,108
 4010ccc:	f800283a 	ret

04010cd0 <__vfprintf_internal>:
 4010cd0:	00810074 	movhi	r2,1025
 4010cd4:	109a1c04 	addi	r2,r2,26736
 4010cd8:	300f883a 	mov	r7,r6
 4010cdc:	280d883a 	mov	r6,r5
 4010ce0:	200b883a 	mov	r5,r4
 4010ce4:	11000017 	ldw	r4,0(r2)
 4010ce8:	40107a41 	jmpi	40107a4 <___vfprintf_internal_r>

04010cec <__sfvwrite_small_dev>:
 4010cec:	2880000b 	ldhu	r2,0(r5)
 4010cf0:	1080020c 	andi	r2,r2,8
 4010cf4:	10002126 	beq	r2,zero,4010d7c <__sfvwrite_small_dev+0x90>
 4010cf8:	2880008f 	ldh	r2,2(r5)
 4010cfc:	defffa04 	addi	sp,sp,-24
 4010d00:	dc000015 	stw	r16,0(sp)
 4010d04:	dfc00515 	stw	ra,20(sp)
 4010d08:	dd000415 	stw	r20,16(sp)
 4010d0c:	dcc00315 	stw	r19,12(sp)
 4010d10:	dc800215 	stw	r18,8(sp)
 4010d14:	dc400115 	stw	r17,4(sp)
 4010d18:	2821883a 	mov	r16,r5
 4010d1c:	10001216 	blt	r2,zero,4010d68 <__sfvwrite_small_dev+0x7c>
 4010d20:	2027883a 	mov	r19,r4
 4010d24:	3025883a 	mov	r18,r6
 4010d28:	3823883a 	mov	r17,r7
 4010d2c:	05010004 	movi	r20,1024
 4010d30:	04400b0e 	bge	zero,r17,4010d60 <__sfvwrite_small_dev+0x74>
 4010d34:	880f883a 	mov	r7,r17
 4010d38:	a440010e 	bge	r20,r17,4010d40 <__sfvwrite_small_dev+0x54>
 4010d3c:	01c10004 	movi	r7,1024
 4010d40:	8140008f 	ldh	r5,2(r16)
 4010d44:	900d883a 	mov	r6,r18
 4010d48:	9809883a 	mov	r4,r19
 4010d4c:	4010da40 	call	4010da4 <_write_r>
 4010d50:	0080050e 	bge	zero,r2,4010d68 <__sfvwrite_small_dev+0x7c>
 4010d54:	88a3c83a 	sub	r17,r17,r2
 4010d58:	90a5883a 	add	r18,r18,r2
 4010d5c:	003ff406 	br	4010d30 <__alt_data_end+0xffff0d30>
 4010d60:	0005883a 	mov	r2,zero
 4010d64:	00000706 	br	4010d84 <__sfvwrite_small_dev+0x98>
 4010d68:	8080000b 	ldhu	r2,0(r16)
 4010d6c:	10801014 	ori	r2,r2,64
 4010d70:	8080000d 	sth	r2,0(r16)
 4010d74:	00bfffc4 	movi	r2,-1
 4010d78:	00000206 	br	4010d84 <__sfvwrite_small_dev+0x98>
 4010d7c:	00bfffc4 	movi	r2,-1
 4010d80:	f800283a 	ret
 4010d84:	dfc00517 	ldw	ra,20(sp)
 4010d88:	dd000417 	ldw	r20,16(sp)
 4010d8c:	dcc00317 	ldw	r19,12(sp)
 4010d90:	dc800217 	ldw	r18,8(sp)
 4010d94:	dc400117 	ldw	r17,4(sp)
 4010d98:	dc000017 	ldw	r16,0(sp)
 4010d9c:	dec00604 	addi	sp,sp,24
 4010da0:	f800283a 	ret

04010da4 <_write_r>:
 4010da4:	defffd04 	addi	sp,sp,-12
 4010da8:	dc000015 	stw	r16,0(sp)
 4010dac:	04010074 	movhi	r16,1025
 4010db0:	dc400115 	stw	r17,4(sp)
 4010db4:	841f2504 	addi	r16,r16,31892
 4010db8:	2023883a 	mov	r17,r4
 4010dbc:	2809883a 	mov	r4,r5
 4010dc0:	300b883a 	mov	r5,r6
 4010dc4:	380d883a 	mov	r6,r7
 4010dc8:	dfc00215 	stw	ra,8(sp)
 4010dcc:	80000015 	stw	zero,0(r16)
 4010dd0:	401144c0 	call	401144c <write>
 4010dd4:	00ffffc4 	movi	r3,-1
 4010dd8:	10c0031e 	bne	r2,r3,4010de8 <_write_r+0x44>
 4010ddc:	80c00017 	ldw	r3,0(r16)
 4010de0:	18000126 	beq	r3,zero,4010de8 <_write_r+0x44>
 4010de4:	88c00015 	stw	r3,0(r17)
 4010de8:	dfc00217 	ldw	ra,8(sp)
 4010dec:	dc400117 	ldw	r17,4(sp)
 4010df0:	dc000017 	ldw	r16,0(sp)
 4010df4:	dec00304 	addi	sp,sp,12
 4010df8:	f800283a 	ret

04010dfc <__divsi3>:
 4010dfc:	20001b16 	blt	r4,zero,4010e6c <__divsi3+0x70>
 4010e00:	000f883a 	mov	r7,zero
 4010e04:	28001616 	blt	r5,zero,4010e60 <__divsi3+0x64>
 4010e08:	200d883a 	mov	r6,r4
 4010e0c:	29001a2e 	bgeu	r5,r4,4010e78 <__divsi3+0x7c>
 4010e10:	00800804 	movi	r2,32
 4010e14:	00c00044 	movi	r3,1
 4010e18:	00000106 	br	4010e20 <__divsi3+0x24>
 4010e1c:	10000d26 	beq	r2,zero,4010e54 <__divsi3+0x58>
 4010e20:	294b883a 	add	r5,r5,r5
 4010e24:	10bfffc4 	addi	r2,r2,-1
 4010e28:	18c7883a 	add	r3,r3,r3
 4010e2c:	293ffb36 	bltu	r5,r4,4010e1c <__alt_data_end+0xffff0e1c>
 4010e30:	0005883a 	mov	r2,zero
 4010e34:	18000726 	beq	r3,zero,4010e54 <__divsi3+0x58>
 4010e38:	0005883a 	mov	r2,zero
 4010e3c:	31400236 	bltu	r6,r5,4010e48 <__divsi3+0x4c>
 4010e40:	314dc83a 	sub	r6,r6,r5
 4010e44:	10c4b03a 	or	r2,r2,r3
 4010e48:	1806d07a 	srli	r3,r3,1
 4010e4c:	280ad07a 	srli	r5,r5,1
 4010e50:	183ffa1e 	bne	r3,zero,4010e3c <__alt_data_end+0xffff0e3c>
 4010e54:	38000126 	beq	r7,zero,4010e5c <__divsi3+0x60>
 4010e58:	0085c83a 	sub	r2,zero,r2
 4010e5c:	f800283a 	ret
 4010e60:	014bc83a 	sub	r5,zero,r5
 4010e64:	39c0005c 	xori	r7,r7,1
 4010e68:	003fe706 	br	4010e08 <__alt_data_end+0xffff0e08>
 4010e6c:	0109c83a 	sub	r4,zero,r4
 4010e70:	01c00044 	movi	r7,1
 4010e74:	003fe306 	br	4010e04 <__alt_data_end+0xffff0e04>
 4010e78:	00c00044 	movi	r3,1
 4010e7c:	003fee06 	br	4010e38 <__alt_data_end+0xffff0e38>

04010e80 <__modsi3>:
 4010e80:	20001716 	blt	r4,zero,4010ee0 <__modsi3+0x60>
 4010e84:	000f883a 	mov	r7,zero
 4010e88:	2005883a 	mov	r2,r4
 4010e8c:	28001216 	blt	r5,zero,4010ed8 <__modsi3+0x58>
 4010e90:	2900162e 	bgeu	r5,r4,4010eec <__modsi3+0x6c>
 4010e94:	01800804 	movi	r6,32
 4010e98:	00c00044 	movi	r3,1
 4010e9c:	00000106 	br	4010ea4 <__modsi3+0x24>
 4010ea0:	30000a26 	beq	r6,zero,4010ecc <__modsi3+0x4c>
 4010ea4:	294b883a 	add	r5,r5,r5
 4010ea8:	31bfffc4 	addi	r6,r6,-1
 4010eac:	18c7883a 	add	r3,r3,r3
 4010eb0:	293ffb36 	bltu	r5,r4,4010ea0 <__alt_data_end+0xffff0ea0>
 4010eb4:	18000526 	beq	r3,zero,4010ecc <__modsi3+0x4c>
 4010eb8:	1806d07a 	srli	r3,r3,1
 4010ebc:	11400136 	bltu	r2,r5,4010ec4 <__modsi3+0x44>
 4010ec0:	1145c83a 	sub	r2,r2,r5
 4010ec4:	280ad07a 	srli	r5,r5,1
 4010ec8:	183ffb1e 	bne	r3,zero,4010eb8 <__alt_data_end+0xffff0eb8>
 4010ecc:	38000126 	beq	r7,zero,4010ed4 <__modsi3+0x54>
 4010ed0:	0085c83a 	sub	r2,zero,r2
 4010ed4:	f800283a 	ret
 4010ed8:	014bc83a 	sub	r5,zero,r5
 4010edc:	003fec06 	br	4010e90 <__alt_data_end+0xffff0e90>
 4010ee0:	0109c83a 	sub	r4,zero,r4
 4010ee4:	01c00044 	movi	r7,1
 4010ee8:	003fe706 	br	4010e88 <__alt_data_end+0xffff0e88>
 4010eec:	00c00044 	movi	r3,1
 4010ef0:	003ff106 	br	4010eb8 <__alt_data_end+0xffff0eb8>

04010ef4 <__udivsi3>:
 4010ef4:	200d883a 	mov	r6,r4
 4010ef8:	2900152e 	bgeu	r5,r4,4010f50 <__udivsi3+0x5c>
 4010efc:	28001416 	blt	r5,zero,4010f50 <__udivsi3+0x5c>
 4010f00:	00800804 	movi	r2,32
 4010f04:	00c00044 	movi	r3,1
 4010f08:	00000206 	br	4010f14 <__udivsi3+0x20>
 4010f0c:	10000e26 	beq	r2,zero,4010f48 <__udivsi3+0x54>
 4010f10:	28000516 	blt	r5,zero,4010f28 <__udivsi3+0x34>
 4010f14:	294b883a 	add	r5,r5,r5
 4010f18:	10bfffc4 	addi	r2,r2,-1
 4010f1c:	18c7883a 	add	r3,r3,r3
 4010f20:	293ffa36 	bltu	r5,r4,4010f0c <__alt_data_end+0xffff0f0c>
 4010f24:	18000826 	beq	r3,zero,4010f48 <__udivsi3+0x54>
 4010f28:	0005883a 	mov	r2,zero
 4010f2c:	31400236 	bltu	r6,r5,4010f38 <__udivsi3+0x44>
 4010f30:	314dc83a 	sub	r6,r6,r5
 4010f34:	10c4b03a 	or	r2,r2,r3
 4010f38:	1806d07a 	srli	r3,r3,1
 4010f3c:	280ad07a 	srli	r5,r5,1
 4010f40:	183ffa1e 	bne	r3,zero,4010f2c <__alt_data_end+0xffff0f2c>
 4010f44:	f800283a 	ret
 4010f48:	0005883a 	mov	r2,zero
 4010f4c:	f800283a 	ret
 4010f50:	00c00044 	movi	r3,1
 4010f54:	003ff406 	br	4010f28 <__alt_data_end+0xffff0f28>

04010f58 <__umodsi3>:
 4010f58:	2005883a 	mov	r2,r4
 4010f5c:	2900122e 	bgeu	r5,r4,4010fa8 <__umodsi3+0x50>
 4010f60:	28001116 	blt	r5,zero,4010fa8 <__umodsi3+0x50>
 4010f64:	01800804 	movi	r6,32
 4010f68:	00c00044 	movi	r3,1
 4010f6c:	00000206 	br	4010f78 <__umodsi3+0x20>
 4010f70:	30000c26 	beq	r6,zero,4010fa4 <__umodsi3+0x4c>
 4010f74:	28000516 	blt	r5,zero,4010f8c <__umodsi3+0x34>
 4010f78:	294b883a 	add	r5,r5,r5
 4010f7c:	31bfffc4 	addi	r6,r6,-1
 4010f80:	18c7883a 	add	r3,r3,r3
 4010f84:	293ffa36 	bltu	r5,r4,4010f70 <__alt_data_end+0xffff0f70>
 4010f88:	18000626 	beq	r3,zero,4010fa4 <__umodsi3+0x4c>
 4010f8c:	1806d07a 	srli	r3,r3,1
 4010f90:	11400136 	bltu	r2,r5,4010f98 <__umodsi3+0x40>
 4010f94:	1145c83a 	sub	r2,r2,r5
 4010f98:	280ad07a 	srli	r5,r5,1
 4010f9c:	183ffb1e 	bne	r3,zero,4010f8c <__alt_data_end+0xffff0f8c>
 4010fa0:	f800283a 	ret
 4010fa4:	f800283a 	ret
 4010fa8:	00c00044 	movi	r3,1
 4010fac:	003ff706 	br	4010f8c <__alt_data_end+0xffff0f8c>

04010fb0 <__mulsi3>:
 4010fb0:	0005883a 	mov	r2,zero
 4010fb4:	20000726 	beq	r4,zero,4010fd4 <__mulsi3+0x24>
 4010fb8:	20c0004c 	andi	r3,r4,1
 4010fbc:	2008d07a 	srli	r4,r4,1
 4010fc0:	18000126 	beq	r3,zero,4010fc8 <__mulsi3+0x18>
 4010fc4:	1145883a 	add	r2,r2,r5
 4010fc8:	294b883a 	add	r5,r5,r5
 4010fcc:	203ffa1e 	bne	r4,zero,4010fb8 <__alt_data_end+0xffff0fb8>
 4010fd0:	f800283a 	ret
 4010fd4:	f800283a 	ret

04010fd8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4010fd8:	defff904 	addi	sp,sp,-28
 4010fdc:	dfc00615 	stw	ra,24(sp)
 4010fe0:	df000515 	stw	fp,20(sp)
 4010fe4:	df000504 	addi	fp,sp,20
 4010fe8:	e13ffc15 	stw	r4,-16(fp)
 4010fec:	e17ffd15 	stw	r5,-12(fp)
 4010ff0:	e1bffe15 	stw	r6,-8(fp)
 4010ff4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4010ff8:	e0800217 	ldw	r2,8(fp)
 4010ffc:	d8800015 	stw	r2,0(sp)
 4011000:	e1ffff17 	ldw	r7,-4(fp)
 4011004:	e1bffe17 	ldw	r6,-8(fp)
 4011008:	e17ffd17 	ldw	r5,-12(fp)
 401100c:	e13ffc17 	ldw	r4,-16(fp)
 4011010:	40111880 	call	4011188 <alt_iic_isr_register>
}  
 4011014:	e037883a 	mov	sp,fp
 4011018:	dfc00117 	ldw	ra,4(sp)
 401101c:	df000017 	ldw	fp,0(sp)
 4011020:	dec00204 	addi	sp,sp,8
 4011024:	f800283a 	ret

04011028 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011028:	defff904 	addi	sp,sp,-28
 401102c:	df000615 	stw	fp,24(sp)
 4011030:	df000604 	addi	fp,sp,24
 4011034:	e13ffe15 	stw	r4,-8(fp)
 4011038:	e17fff15 	stw	r5,-4(fp)
 401103c:	e0bfff17 	ldw	r2,-4(fp)
 4011040:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011044:	0005303a 	rdctl	r2,status
 4011048:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401104c:	e0fffb17 	ldw	r3,-20(fp)
 4011050:	00bfff84 	movi	r2,-2
 4011054:	1884703a 	and	r2,r3,r2
 4011058:	1001703a 	wrctl	status,r2
  
  return context;
 401105c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011060:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011064:	00c00044 	movi	r3,1
 4011068:	e0bffa17 	ldw	r2,-24(fp)
 401106c:	1884983a 	sll	r2,r3,r2
 4011070:	1007883a 	mov	r3,r2
 4011074:	d0a50c17 	ldw	r2,-27600(gp)
 4011078:	1884b03a 	or	r2,r3,r2
 401107c:	d0a50c15 	stw	r2,-27600(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011080:	d0a50c17 	ldw	r2,-27600(gp)
 4011084:	100170fa 	wrctl	ienable,r2
 4011088:	e0bffc17 	ldw	r2,-16(fp)
 401108c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011090:	e0bffd17 	ldw	r2,-12(fp)
 4011094:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011098:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401109c:	0001883a 	nop
}
 40110a0:	e037883a 	mov	sp,fp
 40110a4:	df000017 	ldw	fp,0(sp)
 40110a8:	dec00104 	addi	sp,sp,4
 40110ac:	f800283a 	ret

040110b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40110b0:	defff904 	addi	sp,sp,-28
 40110b4:	df000615 	stw	fp,24(sp)
 40110b8:	df000604 	addi	fp,sp,24
 40110bc:	e13ffe15 	stw	r4,-8(fp)
 40110c0:	e17fff15 	stw	r5,-4(fp)
 40110c4:	e0bfff17 	ldw	r2,-4(fp)
 40110c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40110cc:	0005303a 	rdctl	r2,status
 40110d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40110d4:	e0fffb17 	ldw	r3,-20(fp)
 40110d8:	00bfff84 	movi	r2,-2
 40110dc:	1884703a 	and	r2,r3,r2
 40110e0:	1001703a 	wrctl	status,r2
  
  return context;
 40110e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40110e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40110ec:	00c00044 	movi	r3,1
 40110f0:	e0bffa17 	ldw	r2,-24(fp)
 40110f4:	1884983a 	sll	r2,r3,r2
 40110f8:	0084303a 	nor	r2,zero,r2
 40110fc:	1007883a 	mov	r3,r2
 4011100:	d0a50c17 	ldw	r2,-27600(gp)
 4011104:	1884703a 	and	r2,r3,r2
 4011108:	d0a50c15 	stw	r2,-27600(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401110c:	d0a50c17 	ldw	r2,-27600(gp)
 4011110:	100170fa 	wrctl	ienable,r2
 4011114:	e0bffc17 	ldw	r2,-16(fp)
 4011118:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401111c:	e0bffd17 	ldw	r2,-12(fp)
 4011120:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011124:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4011128:	0001883a 	nop
}
 401112c:	e037883a 	mov	sp,fp
 4011130:	df000017 	ldw	fp,0(sp)
 4011134:	dec00104 	addi	sp,sp,4
 4011138:	f800283a 	ret

0401113c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401113c:	defffc04 	addi	sp,sp,-16
 4011140:	df000315 	stw	fp,12(sp)
 4011144:	df000304 	addi	fp,sp,12
 4011148:	e13ffe15 	stw	r4,-8(fp)
 401114c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011150:	000530fa 	rdctl	r2,ienable
 4011154:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011158:	00c00044 	movi	r3,1
 401115c:	e0bfff17 	ldw	r2,-4(fp)
 4011160:	1884983a 	sll	r2,r3,r2
 4011164:	1007883a 	mov	r3,r2
 4011168:	e0bffd17 	ldw	r2,-12(fp)
 401116c:	1884703a 	and	r2,r3,r2
 4011170:	1004c03a 	cmpne	r2,r2,zero
 4011174:	10803fcc 	andi	r2,r2,255
}
 4011178:	e037883a 	mov	sp,fp
 401117c:	df000017 	ldw	fp,0(sp)
 4011180:	dec00104 	addi	sp,sp,4
 4011184:	f800283a 	ret

04011188 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011188:	defff504 	addi	sp,sp,-44
 401118c:	dfc00a15 	stw	ra,40(sp)
 4011190:	df000915 	stw	fp,36(sp)
 4011194:	df000904 	addi	fp,sp,36
 4011198:	e13ffc15 	stw	r4,-16(fp)
 401119c:	e17ffd15 	stw	r5,-12(fp)
 40111a0:	e1bffe15 	stw	r6,-8(fp)
 40111a4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40111a8:	00bffa84 	movi	r2,-22
 40111ac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40111b0:	e0bffd17 	ldw	r2,-12(fp)
 40111b4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40111b8:	e0bff817 	ldw	r2,-32(fp)
 40111bc:	10800808 	cmpgei	r2,r2,32
 40111c0:	1000271e 	bne	r2,zero,4011260 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40111c4:	0005303a 	rdctl	r2,status
 40111c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40111cc:	e0fffb17 	ldw	r3,-20(fp)
 40111d0:	00bfff84 	movi	r2,-2
 40111d4:	1884703a 	and	r2,r3,r2
 40111d8:	1001703a 	wrctl	status,r2
  
  return context;
 40111dc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40111e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40111e4:	00810074 	movhi	r2,1025
 40111e8:	109f2d04 	addi	r2,r2,31924
 40111ec:	e0fff817 	ldw	r3,-32(fp)
 40111f0:	180690fa 	slli	r3,r3,3
 40111f4:	10c5883a 	add	r2,r2,r3
 40111f8:	e0fffe17 	ldw	r3,-8(fp)
 40111fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4011200:	00810074 	movhi	r2,1025
 4011204:	109f2d04 	addi	r2,r2,31924
 4011208:	e0fff817 	ldw	r3,-32(fp)
 401120c:	180690fa 	slli	r3,r3,3
 4011210:	10c5883a 	add	r2,r2,r3
 4011214:	10800104 	addi	r2,r2,4
 4011218:	e0ffff17 	ldw	r3,-4(fp)
 401121c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4011220:	e0bffe17 	ldw	r2,-8(fp)
 4011224:	10000526 	beq	r2,zero,401123c <alt_iic_isr_register+0xb4>
 4011228:	e0bff817 	ldw	r2,-32(fp)
 401122c:	100b883a 	mov	r5,r2
 4011230:	e13ffc17 	ldw	r4,-16(fp)
 4011234:	40110280 	call	4011028 <alt_ic_irq_enable>
 4011238:	00000406 	br	401124c <alt_iic_isr_register+0xc4>
 401123c:	e0bff817 	ldw	r2,-32(fp)
 4011240:	100b883a 	mov	r5,r2
 4011244:	e13ffc17 	ldw	r4,-16(fp)
 4011248:	40110b00 	call	40110b0 <alt_ic_irq_disable>
 401124c:	e0bff715 	stw	r2,-36(fp)
 4011250:	e0bffa17 	ldw	r2,-24(fp)
 4011254:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011258:	e0bff917 	ldw	r2,-28(fp)
 401125c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011260:	e0bff717 	ldw	r2,-36(fp)
}
 4011264:	e037883a 	mov	sp,fp
 4011268:	dfc00117 	ldw	ra,4(sp)
 401126c:	df000017 	ldw	fp,0(sp)
 4011270:	dec00204 	addi	sp,sp,8
 4011274:	f800283a 	ret

04011278 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4011278:	defffc04 	addi	sp,sp,-16
 401127c:	df000315 	stw	fp,12(sp)
 4011280:	df000304 	addi	fp,sp,12
 4011284:	e13ffd15 	stw	r4,-12(fp)
 4011288:	e17ffe15 	stw	r5,-8(fp)
 401128c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4011290:	e0fffe17 	ldw	r3,-8(fp)
 4011294:	e0bffd17 	ldw	r2,-12(fp)
 4011298:	18800c26 	beq	r3,r2,40112cc <alt_load_section+0x54>
  {
    while( to != end )
 401129c:	00000806 	br	40112c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40112a0:	e0bffe17 	ldw	r2,-8(fp)
 40112a4:	10c00104 	addi	r3,r2,4
 40112a8:	e0fffe15 	stw	r3,-8(fp)
 40112ac:	e0fffd17 	ldw	r3,-12(fp)
 40112b0:	19000104 	addi	r4,r3,4
 40112b4:	e13ffd15 	stw	r4,-12(fp)
 40112b8:	18c00017 	ldw	r3,0(r3)
 40112bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40112c0:	e0fffe17 	ldw	r3,-8(fp)
 40112c4:	e0bfff17 	ldw	r2,-4(fp)
 40112c8:	18bff51e 	bne	r3,r2,40112a0 <__alt_data_end+0xffff12a0>
    {
      *to++ = *from++;
    }
  }
}
 40112cc:	0001883a 	nop
 40112d0:	e037883a 	mov	sp,fp
 40112d4:	df000017 	ldw	fp,0(sp)
 40112d8:	dec00104 	addi	sp,sp,4
 40112dc:	f800283a 	ret

040112e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40112e0:	defffe04 	addi	sp,sp,-8
 40112e4:	dfc00115 	stw	ra,4(sp)
 40112e8:	df000015 	stw	fp,0(sp)
 40112ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40112f0:	01810074 	movhi	r6,1025
 40112f4:	319a2804 	addi	r6,r6,26784
 40112f8:	01410074 	movhi	r5,1025
 40112fc:	29552e04 	addi	r5,r5,21688
 4011300:	01010074 	movhi	r4,1025
 4011304:	211a2804 	addi	r4,r4,26784
 4011308:	40112780 	call	4011278 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401130c:	01810074 	movhi	r6,1025
 4011310:	31808c04 	addi	r6,r6,560
 4011314:	01410074 	movhi	r5,1025
 4011318:	29400804 	addi	r5,r5,32
 401131c:	01010074 	movhi	r4,1025
 4011320:	21000804 	addi	r4,r4,32
 4011324:	40112780 	call	4011278 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4011328:	01810074 	movhi	r6,1025
 401132c:	31952e04 	addi	r6,r6,21688
 4011330:	01410074 	movhi	r5,1025
 4011334:	2954c904 	addi	r5,r5,21284
 4011338:	01010074 	movhi	r4,1025
 401133c:	2114c904 	addi	r4,r4,21284
 4011340:	40112780 	call	4011278 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4011344:	40141340 	call	4014134 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4011348:	40143b00 	call	40143b0 <alt_icache_flush_all>
}
 401134c:	0001883a 	nop
 4011350:	e037883a 	mov	sp,fp
 4011354:	dfc00117 	ldw	ra,4(sp)
 4011358:	df000017 	ldw	fp,0(sp)
 401135c:	dec00204 	addi	sp,sp,8
 4011360:	f800283a 	ret

04011364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4011364:	defffd04 	addi	sp,sp,-12
 4011368:	dfc00215 	stw	ra,8(sp)
 401136c:	df000115 	stw	fp,4(sp)
 4011370:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4011374:	0009883a 	mov	r4,zero
 4011378:	40115800 	call	4011580 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401137c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4011380:	40115b80 	call	40115b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4011384:	01810074 	movhi	r6,1025
 4011388:	31951604 	addi	r6,r6,21592
 401138c:	01410074 	movhi	r5,1025
 4011390:	29551604 	addi	r5,r5,21592
 4011394:	01010074 	movhi	r4,1025
 4011398:	21151604 	addi	r4,r4,21592
 401139c:	40145500 	call	4014550 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40113a0:	40142600 	call	4014260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40113a4:	01010074 	movhi	r4,1025
 40113a8:	2110b004 	addi	r4,r4,17088
 40113ac:	4014ed00 	call	4014ed0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40113b0:	d0a50d17 	ldw	r2,-27596(gp)
 40113b4:	d0e50e17 	ldw	r3,-27592(gp)
 40113b8:	d1250f17 	ldw	r4,-27588(gp)
 40113bc:	200d883a 	mov	r6,r4
 40113c0:	180b883a 	mov	r5,r3
 40113c4:	1009883a 	mov	r4,r2
 40113c8:	40105080 	call	4010508 <main>
 40113cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40113d0:	01000044 	movi	r4,1
 40113d4:	401405c0 	call	401405c <close>
  exit (result);
 40113d8:	e13fff17 	ldw	r4,-4(fp)
 40113dc:	4014ee40 	call	4014ee4 <exit>

040113e0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40113e0:	defffd04 	addi	sp,sp,-12
 40113e4:	dfc00215 	stw	ra,8(sp)
 40113e8:	df000115 	stw	fp,4(sp)
 40113ec:	df000104 	addi	fp,sp,4
 40113f0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40113f4:	e13fff17 	ldw	r4,-4(fp)
 40113f8:	4013ec80 	call	4013ec8 <alt_busy_sleep>
}
 40113fc:	e037883a 	mov	sp,fp
 4011400:	dfc00117 	ldw	ra,4(sp)
 4011404:	df000017 	ldw	fp,0(sp)
 4011408:	dec00204 	addi	sp,sp,8
 401140c:	f800283a 	ret

04011410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011410:	defffe04 	addi	sp,sp,-8
 4011414:	dfc00115 	stw	ra,4(sp)
 4011418:	df000015 	stw	fp,0(sp)
 401141c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011420:	d0a00b17 	ldw	r2,-32724(gp)
 4011424:	10000326 	beq	r2,zero,4011434 <alt_get_errno+0x24>
 4011428:	d0a00b17 	ldw	r2,-32724(gp)
 401142c:	103ee83a 	callr	r2
 4011430:	00000106 	br	4011438 <alt_get_errno+0x28>
 4011434:	d0a50b04 	addi	r2,gp,-27604
}
 4011438:	e037883a 	mov	sp,fp
 401143c:	dfc00117 	ldw	ra,4(sp)
 4011440:	df000017 	ldw	fp,0(sp)
 4011444:	dec00204 	addi	sp,sp,8
 4011448:	f800283a 	ret

0401144c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401144c:	defff904 	addi	sp,sp,-28
 4011450:	dfc00615 	stw	ra,24(sp)
 4011454:	df000515 	stw	fp,20(sp)
 4011458:	df000504 	addi	fp,sp,20
 401145c:	e13ffd15 	stw	r4,-12(fp)
 4011460:	e17ffe15 	stw	r5,-8(fp)
 4011464:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011468:	e0bffd17 	ldw	r2,-12(fp)
 401146c:	10000816 	blt	r2,zero,4011490 <write+0x44>
 4011470:	01400304 	movi	r5,12
 4011474:	e13ffd17 	ldw	r4,-12(fp)
 4011478:	4010fb00 	call	4010fb0 <__mulsi3>
 401147c:	1007883a 	mov	r3,r2
 4011480:	00810074 	movhi	r2,1025
 4011484:	1099ba04 	addi	r2,r2,26344
 4011488:	1885883a 	add	r2,r3,r2
 401148c:	00000106 	br	4011494 <write+0x48>
 4011490:	0005883a 	mov	r2,zero
 4011494:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011498:	e0bffb17 	ldw	r2,-20(fp)
 401149c:	10002126 	beq	r2,zero,4011524 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40114a0:	e0bffb17 	ldw	r2,-20(fp)
 40114a4:	10800217 	ldw	r2,8(r2)
 40114a8:	108000cc 	andi	r2,r2,3
 40114ac:	10001826 	beq	r2,zero,4011510 <write+0xc4>
 40114b0:	e0bffb17 	ldw	r2,-20(fp)
 40114b4:	10800017 	ldw	r2,0(r2)
 40114b8:	10800617 	ldw	r2,24(r2)
 40114bc:	10001426 	beq	r2,zero,4011510 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40114c0:	e0bffb17 	ldw	r2,-20(fp)
 40114c4:	10800017 	ldw	r2,0(r2)
 40114c8:	10800617 	ldw	r2,24(r2)
 40114cc:	e0ffff17 	ldw	r3,-4(fp)
 40114d0:	180d883a 	mov	r6,r3
 40114d4:	e17ffe17 	ldw	r5,-8(fp)
 40114d8:	e13ffb17 	ldw	r4,-20(fp)
 40114dc:	103ee83a 	callr	r2
 40114e0:	e0bffc15 	stw	r2,-16(fp)
 40114e4:	e0bffc17 	ldw	r2,-16(fp)
 40114e8:	1000070e 	bge	r2,zero,4011508 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 40114ec:	40114100 	call	4011410 <alt_get_errno>
 40114f0:	1007883a 	mov	r3,r2
 40114f4:	e0bffc17 	ldw	r2,-16(fp)
 40114f8:	0085c83a 	sub	r2,zero,r2
 40114fc:	18800015 	stw	r2,0(r3)
        return -1;
 4011500:	00bfffc4 	movi	r2,-1
 4011504:	00000c06 	br	4011538 <write+0xec>
      }
      return rval;
 4011508:	e0bffc17 	ldw	r2,-16(fp)
 401150c:	00000a06 	br	4011538 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011510:	40114100 	call	4011410 <alt_get_errno>
 4011514:	1007883a 	mov	r3,r2
 4011518:	00800344 	movi	r2,13
 401151c:	18800015 	stw	r2,0(r3)
 4011520:	00000406 	br	4011534 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4011524:	40114100 	call	4011410 <alt_get_errno>
 4011528:	1007883a 	mov	r3,r2
 401152c:	00801444 	movi	r2,81
 4011530:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011534:	00bfffc4 	movi	r2,-1
}
 4011538:	e037883a 	mov	sp,fp
 401153c:	dfc00117 	ldw	ra,4(sp)
 4011540:	df000017 	ldw	fp,0(sp)
 4011544:	dec00204 	addi	sp,sp,8
 4011548:	f800283a 	ret

0401154c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401154c:	defffd04 	addi	sp,sp,-12
 4011550:	dfc00215 	stw	ra,8(sp)
 4011554:	df000115 	stw	fp,4(sp)
 4011558:	df000104 	addi	fp,sp,4
 401155c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4011560:	d1600804 	addi	r5,gp,-32736
 4011564:	e13fff17 	ldw	r4,-4(fp)
 4011568:	40141bc0 	call	40141bc <alt_dev_llist_insert>
}
 401156c:	e037883a 	mov	sp,fp
 4011570:	dfc00117 	ldw	ra,4(sp)
 4011574:	df000017 	ldw	fp,0(sp)
 4011578:	dec00204 	addi	sp,sp,8
 401157c:	f800283a 	ret

04011580 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011580:	defffd04 	addi	sp,sp,-12
 4011584:	dfc00215 	stw	ra,8(sp)
 4011588:	df000115 	stw	fp,4(sp)
 401158c:	df000104 	addi	fp,sp,4
 4011590:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4011594:	4014ce00 	call	4014ce0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4011598:	00800044 	movi	r2,1
 401159c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40115a0:	0001883a 	nop
 40115a4:	e037883a 	mov	sp,fp
 40115a8:	dfc00117 	ldw	ra,4(sp)
 40115ac:	df000017 	ldw	fp,0(sp)
 40115b0:	dec00204 	addi	sp,sp,8
 40115b4:	f800283a 	ret

040115b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40115b8:	defffe04 	addi	sp,sp,-8
 40115bc:	dfc00115 	stw	ra,4(sp)
 40115c0:	df000015 	stw	fp,0(sp)
 40115c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40115c8:	01c0fa04 	movi	r7,1000
 40115cc:	01800044 	movi	r6,1
 40115d0:	000b883a 	mov	r5,zero
 40115d4:	010100b4 	movhi	r4,1026
 40115d8:	21041004 	addi	r4,r4,4160
 40115dc:	4013d200 	call	4013d20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 40115e0:	01010074 	movhi	r4,1025
 40115e4:	21158a04 	addi	r4,r4,22056
 40115e8:	40118780 	call	4011878 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40115ec:	000d883a 	mov	r6,zero
 40115f0:	000b883a 	mov	r5,zero
 40115f4:	01010074 	movhi	r4,1025
 40115f8:	2115a204 	addi	r4,r4,22152
 40115fc:	40133a40 	call	40133a4 <altera_avalon_jtag_uart_init>
 4011600:	01010074 	movhi	r4,1025
 4011604:	21159804 	addi	r4,r4,22112
 4011608:	401154c0 	call	401154c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401160c:	0001883a 	nop
}
 4011610:	0001883a 	nop
 4011614:	e037883a 	mov	sp,fp
 4011618:	dfc00117 	ldw	ra,4(sp)
 401161c:	df000017 	ldw	fp,0(sp)
 4011620:	dec00204 	addi	sp,sp,8
 4011624:	f800283a 	ret

04011628 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 4011628:	defff904 	addi	sp,sp,-28
 401162c:	dfc00615 	stw	ra,24(sp)
 4011630:	df000515 	stw	fp,20(sp)
 4011634:	df000504 	addi	fp,sp,20
 4011638:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401163c:	008000b4 	movhi	r2,2
 4011640:	10a1a804 	addi	r2,r2,-31072
 4011644:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 4011648:	e0bfff17 	ldw	r2,-4(fp)
 401164c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 4011650:	e0bffc17 	ldw	r2,-16(fp)
 4011654:	10800717 	ldw	r2,28(r2)
 4011658:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401165c:	e0bffd17 	ldw	r2,-12(fp)
 4011660:	10800217 	ldw	r2,8(r2)
 4011664:	10800098 	cmpnei	r2,r2,2
 4011668:	1000251e 	bne	r2,zero,4011700 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401166c:	e0bffd17 	ldw	r2,-12(fp)
 4011670:	10c00017 	ldw	r3,0(r2)
 4011674:	e0bffd17 	ldw	r2,-12(fp)
 4011678:	10800117 	ldw	r2,4(r2)
 401167c:	e13ffe04 	addi	r4,fp,-8
 4011680:	200f883a 	mov	r7,r4
 4011684:	100d883a 	mov	r6,r2
 4011688:	180b883a 	mov	r5,r3
 401168c:	e13ffc17 	ldw	r4,-16(fp)
 4011690:	4011dd80 	call	4011dd8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 4011694:	e0bffd17 	ldw	r2,-12(fp)
 4011698:	10c00117 	ldw	r3,4(r2)
 401169c:	e0bffe17 	ldw	r2,-8(fp)
 40116a0:	1887c83a 	sub	r3,r3,r2
 40116a4:	e0bffd17 	ldw	r2,-12(fp)
 40116a8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 40116ac:	e0bffd17 	ldw	r2,-12(fp)
 40116b0:	10c00017 	ldw	r3,0(r2)
 40116b4:	e0bffe17 	ldw	r2,-8(fp)
 40116b8:	1887883a 	add	r3,r3,r2
 40116bc:	e0bffd17 	ldw	r2,-12(fp)
 40116c0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 40116c4:	e0bffd17 	ldw	r2,-12(fp)
 40116c8:	10800117 	ldw	r2,4(r2)
 40116cc:	10000c26 	beq	r2,zero,4011700 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40116d0:	01400704 	movi	r5,28
 40116d4:	e13ffc17 	ldw	r4,-16(fp)
 40116d8:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 40116dc:	01400084 	movi	r5,2
 40116e0:	e13ffc17 	ldw	r4,-16(fp)
 40116e4:	40130340 	call	4013034 <alt_avalon_i2c_int_enable>
 40116e8:	00000e06 	br	4011724 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 40116ec:	e0bffb17 	ldw	r2,-20(fp)
 40116f0:	10bfffc4 	addi	r2,r2,-1
 40116f4:	e0bffb15 	stw	r2,-20(fp)
 40116f8:	e0bffb17 	ldw	r2,-20(fp)
 40116fc:	10000426 	beq	r2,zero,4011710 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 4011700:	e13ffc17 	ldw	r4,-16(fp)
 4011704:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 4011708:	103ff81e 	bne	r2,zero,40116ec <__alt_data_end+0xffff16ec>
 401170c:	00000106 	br	4011714 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 4011710:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 4011714:	e13ffc17 	ldw	r4,-16(fp)
 4011718:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401171c:	e0bffd17 	ldw	r2,-12(fp)
 4011720:	10000215 	stw	zero,8(r2)
}
 4011724:	e037883a 	mov	sp,fp
 4011728:	dfc00117 	ldw	ra,4(sp)
 401172c:	df000017 	ldw	fp,0(sp)
 4011730:	dec00204 	addi	sp,sp,8
 4011734:	f800283a 	ret

04011738 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 4011738:	defffc04 	addi	sp,sp,-16
 401173c:	dfc00315 	stw	ra,12(sp)
 4011740:	df000215 	stw	fp,8(sp)
 4011744:	df000204 	addi	fp,sp,8
 4011748:	e13ffe15 	stw	r4,-8(fp)
 401174c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 4011750:	e0bfff17 	ldw	r2,-4(fp)
 4011754:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 4011758:	e1ffff17 	ldw	r7,-4(fp)
 401175c:	000d883a 	mov	r6,zero
 4011760:	01410074 	movhi	r5,1025
 4011764:	29458a04 	addi	r5,r5,5672
 4011768:	e13ffe17 	ldw	r4,-8(fp)
 401176c:	40118240 	call	4011824 <alt_avalon_i2c_register_callback>
}
 4011770:	0001883a 	nop
 4011774:	e037883a 	mov	sp,fp
 4011778:	dfc00117 	ldw	ra,4(sp)
 401177c:	df000017 	ldw	fp,0(sp)
 4011780:	dec00204 	addi	sp,sp,8
 4011784:	f800283a 	ret

04011788 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 4011788:	defff904 	addi	sp,sp,-28
 401178c:	dfc00615 	stw	ra,24(sp)
 4011790:	df000515 	stw	fp,20(sp)
 4011794:	df000504 	addi	fp,sp,20
 4011798:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401179c:	e0bfff17 	ldw	r2,-4(fp)
 40117a0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 40117a4:	014007c4 	movi	r5,31
 40117a8:	e13ffb17 	ldw	r4,-20(fp)
 40117ac:	4012fcc0 	call	4012fcc <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40117b0:	01400704 	movi	r5,28
 40117b4:	e13ffb17 	ldw	r4,-20(fp)
 40117b8:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 40117bc:	e0bffb17 	ldw	r2,-20(fp)
 40117c0:	10800617 	ldw	r2,24(r2)
 40117c4:	10001126 	beq	r2,zero,401180c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40117c8:	0005303a 	rdctl	r2,status
 40117cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40117d0:	e0fffd17 	ldw	r3,-12(fp)
 40117d4:	00bfff84 	movi	r2,-2
 40117d8:	1884703a 	and	r2,r3,r2
 40117dc:	1001703a 	wrctl	status,r2
  
  return context;
 40117e0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 40117e4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 40117e8:	e0bffb17 	ldw	r2,-20(fp)
 40117ec:	10800617 	ldw	r2,24(r2)
 40117f0:	e13ffb17 	ldw	r4,-20(fp)
 40117f4:	103ee83a 	callr	r2
 40117f8:	e0bffc17 	ldw	r2,-16(fp)
 40117fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011800:	e0bffe17 	ldw	r2,-8(fp)
 4011804:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 4011808:	0001883a 	nop
 401180c:	0001883a 	nop
}
 4011810:	e037883a 	mov	sp,fp
 4011814:	dfc00117 	ldw	ra,4(sp)
 4011818:	df000017 	ldw	fp,0(sp)
 401181c:	dec00204 	addi	sp,sp,8
 4011820:	f800283a 	ret

04011824 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 4011824:	defffb04 	addi	sp,sp,-20
 4011828:	df000415 	stw	fp,16(sp)
 401182c:	df000404 	addi	fp,sp,16
 4011830:	e13ffc15 	stw	r4,-16(fp)
 4011834:	e17ffd15 	stw	r5,-12(fp)
 4011838:	e1bffe15 	stw	r6,-8(fp)
 401183c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 4011840:	e0bffc17 	ldw	r2,-16(fp)
 4011844:	e0fffd17 	ldw	r3,-12(fp)
 4011848:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401184c:	e0bffc17 	ldw	r2,-16(fp)
 4011850:	e0ffff17 	ldw	r3,-4(fp)
 4011854:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 4011858:	e0bffc17 	ldw	r2,-16(fp)
 401185c:	e0fffe17 	ldw	r3,-8(fp)
 4011860:	10c00815 	stw	r3,32(r2)

    return ;
 4011864:	0001883a 	nop
}
 4011868:	e037883a 	mov	sp,fp
 401186c:	df000017 	ldw	fp,0(sp)
 4011870:	dec00104 	addi	sp,sp,4
 4011874:	f800283a 	ret

04011878 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4011878:	defff704 	addi	sp,sp,-36
 401187c:	dfc00815 	stw	ra,32(sp)
 4011880:	df000715 	stw	fp,28(sp)
 4011884:	df000704 	addi	fp,sp,28
 4011888:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401188c:	e13fff17 	ldw	r4,-4(fp)
 4011890:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 4011894:	014007c4 	movi	r5,31
 4011898:	e13fff17 	ldw	r4,-4(fp)
 401189c:	4012fcc0 	call	4012fcc <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40118a0:	01400704 	movi	r5,28
 40118a4:	e13fff17 	ldw	r4,-4(fp)
 40118a8:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 40118ac:	014000c4 	movi	r5,3
 40118b0:	e13fff17 	ldw	r4,-4(fp)
 40118b4:	40131d80 	call	40131d8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 40118b8:	014000c4 	movi	r5,3
 40118bc:	e13fff17 	ldw	r4,-4(fp)
 40118c0:	40131280 	call	4013128 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 40118c4:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 40118c8:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 40118cc:	e0bffb04 	addi	r2,fp,-20
 40118d0:	018000b4 	movhi	r6,2
 40118d4:	31a1a804 	addi	r6,r6,-31072
 40118d8:	100b883a 	mov	r5,r2
 40118dc:	e13fff17 	ldw	r4,-4(fp)
 40118e0:	4011c980 	call	4011c98 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 40118e4:	e0bffb04 	addi	r2,fp,-20
 40118e8:	100b883a 	mov	r5,r2
 40118ec:	e13fff17 	ldw	r4,-4(fp)
 40118f0:	4011b380 	call	4011b38 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 40118f4:	d1600404 	addi	r5,gp,-32752
 40118f8:	e13fff17 	ldw	r4,-4(fp)
 40118fc:	40141bc0 	call	40141bc <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4011900:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 4011904:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 4011908:	e0bffa17 	ldw	r2,-24(fp)
 401190c:	10000c1e 	bne	r2,zero,4011940 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 4011910:	e0bfff17 	ldw	r2,-4(fp)
 4011914:	10c00417 	ldw	r3,16(r2)
 4011918:	e0bfff17 	ldw	r2,-4(fp)
 401191c:	10800517 	ldw	r2,20(r2)
 4011920:	d8000015 	stw	zero,0(sp)
 4011924:	e1ffff17 	ldw	r7,-4(fp)
 4011928:	01810074 	movhi	r6,1025
 401192c:	3185e204 	addi	r6,r6,6024
 4011930:	100b883a 	mov	r5,r2
 4011934:	1809883a 	mov	r4,r3
 4011938:	4010fd80 	call	4010fd8 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401193c:	00000406 	br	4011950 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 4011940:	01010074 	movhi	r4,1025
 4011944:	21152304 	addi	r4,r4,21644
 4011948:	40148500 	call	4014850 <alt_printf>
    }

    return;
 401194c:	0001883a 	nop

}
 4011950:	e037883a 	mov	sp,fp
 4011954:	dfc00117 	ldw	ra,4(sp)
 4011958:	df000017 	ldw	fp,0(sp)
 401195c:	dec00204 	addi	sp,sp,8
 4011960:	f800283a 	ret

04011964 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 4011964:	defffc04 	addi	sp,sp,-16
 4011968:	dfc00315 	stw	ra,12(sp)
 401196c:	df000215 	stw	fp,8(sp)
 4011970:	df000204 	addi	fp,sp,8
 4011974:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 4011978:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401197c:	d1600404 	addi	r5,gp,-32752
 4011980:	e13fff17 	ldw	r4,-4(fp)
 4011984:	40143200 	call	4014320 <alt_find_dev>
 4011988:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401198c:	e0bffe17 	ldw	r2,-8(fp)
}
 4011990:	e037883a 	mov	sp,fp
 4011994:	dfc00117 	ldw	ra,4(sp)
 4011998:	df000017 	ldw	fp,0(sp)
 401199c:	dec00204 	addi	sp,sp,8
 40119a0:	f800283a 	ret

040119a4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40119a4:	defffc04 	addi	sp,sp,-16
 40119a8:	df000315 	stw	fp,12(sp)
 40119ac:	df000304 	addi	fp,sp,12
 40119b0:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 40119b4:	e0bfff17 	ldw	r2,-4(fp)
 40119b8:	10800717 	ldw	r2,28(r2)
 40119bc:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 40119c0:	e0bfff17 	ldw	r2,-4(fp)
 40119c4:	10800317 	ldw	r2,12(r2)
 40119c8:	10800204 	addi	r2,r2,8
 40119cc:	10800037 	ldwio	r2,0(r2)
 40119d0:	1080004c 	andi	r2,r2,1
 40119d4:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 40119d8:	e0bffe17 	ldw	r2,-8(fp)
 40119dc:	10000226 	beq	r2,zero,40119e8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 40119e0:	00bffe44 	movi	r2,-7
 40119e4:	00001106 	br	4011a2c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 40119e8:	e0bfff17 	ldw	r2,-4(fp)
 40119ec:	10c00617 	ldw	r3,24(r2)
 40119f0:	00810074 	movhi	r2,1025
 40119f4:	10858a04 	addi	r2,r2,5672
 40119f8:	1880021e 	bne	r3,r2,4011a04 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 40119fc:	e0bffd17 	ldw	r2,-12(fp)
 4011a00:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 4011a04:	e0bfff17 	ldw	r2,-4(fp)
 4011a08:	10800317 	ldw	r2,12(r2)
 4011a0c:	10800204 	addi	r2,r2,8
 4011a10:	e0ffff17 	ldw	r3,-4(fp)
 4011a14:	18c00317 	ldw	r3,12(r3)
 4011a18:	18c00204 	addi	r3,r3,8
 4011a1c:	18c00037 	ldwio	r3,0(r3)
 4011a20:	18c00054 	ori	r3,r3,1
 4011a24:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4011a28:	0005883a 	mov	r2,zero
}
 4011a2c:	e037883a 	mov	sp,fp
 4011a30:	df000017 	ldw	fp,0(sp)
 4011a34:	dec00104 	addi	sp,sp,4
 4011a38:	f800283a 	ret

04011a3c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4011a3c:	defffe04 	addi	sp,sp,-8
 4011a40:	df000115 	stw	fp,4(sp)
 4011a44:	df000104 	addi	fp,sp,4
 4011a48:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4011a4c:	e0bfff17 	ldw	r2,-4(fp)
 4011a50:	10800317 	ldw	r2,12(r2)
 4011a54:	10800204 	addi	r2,r2,8
 4011a58:	e0ffff17 	ldw	r3,-4(fp)
 4011a5c:	18c00317 	ldw	r3,12(r3)
 4011a60:	18c00204 	addi	r3,r3,8
 4011a64:	19000037 	ldwio	r4,0(r3)
 4011a68:	00ffff84 	movi	r3,-2
 4011a6c:	20c6703a 	and	r3,r4,r3
 4011a70:	10c00035 	stwio	r3,0(r2)

}
 4011a74:	0001883a 	nop
 4011a78:	e037883a 	mov	sp,fp
 4011a7c:	df000017 	ldw	fp,0(sp)
 4011a80:	dec00104 	addi	sp,sp,4
 4011a84:	f800283a 	ret

04011a88 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4011a88:	defffd04 	addi	sp,sp,-12
 4011a8c:	df000215 	stw	fp,8(sp)
 4011a90:	df000204 	addi	fp,sp,8
 4011a94:	e13ffe15 	stw	r4,-8(fp)
 4011a98:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 4011a9c:	e0bffe17 	ldw	r2,-8(fp)
 4011aa0:	10c00d17 	ldw	r3,52(r2)
 4011aa4:	e0bfff17 	ldw	r2,-4(fp)
 4011aa8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 4011aac:	e0bffe17 	ldw	r2,-8(fp)
 4011ab0:	10800317 	ldw	r2,12(r2)
 4011ab4:	10800204 	addi	r2,r2,8
 4011ab8:	10800037 	ldwio	r2,0(r2)
 4011abc:	1080008c 	andi	r2,r2,2
 4011ac0:	1005d07a 	srai	r2,r2,1
 4011ac4:	1007883a 	mov	r3,r2
 4011ac8:	e0bfff17 	ldw	r2,-4(fp)
 4011acc:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 4011ad0:	e0bffe17 	ldw	r2,-8(fp)
 4011ad4:	10800317 	ldw	r2,12(r2)
 4011ad8:	10800904 	addi	r2,r2,36
 4011adc:	10800037 	ldwio	r2,0(r2)
 4011ae0:	1007883a 	mov	r3,r2
 4011ae4:	e0bfff17 	ldw	r2,-4(fp)
 4011ae8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 4011aec:	e0bffe17 	ldw	r2,-8(fp)
 4011af0:	10800317 	ldw	r2,12(r2)
 4011af4:	10800804 	addi	r2,r2,32
 4011af8:	10800037 	ldwio	r2,0(r2)
 4011afc:	1007883a 	mov	r3,r2
 4011b00:	e0bfff17 	ldw	r2,-4(fp)
 4011b04:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4011b08:	e0bffe17 	ldw	r2,-8(fp)
 4011b0c:	10800317 	ldw	r2,12(r2)
 4011b10:	10800a04 	addi	r2,r2,40
 4011b14:	10800037 	ldwio	r2,0(r2)
 4011b18:	1007883a 	mov	r3,r2
 4011b1c:	e0bfff17 	ldw	r2,-4(fp)
 4011b20:	10c0030d 	sth	r3,12(r2)
}
 4011b24:	0001883a 	nop
 4011b28:	e037883a 	mov	sp,fp
 4011b2c:	df000017 	ldw	fp,0(sp)
 4011b30:	dec00104 	addi	sp,sp,4
 4011b34:	f800283a 	ret

04011b38 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4011b38:	defffd04 	addi	sp,sp,-12
 4011b3c:	df000215 	stw	fp,8(sp)
 4011b40:	df000204 	addi	fp,sp,8
 4011b44:	e13ffe15 	stw	r4,-8(fp)
 4011b48:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 4011b4c:	e0bfff17 	ldw	r2,-4(fp)
 4011b50:	10c00017 	ldw	r3,0(r2)
 4011b54:	e0bffe17 	ldw	r2,-8(fp)
 4011b58:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 4011b5c:	e0bffe17 	ldw	r2,-8(fp)
 4011b60:	10800317 	ldw	r2,12(r2)
 4011b64:	10c00204 	addi	r3,r2,8
 4011b68:	e0bffe17 	ldw	r2,-8(fp)
 4011b6c:	10800317 	ldw	r2,12(r2)
 4011b70:	10800204 	addi	r2,r2,8
 4011b74:	10800037 	ldwio	r2,0(r2)
 4011b78:	1009883a 	mov	r4,r2
 4011b7c:	00bfff44 	movi	r2,-3
 4011b80:	2088703a 	and	r4,r4,r2
 4011b84:	e0bfff17 	ldw	r2,-4(fp)
 4011b88:	10800117 	ldw	r2,4(r2)
 4011b8c:	1085883a 	add	r2,r2,r2
 4011b90:	1080008c 	andi	r2,r2,2
 4011b94:	2084b03a 	or	r2,r4,r2
 4011b98:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 4011b9c:	e0bffe17 	ldw	r2,-8(fp)
 4011ba0:	10800317 	ldw	r2,12(r2)
 4011ba4:	10800904 	addi	r2,r2,36
 4011ba8:	e0ffff17 	ldw	r3,-4(fp)
 4011bac:	18c0020b 	ldhu	r3,8(r3)
 4011bb0:	18ffffcc 	andi	r3,r3,65535
 4011bb4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 4011bb8:	e0bffe17 	ldw	r2,-8(fp)
 4011bbc:	10800317 	ldw	r2,12(r2)
 4011bc0:	10800804 	addi	r2,r2,32
 4011bc4:	e0ffff17 	ldw	r3,-4(fp)
 4011bc8:	18c0028b 	ldhu	r3,10(r3)
 4011bcc:	18ffffcc 	andi	r3,r3,65535
 4011bd0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 4011bd4:	e0bffe17 	ldw	r2,-8(fp)
 4011bd8:	10800317 	ldw	r2,12(r2)
 4011bdc:	10800a04 	addi	r2,r2,40
 4011be0:	e0ffff17 	ldw	r3,-4(fp)
 4011be4:	18c0030b 	ldhu	r3,12(r3)
 4011be8:	18ffffcc 	andi	r3,r3,65535
 4011bec:	10c00035 	stwio	r3,0(r2)
}
 4011bf0:	0001883a 	nop
 4011bf4:	e037883a 	mov	sp,fp
 4011bf8:	df000017 	ldw	fp,0(sp)
 4011bfc:	dec00104 	addi	sp,sp,4
 4011c00:	f800283a 	ret

04011c04 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 4011c04:	defffb04 	addi	sp,sp,-20
 4011c08:	dfc00415 	stw	ra,16(sp)
 4011c0c:	df000315 	stw	fp,12(sp)
 4011c10:	df000304 	addi	fp,sp,12
 4011c14:	e13ffd15 	stw	r4,-12(fp)
 4011c18:	e17ffe15 	stw	r5,-8(fp)
 4011c1c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 4011c20:	e0bffe17 	ldw	r2,-8(fp)
 4011c24:	1080028b 	ldhu	r2,10(r2)
 4011c28:	10bfffcc 	andi	r2,r2,65535
 4011c2c:	10000426 	beq	r2,zero,4011c40 <alt_avalon_i2c_master_config_speed_get+0x3c>
 4011c30:	e0bffe17 	ldw	r2,-8(fp)
 4011c34:	1080020b 	ldhu	r2,8(r2)
 4011c38:	10bfffcc 	andi	r2,r2,65535
 4011c3c:	1000021e 	bne	r2,zero,4011c48 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 4011c40:	00bfff44 	movi	r2,-3
 4011c44:	00000f06 	br	4011c84 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4011c48:	e0bffd17 	ldw	r2,-12(fp)
 4011c4c:	11000c17 	ldw	r4,48(r2)
 4011c50:	e0bffe17 	ldw	r2,-8(fp)
 4011c54:	1080028b 	ldhu	r2,10(r2)
 4011c58:	10ffffcc 	andi	r3,r2,65535
 4011c5c:	e0bffe17 	ldw	r2,-8(fp)
 4011c60:	1080020b 	ldhu	r2,8(r2)
 4011c64:	10bfffcc 	andi	r2,r2,65535
 4011c68:	1885883a 	add	r2,r3,r2
 4011c6c:	100b883a 	mov	r5,r2
 4011c70:	4010ef40 	call	4010ef4 <__udivsi3>
 4011c74:	1007883a 	mov	r3,r2
 4011c78:	e0bfff17 	ldw	r2,-4(fp)
 4011c7c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4011c80:	0005883a 	mov	r2,zero
}
 4011c84:	e037883a 	mov	sp,fp
 4011c88:	dfc00117 	ldw	ra,4(sp)
 4011c8c:	df000017 	ldw	fp,0(sp)
 4011c90:	dec00204 	addi	sp,sp,8
 4011c94:	f800283a 	ret

04011c98 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 4011c98:	defff904 	addi	sp,sp,-28
 4011c9c:	dfc00615 	stw	ra,24(sp)
 4011ca0:	df000515 	stw	fp,20(sp)
 4011ca4:	df000504 	addi	fp,sp,20
 4011ca8:	e13ffd15 	stw	r4,-12(fp)
 4011cac:	e17ffe15 	stw	r5,-8(fp)
 4011cb0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 4011cb4:	e0ffff17 	ldw	r3,-4(fp)
 4011cb8:	008001b4 	movhi	r2,6
 4011cbc:	1086a004 	addi	r2,r2,6784
 4011cc0:	10c00436 	bltu	r2,r3,4011cd4 <alt_avalon_i2c_master_config_speed_set+0x3c>
 4011cc4:	e0bfff17 	ldw	r2,-4(fp)
 4011cc8:	10000226 	beq	r2,zero,4011cd4 <alt_avalon_i2c_master_config_speed_set+0x3c>
 4011ccc:	e0bfff17 	ldw	r2,-4(fp)
 4011cd0:	1000021e 	bne	r2,zero,4011cdc <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 4011cd4:	00bfff04 	movi	r2,-4
 4011cd8:	00002906 	br	4011d80 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4011cdc:	e0bffd17 	ldw	r2,-12(fp)
 4011ce0:	10c00c17 	ldw	r3,48(r2)
 4011ce4:	e0bfff17 	ldw	r2,-4(fp)
 4011ce8:	1085883a 	add	r2,r2,r2
 4011cec:	100b883a 	mov	r5,r2
 4011cf0:	1809883a 	mov	r4,r3
 4011cf4:	4010ef40 	call	4010ef4 <__udivsi3>
 4011cf8:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4011cfc:	e0bffb17 	ldw	r2,-20(fp)
 4011d00:	10800f04 	addi	r2,r2,60
 4011d04:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4011d08:	e0bffb17 	ldw	r2,-20(fp)
 4011d0c:	10bff104 	addi	r2,r2,-60
 4011d10:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 4011d14:	e0ffff17 	ldw	r3,-4(fp)
 4011d18:	008000b4 	movhi	r2,2
 4011d1c:	10a1a804 	addi	r2,r2,-31072
 4011d20:	10c0042e 	bgeu	r2,r3,4011d34 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 4011d24:	e0bffe17 	ldw	r2,-8(fp)
 4011d28:	00c00044 	movi	r3,1
 4011d2c:	10c00115 	stw	r3,4(r2)
 4011d30:	00000206 	br	4011d3c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 4011d34:	e0bffe17 	ldw	r2,-8(fp)
 4011d38:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 4011d3c:	e0bffb17 	ldw	r2,-20(fp)
 4011d40:	1007883a 	mov	r3,r2
 4011d44:	e0bffe17 	ldw	r2,-8(fp)
 4011d48:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 4011d4c:	e0bffc17 	ldw	r2,-16(fp)
 4011d50:	1007883a 	mov	r3,r2
 4011d54:	e0bffe17 	ldw	r2,-8(fp)
 4011d58:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4011d5c:	e0bffb17 	ldw	r2,-20(fp)
 4011d60:	1007883a 	mov	r3,r2
 4011d64:	e0bffb17 	ldw	r2,-20(fp)
 4011d68:	1004d07a 	srli	r2,r2,1
 4011d6c:	1885c83a 	sub	r2,r3,r2
 4011d70:	1007883a 	mov	r3,r2
 4011d74:	e0bffe17 	ldw	r2,-8(fp)
 4011d78:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 4011d7c:	0005883a 	mov	r2,zero

}
 4011d80:	e037883a 	mov	sp,fp
 4011d84:	dfc00117 	ldw	ra,4(sp)
 4011d88:	df000017 	ldw	fp,0(sp)
 4011d8c:	dec00204 	addi	sp,sp,8
 4011d90:	f800283a 	ret

04011d94 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4011d94:	defffe04 	addi	sp,sp,-8
 4011d98:	df000115 	stw	fp,4(sp)
 4011d9c:	df000104 	addi	fp,sp,4
 4011da0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 4011da4:	e0bfff17 	ldw	r2,-4(fp)
 4011da8:	10800317 	ldw	r2,12(r2)
 4011dac:	10800504 	addi	r2,r2,20
 4011db0:	10800037 	ldwio	r2,0(r2)
 4011db4:	1080004c 	andi	r2,r2,1
 4011db8:	10000226 	beq	r2,zero,4011dc4 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 4011dbc:	00800044 	movi	r2,1
 4011dc0:	00000106 	br	4011dc8 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 4011dc4:	0005883a 	mov	r2,zero
}
 4011dc8:	e037883a 	mov	sp,fp
 4011dcc:	df000017 	ldw	fp,0(sp)
 4011dd0:	dec00104 	addi	sp,sp,4
 4011dd4:	f800283a 	ret

04011dd8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 4011dd8:	defffb04 	addi	sp,sp,-20
 4011ddc:	df000415 	stw	fp,16(sp)
 4011de0:	df000404 	addi	fp,sp,16
 4011de4:	e13ffc15 	stw	r4,-16(fp)
 4011de8:	e17ffd15 	stw	r5,-12(fp)
 4011dec:	e1bffe15 	stw	r6,-8(fp)
 4011df0:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 4011df4:	e0bfff17 	ldw	r2,-4(fp)
 4011df8:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4011dfc:	00001406 	br	4011e50 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4011e00:	e0bfff17 	ldw	r2,-4(fp)
 4011e04:	10800017 	ldw	r2,0(r2)
 4011e08:	e0fffd17 	ldw	r3,-12(fp)
 4011e0c:	1885883a 	add	r2,r3,r2
 4011e10:	e0fffc17 	ldw	r3,-16(fp)
 4011e14:	18c00317 	ldw	r3,12(r3)
 4011e18:	18c00104 	addi	r3,r3,4
 4011e1c:	18c00037 	ldwio	r3,0(r3)
 4011e20:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 4011e24:	e0bfff17 	ldw	r2,-4(fp)
 4011e28:	10800017 	ldw	r2,0(r2)
 4011e2c:	10c00044 	addi	r3,r2,1
 4011e30:	e0bfff17 	ldw	r2,-4(fp)
 4011e34:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4011e38:	e0bfff17 	ldw	r2,-4(fp)
 4011e3c:	10c00017 	ldw	r3,0(r2)
 4011e40:	e0bffe17 	ldw	r2,-8(fp)
 4011e44:	1880021e 	bne	r3,r2,4011e50 <alt_avalon_i2c_rx_read_available+0x78>
 4011e48:	e0bffe17 	ldw	r2,-8(fp)
 4011e4c:	1000061e 	bne	r2,zero,4011e68 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4011e50:	e0bffc17 	ldw	r2,-16(fp)
 4011e54:	10800317 	ldw	r2,12(r2)
 4011e58:	10800704 	addi	r2,r2,28
 4011e5c:	10800037 	ldwio	r2,0(r2)
 4011e60:	103fe71e 	bne	r2,zero,4011e00 <__alt_data_end+0xffff1e00>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 4011e64:	00000106 	br	4011e6c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4011e68:	0001883a 	nop
    }
}
 4011e6c:	0001883a 	nop
 4011e70:	e037883a 	mov	sp,fp
 4011e74:	df000017 	ldw	fp,0(sp)
 4011e78:	dec00104 	addi	sp,sp,4
 4011e7c:	f800283a 	ret

04011e80 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 4011e80:	defffa04 	addi	sp,sp,-24
 4011e84:	dfc00515 	stw	ra,20(sp)
 4011e88:	df000415 	stw	fp,16(sp)
 4011e8c:	df000404 	addi	fp,sp,16
 4011e90:	e13ffe15 	stw	r4,-8(fp)
 4011e94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 4011e98:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 4011e9c:	008000b4 	movhi	r2,2
 4011ea0:	10a1a804 	addi	r2,r2,-31072
 4011ea4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4011ea8:	00000d06 	br	4011ee0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 4011eac:	e0bffd17 	ldw	r2,-12(fp)
 4011eb0:	108002a8 	cmpgeui	r2,r2,10
 4011eb4:	1000021e 	bne	r2,zero,4011ec0 <alt_avalon_i2c_rx_read+0x40>
 4011eb8:	0109c404 	movi	r4,10000
 4011ebc:	4013ec80 	call	4013ec8 <alt_busy_sleep>
      if (--timeout == 0)
 4011ec0:	e0bffd17 	ldw	r2,-12(fp)
 4011ec4:	10bfffc4 	addi	r2,r2,-1
 4011ec8:	e0bffd15 	stw	r2,-12(fp)
 4011ecc:	e0bffd17 	ldw	r2,-12(fp)
 4011ed0:	1000031e 	bne	r2,zero,4011ee0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 4011ed4:	00bfff84 	movi	r2,-2
 4011ed8:	e0bffc15 	stw	r2,-16(fp)
        break;
 4011edc:	00000506 	br	4011ef4 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4011ee0:	e0bffe17 	ldw	r2,-8(fp)
 4011ee4:	10800317 	ldw	r2,12(r2)
 4011ee8:	10800704 	addi	r2,r2,28
 4011eec:	10800037 	ldwio	r2,0(r2)
 4011ef0:	103fee26 	beq	r2,zero,4011eac <__alt_data_end+0xffff1eac>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4011ef4:	e0bffe17 	ldw	r2,-8(fp)
 4011ef8:	10800317 	ldw	r2,12(r2)
 4011efc:	10800104 	addi	r2,r2,4
 4011f00:	10800037 	ldwio	r2,0(r2)
 4011f04:	1007883a 	mov	r3,r2
 4011f08:	e0bfff17 	ldw	r2,-4(fp)
 4011f0c:	10c00005 	stb	r3,0(r2)
        
    return status;
 4011f10:	e0bffc17 	ldw	r2,-16(fp)
}
 4011f14:	e037883a 	mov	sp,fp
 4011f18:	dfc00117 	ldw	ra,4(sp)
 4011f1c:	df000017 	ldw	fp,0(sp)
 4011f20:	dec00204 	addi	sp,sp,8
 4011f24:	f800283a 	ret

04011f28 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 4011f28:	defff804 	addi	sp,sp,-32
 4011f2c:	dfc00715 	stw	ra,28(sp)
 4011f30:	df000615 	stw	fp,24(sp)
 4011f34:	df000604 	addi	fp,sp,24
 4011f38:	e13ffc15 	stw	r4,-16(fp)
 4011f3c:	2809883a 	mov	r4,r5
 4011f40:	3007883a 	mov	r3,r6
 4011f44:	3805883a 	mov	r2,r7
 4011f48:	e13ffd05 	stb	r4,-12(fp)
 4011f4c:	e0fffe05 	stb	r3,-8(fp)
 4011f50:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 4011f54:	0089c404 	movi	r2,10000
 4011f58:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4011f5c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4011f60:	00000c06 	br	4011f94 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 4011f64:	e0bffa17 	ldw	r2,-24(fp)
 4011f68:	108002a8 	cmpgeui	r2,r2,10
 4011f6c:	1000021e 	bne	r2,zero,4011f78 <alt_avalon_i2c_cmd_write+0x50>
 4011f70:	0109c404 	movi	r4,10000
 4011f74:	4013ec80 	call	4013ec8 <alt_busy_sleep>
      if (--timeout == 0)
 4011f78:	e0bffa17 	ldw	r2,-24(fp)
 4011f7c:	10bfffc4 	addi	r2,r2,-1
 4011f80:	e0bffa15 	stw	r2,-24(fp)
 4011f84:	e0bffa17 	ldw	r2,-24(fp)
 4011f88:	1000021e 	bne	r2,zero,4011f94 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 4011f8c:	00bfff84 	movi	r2,-2
 4011f90:	00001906 	br	4011ff8 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4011f94:	e0bffc17 	ldw	r2,-16(fp)
 4011f98:	10800317 	ldw	r2,12(r2)
 4011f9c:	10800404 	addi	r2,r2,16
 4011fa0:	10800037 	ldwio	r2,0(r2)
 4011fa4:	1080004c 	andi	r2,r2,1
 4011fa8:	103fee26 	beq	r2,zero,4011f64 <__alt_data_end+0xffff1f64>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 4011fac:	e0bffc17 	ldw	r2,-16(fp)
 4011fb0:	10800317 	ldw	r2,12(r2)
 4011fb4:	e13ffd03 	ldbu	r4,-12(fp)
 4011fb8:	e0fffe03 	ldbu	r3,-8(fp)
 4011fbc:	1806927a 	slli	r3,r3,9
 4011fc0:	20c8b03a 	or	r4,r4,r3
 4011fc4:	e0ffff03 	ldbu	r3,-4(fp)
 4011fc8:	1806923a 	slli	r3,r3,8
 4011fcc:	20c6b03a 	or	r3,r4,r3
 4011fd0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4011fd4:	e0bffb04 	addi	r2,fp,-20
 4011fd8:	100b883a 	mov	r5,r2
 4011fdc:	e13ffc17 	ldw	r4,-16(fp)
 4011fe0:	40121680 	call	4012168 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 4011fe4:	e0bffb04 	addi	r2,fp,-20
 4011fe8:	100b883a 	mov	r5,r2
 4011fec:	e13ffc17 	ldw	r4,-16(fp)
 4011ff0:	40121b40 	call	40121b4 <alt_avalon_i2c_check_arblost>
    
    return status;
 4011ff4:	e0bffb17 	ldw	r2,-20(fp)
}
 4011ff8:	e037883a 	mov	sp,fp
 4011ffc:	dfc00117 	ldw	ra,4(sp)
 4012000:	df000017 	ldw	fp,0(sp)
 4012004:	dec00204 	addi	sp,sp,8
 4012008:	f800283a 	ret

0401200c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401200c:	defffa04 	addi	sp,sp,-24
 4012010:	dfc00515 	stw	ra,20(sp)
 4012014:	df000415 	stw	fp,16(sp)
 4012018:	df000404 	addi	fp,sp,16
 401201c:	e13ffd15 	stw	r4,-12(fp)
 4012020:	e17ffe15 	stw	r5,-8(fp)
 4012024:	3005883a 	mov	r2,r6
 4012028:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401202c:	e0bffd17 	ldw	r2,-12(fp)
 4012030:	10800d17 	ldw	r2,52(r2)
 4012034:	10800058 	cmpnei	r2,r2,1
 4012038:	10001c1e 	bne	r2,zero,40120ac <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401203c:	e0bffd17 	ldw	r2,-12(fp)
 4012040:	10800917 	ldw	r2,36(r2)
 4012044:	109e0014 	ori	r2,r2,30720
 4012048:	1004d1fa 	srli	r2,r2,7
 401204c:	1007883a 	mov	r3,r2
 4012050:	00bfff84 	movi	r2,-2
 4012054:	1884703a 	and	r2,r3,r2
 4012058:	1007883a 	mov	r3,r2
 401205c:	e0bffe17 	ldw	r2,-8(fp)
 4012060:	1884b03a 	or	r2,r3,r2
 4012064:	10803fcc 	andi	r2,r2,255
 4012068:	e0ffff03 	ldbu	r3,-4(fp)
 401206c:	000f883a 	mov	r7,zero
 4012070:	180d883a 	mov	r6,r3
 4012074:	100b883a 	mov	r5,r2
 4012078:	e13ffd17 	ldw	r4,-12(fp)
 401207c:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012080:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4012084:	e0bffd17 	ldw	r2,-12(fp)
 4012088:	10800917 	ldw	r2,36(r2)
 401208c:	10803fcc 	andi	r2,r2,255
 4012090:	000f883a 	mov	r7,zero
 4012094:	000d883a 	mov	r6,zero
 4012098:	100b883a 	mov	r5,r2
 401209c:	e13ffd17 	ldw	r4,-12(fp)
 40120a0:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 40120a4:	e0bffc15 	stw	r2,-16(fp)
 40120a8:	00000e06 	br	40120e4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 40120ac:	e0bffd17 	ldw	r2,-12(fp)
 40120b0:	10800917 	ldw	r2,36(r2)
 40120b4:	1085883a 	add	r2,r2,r2
 40120b8:	1007883a 	mov	r3,r2
 40120bc:	e0bffe17 	ldw	r2,-8(fp)
 40120c0:	1884b03a 	or	r2,r3,r2
 40120c4:	10803fcc 	andi	r2,r2,255
 40120c8:	e0ffff03 	ldbu	r3,-4(fp)
 40120cc:	000f883a 	mov	r7,zero
 40120d0:	180d883a 	mov	r6,r3
 40120d4:	100b883a 	mov	r5,r2
 40120d8:	e13ffd17 	ldw	r4,-12(fp)
 40120dc:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 40120e0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 40120e4:	e0bffc17 	ldw	r2,-16(fp)
}
 40120e8:	e037883a 	mov	sp,fp
 40120ec:	dfc00117 	ldw	ra,4(sp)
 40120f0:	df000017 	ldw	fp,0(sp)
 40120f4:	dec00204 	addi	sp,sp,8
 40120f8:	f800283a 	ret

040120fc <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 40120fc:	defffd04 	addi	sp,sp,-12
 4012100:	df000215 	stw	fp,8(sp)
 4012104:	df000204 	addi	fp,sp,8
 4012108:	e13ffe15 	stw	r4,-8(fp)
 401210c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 4012110:	e0bffe17 	ldw	r2,-8(fp)
 4012114:	10c00917 	ldw	r3,36(r2)
 4012118:	e0bfff17 	ldw	r2,-4(fp)
 401211c:	10c00015 	stw	r3,0(r2)
}
 4012120:	0001883a 	nop
 4012124:	e037883a 	mov	sp,fp
 4012128:	df000017 	ldw	fp,0(sp)
 401212c:	dec00104 	addi	sp,sp,4
 4012130:	f800283a 	ret

04012134 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 4012134:	defffd04 	addi	sp,sp,-12
 4012138:	df000215 	stw	fp,8(sp)
 401213c:	df000204 	addi	fp,sp,8
 4012140:	e13ffe15 	stw	r4,-8(fp)
 4012144:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 4012148:	e0bffe17 	ldw	r2,-8(fp)
 401214c:	e0ffff17 	ldw	r3,-4(fp)
 4012150:	10c00915 	stw	r3,36(r2)
}
 4012154:	0001883a 	nop
 4012158:	e037883a 	mov	sp,fp
 401215c:	df000017 	ldw	fp,0(sp)
 4012160:	dec00104 	addi	sp,sp,4
 4012164:	f800283a 	ret

04012168 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 4012168:	defffd04 	addi	sp,sp,-12
 401216c:	df000215 	stw	fp,8(sp)
 4012170:	df000204 	addi	fp,sp,8
 4012174:	e13ffe15 	stw	r4,-8(fp)
 4012178:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401217c:	e0bffe17 	ldw	r2,-8(fp)
 4012180:	10800317 	ldw	r2,12(r2)
 4012184:	10800404 	addi	r2,r2,16
 4012188:	10800037 	ldwio	r2,0(r2)
 401218c:	1080010c 	andi	r2,r2,4
 4012190:	10000326 	beq	r2,zero,40121a0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 4012194:	e0bfff17 	ldw	r2,-4(fp)
 4012198:	00fffec4 	movi	r3,-5
 401219c:	10c00015 	stw	r3,0(r2)
    }
}
 40121a0:	0001883a 	nop
 40121a4:	e037883a 	mov	sp,fp
 40121a8:	df000017 	ldw	fp,0(sp)
 40121ac:	dec00104 	addi	sp,sp,4
 40121b0:	f800283a 	ret

040121b4 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 40121b4:	defffd04 	addi	sp,sp,-12
 40121b8:	df000215 	stw	fp,8(sp)
 40121bc:	df000204 	addi	fp,sp,8
 40121c0:	e13ffe15 	stw	r4,-8(fp)
 40121c4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 40121c8:	e0bffe17 	ldw	r2,-8(fp)
 40121cc:	10800317 	ldw	r2,12(r2)
 40121d0:	10800404 	addi	r2,r2,16
 40121d4:	10800037 	ldwio	r2,0(r2)
 40121d8:	1080020c 	andi	r2,r2,8
 40121dc:	10000326 	beq	r2,zero,40121ec <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 40121e0:	e0bfff17 	ldw	r2,-4(fp)
 40121e4:	00fffe84 	movi	r3,-6
 40121e8:	10c00015 	stw	r3,0(r2)
    }
}
 40121ec:	0001883a 	nop
 40121f0:	e037883a 	mov	sp,fp
 40121f4:	df000017 	ldw	fp,0(sp)
 40121f8:	dec00104 	addi	sp,sp,4
 40121fc:	f800283a 	ret

04012200 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4012200:	defff804 	addi	sp,sp,-32
 4012204:	dfc00715 	stw	ra,28(sp)
 4012208:	df000615 	stw	fp,24(sp)
 401220c:	df000604 	addi	fp,sp,24
 4012210:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012214:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4012218:	e0bfff17 	ldw	r2,-4(fp)
 401221c:	10800717 	ldw	r2,28(r2)
 4012220:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 4012224:	e0bffb17 	ldw	r2,-20(fp)
 4012228:	10800117 	ldw	r2,4(r2)
 401222c:	10800044 	addi	r2,r2,1
 4012230:	0149c404 	movi	r5,10000
 4012234:	1009883a 	mov	r4,r2
 4012238:	4010fb00 	call	4010fb0 <__mulsi3>
 401223c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 4012240:	e0bffd04 	addi	r2,fp,-12
 4012244:	100b883a 	mov	r5,r2
 4012248:	e13fff17 	ldw	r4,-4(fp)
 401224c:	40130980 	call	4013098 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 4012250:	e0bffd17 	ldw	r2,-12(fp)
 4012254:	100b883a 	mov	r5,r2
 4012258:	e13fff17 	ldw	r4,-4(fp)
 401225c:	4012fcc0 	call	4012fcc <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4012260:	e0bffc04 	addi	r2,fp,-16
 4012264:	100b883a 	mov	r5,r2
 4012268:	e13fff17 	ldw	r4,-4(fp)
 401226c:	40121680 	call	4012168 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 4012270:	e0bffc17 	ldw	r2,-16(fp)
 4012274:	10002226 	beq	r2,zero,4012300 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 4012278:	e0bffb17 	ldw	r2,-20(fp)
 401227c:	10800217 	ldw	r2,8(r2)
 4012280:	10001d26 	beq	r2,zero,40122f8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012284:	00000d06 	br	40122bc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 4012288:	e0bffa17 	ldw	r2,-24(fp)
 401228c:	108002a8 	cmpgeui	r2,r2,10
 4012290:	1000021e 	bne	r2,zero,401229c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 4012294:	0109c404 	movi	r4,10000
 4012298:	4013ec80 	call	4013ec8 <alt_busy_sleep>
              if (--timeout == 0)
 401229c:	e0bffa17 	ldw	r2,-24(fp)
 40122a0:	10bfffc4 	addi	r2,r2,-1
 40122a4:	e0bffa15 	stw	r2,-24(fp)
 40122a8:	e0bffa17 	ldw	r2,-24(fp)
 40122ac:	1000031e 	bne	r2,zero,40122bc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 40122b0:	00bfff84 	movi	r2,-2
 40122b4:	e0bffc15 	stw	r2,-16(fp)
                 break;
 40122b8:	00000306 	br	40122c8 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40122bc:	e13fff17 	ldw	r4,-4(fp)
 40122c0:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 40122c4:	103ff01e 	bne	r2,zero,4012288 <__alt_data_end+0xffff2288>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 40122c8:	e0bffb17 	ldw	r2,-20(fp)
 40122cc:	10800017 	ldw	r2,0(r2)
 40122d0:	e0fffe04 	addi	r3,fp,-8
 40122d4:	180f883a 	mov	r7,r3
 40122d8:	000d883a 	mov	r6,zero
 40122dc:	100b883a 	mov	r5,r2
 40122e0:	e13fff17 	ldw	r4,-4(fp)
 40122e4:	4011dd80 	call	4011dd8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 40122e8:	e13fff17 	ldw	r4,-4(fp)
 40122ec:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 40122f0:	e0bffb17 	ldw	r2,-20(fp)
 40122f4:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 40122f8:	e0bffc17 	ldw	r2,-16(fp)
 40122fc:	00000a06 	br	4012328 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 4012300:	e0bffb17 	ldw	r2,-20(fp)
 4012304:	10800217 	ldw	r2,8(r2)
 4012308:	10000626 	beq	r2,zero,4012324 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401230c:	e0bffd17 	ldw	r2,-12(fp)
 4012310:	100b883a 	mov	r5,r2
 4012314:	e13fff17 	ldw	r4,-4(fp)
 4012318:	40130340 	call	4013034 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401231c:	00bffe44 	movi	r2,-7
 4012320:	00000106 	br	4012328 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 4012324:	0005883a 	mov	r2,zero
}
 4012328:	e037883a 	mov	sp,fp
 401232c:	dfc00117 	ldw	ra,4(sp)
 4012330:	df000017 	ldw	fp,0(sp)
 4012334:	dec00204 	addi	sp,sp,8
 4012338:	f800283a 	ret

0401233c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401233c:	defff704 	addi	sp,sp,-36
 4012340:	dfc00815 	stw	ra,32(sp)
 4012344:	df000715 	stw	fp,28(sp)
 4012348:	df000704 	addi	fp,sp,28
 401234c:	e13ffc15 	stw	r4,-16(fp)
 4012350:	e17ffd15 	stw	r5,-12(fp)
 4012354:	e1bffe15 	stw	r6,-8(fp)
 4012358:	3805883a 	mov	r2,r7
 401235c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4012360:	0089c404 	movi	r2,10000
 4012364:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 4012368:	00002206 	br	40123f4 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401236c:	e0bffb17 	ldw	r2,-20(fp)
 4012370:	108002a8 	cmpgeui	r2,r2,10
 4012374:	1000021e 	bne	r2,zero,4012380 <alt_avalon_i2c_master_tx+0x44>
 4012378:	0109c404 	movi	r4,10000
 401237c:	4013ec80 	call	4013ec8 <alt_busy_sleep>
      if (use_interrupts)
 4012380:	e0bfff03 	ldbu	r2,-4(fp)
 4012384:	10000926 	beq	r2,zero,40123ac <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 4012388:	00800044 	movi	r2,1
 401238c:	d8800015 	stw	r2,0(sp)
 4012390:	000f883a 	mov	r7,zero
 4012394:	e1bffe17 	ldw	r6,-8(fp)
 4012398:	e17ffd17 	ldw	r5,-12(fp)
 401239c:	e13ffc17 	ldw	r4,-16(fp)
 40123a0:	40128e80 	call	40128e8 <alt_avalon_i2c_master_transmit_using_interrupts>
 40123a4:	e0bffa15 	stw	r2,-24(fp)
 40123a8:	00000806 	br	40123cc <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 40123ac:	00800044 	movi	r2,1
 40123b0:	d8800015 	stw	r2,0(sp)
 40123b4:	000f883a 	mov	r7,zero
 40123b8:	e1bffe17 	ldw	r6,-8(fp)
 40123bc:	e17ffd17 	ldw	r5,-12(fp)
 40123c0:	e13ffc17 	ldw	r4,-16(fp)
 40123c4:	40127280 	call	4012728 <alt_avalon_i2c_master_transmit>
 40123c8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40123cc:	e0bffa17 	ldw	r2,-24(fp)
 40123d0:	10bffea0 	cmpeqi	r2,r2,-6
 40123d4:	1000061e 	bne	r2,zero,40123f0 <alt_avalon_i2c_master_tx+0xb4>
 40123d8:	e0bffa17 	ldw	r2,-24(fp)
 40123dc:	10bffee0 	cmpeqi	r2,r2,-5
 40123e0:	1000031e 	bne	r2,zero,40123f0 <alt_avalon_i2c_master_tx+0xb4>
 40123e4:	e0bffa17 	ldw	r2,-24(fp)
 40123e8:	10bffe58 	cmpnei	r2,r2,-7
 40123ec:	1000061e 	bne	r2,zero,4012408 <alt_avalon_i2c_master_tx+0xcc>
 40123f0:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 40123f4:	e0bffb17 	ldw	r2,-20(fp)
 40123f8:	10ffffc4 	addi	r3,r2,-1
 40123fc:	e0fffb15 	stw	r3,-20(fp)
 4012400:	103fda1e 	bne	r2,zero,401236c <__alt_data_end+0xffff236c>
 4012404:	00000106 	br	401240c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 4012408:	0001883a 	nop
    }

    return status;
 401240c:	e0bffa17 	ldw	r2,-24(fp)
}        
 4012410:	e037883a 	mov	sp,fp
 4012414:	dfc00117 	ldw	ra,4(sp)
 4012418:	df000017 	ldw	fp,0(sp)
 401241c:	dec00204 	addi	sp,sp,8
 4012420:	f800283a 	ret

04012424 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4012424:	defff704 	addi	sp,sp,-36
 4012428:	dfc00815 	stw	ra,32(sp)
 401242c:	df000715 	stw	fp,28(sp)
 4012430:	df000704 	addi	fp,sp,28
 4012434:	e13ffc15 	stw	r4,-16(fp)
 4012438:	e17ffd15 	stw	r5,-12(fp)
 401243c:	e1bffe15 	stw	r6,-8(fp)
 4012440:	3805883a 	mov	r2,r7
 4012444:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4012448:	0089c404 	movi	r2,10000
 401244c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 4012450:	e0bfff03 	ldbu	r2,-4(fp)
 4012454:	10003426 	beq	r2,zero,4012528 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 4012458:	00001706 	br	40124b8 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401245c:	e0bffb17 	ldw	r2,-20(fp)
 4012460:	108002a8 	cmpgeui	r2,r2,10
 4012464:	1000021e 	bne	r2,zero,4012470 <alt_avalon_i2c_master_rx+0x4c>
 4012468:	0109c404 	movi	r4,10000
 401246c:	4013ec80 	call	4013ec8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4012470:	00800044 	movi	r2,1
 4012474:	d8800015 	stw	r2,0(sp)
 4012478:	000f883a 	mov	r7,zero
 401247c:	e1bffe17 	ldw	r6,-8(fp)
 4012480:	e17ffd17 	ldw	r5,-12(fp)
 4012484:	e13ffc17 	ldw	r4,-16(fp)
 4012488:	4012d040 	call	4012d04 <alt_avalon_i2c_master_receive_using_interrupts>
 401248c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012490:	e0bffa17 	ldw	r2,-24(fp)
 4012494:	10bffea0 	cmpeqi	r2,r2,-6
 4012498:	1000061e 	bne	r2,zero,40124b4 <alt_avalon_i2c_master_rx+0x90>
 401249c:	e0bffa17 	ldw	r2,-24(fp)
 40124a0:	10bffee0 	cmpeqi	r2,r2,-5
 40124a4:	1000031e 	bne	r2,zero,40124b4 <alt_avalon_i2c_master_rx+0x90>
 40124a8:	e0bffa17 	ldw	r2,-24(fp)
 40124ac:	10bffe58 	cmpnei	r2,r2,-7
 40124b0:	1000221e 	bne	r2,zero,401253c <alt_avalon_i2c_master_rx+0x118>
 40124b4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 40124b8:	e0bffb17 	ldw	r2,-20(fp)
 40124bc:	10ffffc4 	addi	r3,r2,-1
 40124c0:	e0fffb15 	stw	r3,-20(fp)
 40124c4:	103fe51e 	bne	r2,zero,401245c <__alt_data_end+0xffff245c>
 40124c8:	00001f06 	br	4012548 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 40124cc:	e0bffb17 	ldw	r2,-20(fp)
 40124d0:	108002a8 	cmpgeui	r2,r2,10
 40124d4:	1000021e 	bne	r2,zero,40124e0 <alt_avalon_i2c_master_rx+0xbc>
 40124d8:	0109c404 	movi	r4,10000
 40124dc:	4013ec80 	call	4013ec8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 40124e0:	00800044 	movi	r2,1
 40124e4:	d8800015 	stw	r2,0(sp)
 40124e8:	000f883a 	mov	r7,zero
 40124ec:	e1bffe17 	ldw	r6,-8(fp)
 40124f0:	e17ffd17 	ldw	r5,-12(fp)
 40124f4:	e13ffc17 	ldw	r4,-16(fp)
 40124f8:	4012af40 	call	4012af4 <alt_avalon_i2c_master_receive>
 40124fc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012500:	e0bffa17 	ldw	r2,-24(fp)
 4012504:	10bffea0 	cmpeqi	r2,r2,-6
 4012508:	1000061e 	bne	r2,zero,4012524 <alt_avalon_i2c_master_rx+0x100>
 401250c:	e0bffa17 	ldw	r2,-24(fp)
 4012510:	10bffee0 	cmpeqi	r2,r2,-5
 4012514:	1000031e 	bne	r2,zero,4012524 <alt_avalon_i2c_master_rx+0x100>
 4012518:	e0bffa17 	ldw	r2,-24(fp)
 401251c:	10bffe58 	cmpnei	r2,r2,-7
 4012520:	1000081e 	bne	r2,zero,4012544 <alt_avalon_i2c_master_rx+0x120>
 4012524:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 4012528:	e0bffb17 	ldw	r2,-20(fp)
 401252c:	10ffffc4 	addi	r3,r2,-1
 4012530:	e0fffb15 	stw	r3,-20(fp)
 4012534:	103fe51e 	bne	r2,zero,40124cc <__alt_data_end+0xffff24cc>
 4012538:	00000306 	br	4012548 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401253c:	0001883a 	nop
 4012540:	00000106 	br	4012548 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4012544:	0001883a 	nop
      }
    }
    
    return status;
 4012548:	e0bffa17 	ldw	r2,-24(fp)
}        
 401254c:	e037883a 	mov	sp,fp
 4012550:	dfc00117 	ldw	ra,4(sp)
 4012554:	df000017 	ldw	fp,0(sp)
 4012558:	dec00204 	addi	sp,sp,8
 401255c:	f800283a 	ret

04012560 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4012560:	defff604 	addi	sp,sp,-40
 4012564:	dfc00915 	stw	ra,36(sp)
 4012568:	df000815 	stw	fp,32(sp)
 401256c:	df000804 	addi	fp,sp,32
 4012570:	e13ffb15 	stw	r4,-20(fp)
 4012574:	e17ffc15 	stw	r5,-16(fp)
 4012578:	e1bffd15 	stw	r6,-12(fp)
 401257c:	e1fffe15 	stw	r7,-8(fp)
 4012580:	e0800317 	ldw	r2,12(fp)
 4012584:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4012588:	0089c404 	movi	r2,10000
 401258c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 4012590:	e0bfff03 	ldbu	r2,-4(fp)
 4012594:	10005626 	beq	r2,zero,40126f0 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 4012598:	00002806 	br	401263c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401259c:	e0bffa17 	ldw	r2,-24(fp)
 40125a0:	108002a8 	cmpgeui	r2,r2,10
 40125a4:	1000021e 	bne	r2,zero,40125b0 <alt_avalon_i2c_master_tx_rx+0x50>
 40125a8:	0109c404 	movi	r4,10000
 40125ac:	4013ec80 	call	4013ec8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 40125b0:	d8000015 	stw	zero,0(sp)
 40125b4:	000f883a 	mov	r7,zero
 40125b8:	e1bffd17 	ldw	r6,-12(fp)
 40125bc:	e17ffc17 	ldw	r5,-16(fp)
 40125c0:	e13ffb17 	ldw	r4,-20(fp)
 40125c4:	40128e80 	call	40128e8 <alt_avalon_i2c_master_transmit_using_interrupts>
 40125c8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40125cc:	e0bff917 	ldw	r2,-28(fp)
 40125d0:	10bffea0 	cmpeqi	r2,r2,-6
 40125d4:	1000191e 	bne	r2,zero,401263c <alt_avalon_i2c_master_tx_rx+0xdc>
 40125d8:	e0bff917 	ldw	r2,-28(fp)
 40125dc:	10bffee0 	cmpeqi	r2,r2,-5
 40125e0:	1000161e 	bne	r2,zero,401263c <alt_avalon_i2c_master_tx_rx+0xdc>
 40125e4:	e0bff917 	ldw	r2,-28(fp)
 40125e8:	10bffe58 	cmpnei	r2,r2,-7
 40125ec:	1000011e 	bne	r2,zero,40125f4 <alt_avalon_i2c_master_tx_rx+0x94>
 40125f0:	00001206 	br	401263c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 40125f4:	00800044 	movi	r2,1
 40125f8:	d8800015 	stw	r2,0(sp)
 40125fc:	01c00044 	movi	r7,1
 4012600:	e1800217 	ldw	r6,8(fp)
 4012604:	e17ffe17 	ldw	r5,-8(fp)
 4012608:	e13ffb17 	ldw	r4,-20(fp)
 401260c:	4012d040 	call	4012d04 <alt_avalon_i2c_master_receive_using_interrupts>
 4012610:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012614:	e0bff917 	ldw	r2,-28(fp)
 4012618:	10bffea0 	cmpeqi	r2,r2,-6
 401261c:	1000061e 	bne	r2,zero,4012638 <alt_avalon_i2c_master_tx_rx+0xd8>
 4012620:	e0bff917 	ldw	r2,-28(fp)
 4012624:	10bffee0 	cmpeqi	r2,r2,-5
 4012628:	1000031e 	bne	r2,zero,4012638 <alt_avalon_i2c_master_tx_rx+0xd8>
 401262c:	e0bff917 	ldw	r2,-28(fp)
 4012630:	10bffe58 	cmpnei	r2,r2,-7
 4012634:	1000331e 	bne	r2,zero,4012704 <alt_avalon_i2c_master_tx_rx+0x1a4>
 4012638:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401263c:	e0bffa17 	ldw	r2,-24(fp)
 4012640:	10ffffc4 	addi	r3,r2,-1
 4012644:	e0fffa15 	stw	r3,-24(fp)
 4012648:	103fd41e 	bne	r2,zero,401259c <__alt_data_end+0xffff259c>
 401264c:	00003006 	br	4012710 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4012650:	e0bffa17 	ldw	r2,-24(fp)
 4012654:	108002a8 	cmpgeui	r2,r2,10
 4012658:	1000021e 	bne	r2,zero,4012664 <alt_avalon_i2c_master_tx_rx+0x104>
 401265c:	0109c404 	movi	r4,10000
 4012660:	4013ec80 	call	4013ec8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4012664:	d8000015 	stw	zero,0(sp)
 4012668:	000f883a 	mov	r7,zero
 401266c:	e1bffd17 	ldw	r6,-12(fp)
 4012670:	e17ffc17 	ldw	r5,-16(fp)
 4012674:	e13ffb17 	ldw	r4,-20(fp)
 4012678:	40127280 	call	4012728 <alt_avalon_i2c_master_transmit>
 401267c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4012680:	e0bff917 	ldw	r2,-28(fp)
 4012684:	10bffea0 	cmpeqi	r2,r2,-6
 4012688:	1000191e 	bne	r2,zero,40126f0 <alt_avalon_i2c_master_tx_rx+0x190>
 401268c:	e0bff917 	ldw	r2,-28(fp)
 4012690:	10bffee0 	cmpeqi	r2,r2,-5
 4012694:	1000161e 	bne	r2,zero,40126f0 <alt_avalon_i2c_master_tx_rx+0x190>
 4012698:	e0bff917 	ldw	r2,-28(fp)
 401269c:	10bffe58 	cmpnei	r2,r2,-7
 40126a0:	1000011e 	bne	r2,zero,40126a8 <alt_avalon_i2c_master_tx_rx+0x148>
 40126a4:	00001206 	br	40126f0 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 40126a8:	00800044 	movi	r2,1
 40126ac:	d8800015 	stw	r2,0(sp)
 40126b0:	01c00044 	movi	r7,1
 40126b4:	e1800217 	ldw	r6,8(fp)
 40126b8:	e17ffe17 	ldw	r5,-8(fp)
 40126bc:	e13ffb17 	ldw	r4,-20(fp)
 40126c0:	4012af40 	call	4012af4 <alt_avalon_i2c_master_receive>
 40126c4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40126c8:	e0bff917 	ldw	r2,-28(fp)
 40126cc:	10bffea0 	cmpeqi	r2,r2,-6
 40126d0:	1000061e 	bne	r2,zero,40126ec <alt_avalon_i2c_master_tx_rx+0x18c>
 40126d4:	e0bff917 	ldw	r2,-28(fp)
 40126d8:	10bffee0 	cmpeqi	r2,r2,-5
 40126dc:	1000031e 	bne	r2,zero,40126ec <alt_avalon_i2c_master_tx_rx+0x18c>
 40126e0:	e0bff917 	ldw	r2,-28(fp)
 40126e4:	10bffe58 	cmpnei	r2,r2,-7
 40126e8:	1000081e 	bne	r2,zero,401270c <alt_avalon_i2c_master_tx_rx+0x1ac>
 40126ec:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 40126f0:	e0bffa17 	ldw	r2,-24(fp)
 40126f4:	10ffffc4 	addi	r3,r2,-1
 40126f8:	e0fffa15 	stw	r3,-24(fp)
 40126fc:	103fd41e 	bne	r2,zero,4012650 <__alt_data_end+0xffff2650>
 4012700:	00000306 	br	4012710 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4012704:	0001883a 	nop
 4012708:	00000106 	br	4012710 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401270c:	0001883a 	nop
      }
    }
    
    return status;
 4012710:	e0bff917 	ldw	r2,-28(fp)
}                                       
 4012714:	e037883a 	mov	sp,fp
 4012718:	dfc00117 	ldw	ra,4(sp)
 401271c:	df000017 	ldw	fp,0(sp)
 4012720:	dec00204 	addi	sp,sp,8
 4012724:	f800283a 	ret

04012728 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 4012728:	defff704 	addi	sp,sp,-36
 401272c:	dfc00815 	stw	ra,32(sp)
 4012730:	df000715 	stw	fp,28(sp)
 4012734:	df000704 	addi	fp,sp,28
 4012738:	e13ffb15 	stw	r4,-20(fp)
 401273c:	e17ffc15 	stw	r5,-16(fp)
 4012740:	e1bffd15 	stw	r6,-12(fp)
 4012744:	3807883a 	mov	r3,r7
 4012748:	e0800217 	ldw	r2,8(fp)
 401274c:	e0fffe05 	stb	r3,-8(fp)
 4012750:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012754:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 4012758:	0149c404 	movi	r5,10000
 401275c:	e13ffd17 	ldw	r4,-12(fp)
 4012760:	4010fb00 	call	4010fb0 <__mulsi3>
 4012764:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 4012768:	e0bffd17 	ldw	r2,-12(fp)
 401276c:	1000021e 	bne	r2,zero,4012778 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012770:	0005883a 	mov	r2,zero
 4012774:	00005706 	br	40128d4 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012778:	e0bffe03 	ldbu	r2,-8(fp)
 401277c:	10000a1e 	bne	r2,zero,40127a8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012780:	e13ffb17 	ldw	r4,-20(fp)
 4012784:	40119a40 	call	40119a4 <alt_avalon_i2c_enable>
 4012788:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401278c:	e0bffa17 	ldw	r2,-24(fp)
 4012790:	10000226 	beq	r2,zero,401279c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 4012794:	e0bffa17 	ldw	r2,-24(fp)
 4012798:	00004e06 	br	40128d4 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401279c:	01400704 	movi	r5,28
 40127a0:	e13ffb17 	ldw	r4,-20(fp)
 40127a4:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 40127a8:	e0bffe03 	ldbu	r2,-8(fp)
 40127ac:	100d883a 	mov	r6,r2
 40127b0:	000b883a 	mov	r5,zero
 40127b4:	e13ffb17 	ldw	r4,-20(fp)
 40127b8:	401200c0 	call	401200c <alt_avalon_i2c_send_address>
 40127bc:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 40127c0:	e0bffa17 	ldw	r2,-24(fp)
 40127c4:	1000271e 	bne	r2,zero,4012864 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40127c8:	00000f06 	br	4012808 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40127cc:	e0bffc17 	ldw	r2,-16(fp)
 40127d0:	10800003 	ldbu	r2,0(r2)
 40127d4:	10803fcc 	andi	r2,r2,255
 40127d8:	000f883a 	mov	r7,zero
 40127dc:	000d883a 	mov	r6,zero
 40127e0:	100b883a 	mov	r5,r2
 40127e4:	e13ffb17 	ldw	r4,-20(fp)
 40127e8:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 40127ec:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 40127f0:	e0bffc17 	ldw	r2,-16(fp)
 40127f4:	10800044 	addi	r2,r2,1
 40127f8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40127fc:	e0bffd17 	ldw	r2,-12(fp)
 4012800:	10bfffc4 	addi	r2,r2,-1
 4012804:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4012808:	e0bffd17 	ldw	r2,-12(fp)
 401280c:	108000b0 	cmpltui	r2,r2,2
 4012810:	1000021e 	bne	r2,zero,401281c <alt_avalon_i2c_master_transmit+0xf4>
 4012814:	e0bffa17 	ldw	r2,-24(fp)
 4012818:	103fec26 	beq	r2,zero,40127cc <__alt_data_end+0xffff27cc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401281c:	e0bffa17 	ldw	r2,-24(fp)
 4012820:	1000101e 	bne	r2,zero,4012864 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012824:	e0bffc17 	ldw	r2,-16(fp)
 4012828:	10800003 	ldbu	r2,0(r2)
 401282c:	10803fcc 	andi	r2,r2,255
 4012830:	e0ffff03 	ldbu	r3,-4(fp)
 4012834:	180f883a 	mov	r7,r3
 4012838:	000d883a 	mov	r6,zero
 401283c:	100b883a 	mov	r5,r2
 4012840:	e13ffb17 	ldw	r4,-20(fp)
 4012844:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012848:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401284c:	e0bffc17 	ldw	r2,-16(fp)
 4012850:	10800044 	addi	r2,r2,1
 4012854:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4012858:	e0bffd17 	ldw	r2,-12(fp)
 401285c:	10bfffc4 	addi	r2,r2,-1
 4012860:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 4012864:	e0bfff03 	ldbu	r2,-4(fp)
 4012868:	1000101e 	bne	r2,zero,40128ac <alt_avalon_i2c_master_transmit+0x184>
 401286c:	e0bffa17 	ldw	r2,-24(fp)
 4012870:	10001726 	beq	r2,zero,40128d0 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012874:	00000d06 	br	40128ac <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4012878:	e0bff917 	ldw	r2,-28(fp)
 401287c:	108002a8 	cmpgeui	r2,r2,10
 4012880:	1000021e 	bne	r2,zero,401288c <alt_avalon_i2c_master_transmit+0x164>
 4012884:	0109c404 	movi	r4,10000
 4012888:	4013ec80 	call	4013ec8 <alt_busy_sleep>
            if (--timeout == 0)
 401288c:	e0bff917 	ldw	r2,-28(fp)
 4012890:	10bfffc4 	addi	r2,r2,-1
 4012894:	e0bff915 	stw	r2,-28(fp)
 4012898:	e0bff917 	ldw	r2,-28(fp)
 401289c:	1000031e 	bne	r2,zero,40128ac <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40128a0:	00bfff84 	movi	r2,-2
 40128a4:	e0bffa15 	stw	r2,-24(fp)
               break;
 40128a8:	00000306 	br	40128b8 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 40128ac:	e13ffb17 	ldw	r4,-20(fp)
 40128b0:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 40128b4:	103ff01e 	bne	r2,zero,4012878 <__alt_data_end+0xffff2878>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 40128b8:	e0bffa04 	addi	r2,fp,-24
 40128bc:	100b883a 	mov	r5,r2
 40128c0:	e13ffb17 	ldw	r4,-20(fp)
 40128c4:	40121680 	call	4012168 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40128c8:	e13ffb17 	ldw	r4,-20(fp)
 40128cc:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>
    }


    return status;
 40128d0:	e0bffa17 	ldw	r2,-24(fp)
}
 40128d4:	e037883a 	mov	sp,fp
 40128d8:	dfc00117 	ldw	ra,4(sp)
 40128dc:	df000017 	ldw	fp,0(sp)
 40128e0:	dec00204 	addi	sp,sp,8
 40128e4:	f800283a 	ret

040128e8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 40128e8:	defff604 	addi	sp,sp,-40
 40128ec:	dfc00915 	stw	ra,36(sp)
 40128f0:	df000815 	stw	fp,32(sp)
 40128f4:	df000804 	addi	fp,sp,32
 40128f8:	e13ffb15 	stw	r4,-20(fp)
 40128fc:	e17ffc15 	stw	r5,-16(fp)
 4012900:	e1bffd15 	stw	r6,-12(fp)
 4012904:	3807883a 	mov	r3,r7
 4012908:	e0800217 	ldw	r2,8(fp)
 401290c:	e0fffe05 	stb	r3,-8(fp)
 4012910:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012914:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 4012918:	0149c404 	movi	r5,10000
 401291c:	e13ffd17 	ldw	r4,-12(fp)
 4012920:	4010fb00 	call	4010fb0 <__mulsi3>
 4012924:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4012928:	e0bffb17 	ldw	r2,-20(fp)
 401292c:	10800717 	ldw	r2,28(r2)
 4012930:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 4012934:	e0bffd17 	ldw	r2,-12(fp)
 4012938:	1000021e 	bne	r2,zero,4012944 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401293c:	0005883a 	mov	r2,zero
 4012940:	00006706 	br	4012ae0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4012944:	e0bffb17 	ldw	r2,-20(fp)
 4012948:	10c00617 	ldw	r3,24(r2)
 401294c:	00810074 	movhi	r2,1025
 4012950:	10858a04 	addi	r2,r2,5672
 4012954:	18800226 	beq	r3,r2,4012960 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4012958:	00bfff44 	movi	r2,-3
 401295c:	00006006 	br	4012ae0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012960:	e0bffe03 	ldbu	r2,-8(fp)
 4012964:	10000a1e 	bne	r2,zero,4012990 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012968:	e13ffb17 	ldw	r4,-20(fp)
 401296c:	40119a40 	call	40119a4 <alt_avalon_i2c_enable>
 4012970:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4012974:	e0bff817 	ldw	r2,-32(fp)
 4012978:	10000226 	beq	r2,zero,4012984 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401297c:	e0bff817 	ldw	r2,-32(fp)
 4012980:	00005706 	br	4012ae0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012984:	01400704 	movi	r5,28
 4012988:	e13ffb17 	ldw	r4,-20(fp)
 401298c:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 4012990:	e0bffe03 	ldbu	r2,-8(fp)
 4012994:	100d883a 	mov	r6,r2
 4012998:	000b883a 	mov	r5,zero
 401299c:	e13ffb17 	ldw	r4,-20(fp)
 40129a0:	401200c0 	call	401200c <alt_avalon_i2c_send_address>
 40129a4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 40129a8:	e0bff817 	ldw	r2,-32(fp)
 40129ac:	1000271e 	bne	r2,zero,4012a4c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40129b0:	00000f06 	br	40129f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40129b4:	e0bffc17 	ldw	r2,-16(fp)
 40129b8:	10800003 	ldbu	r2,0(r2)
 40129bc:	10803fcc 	andi	r2,r2,255
 40129c0:	000f883a 	mov	r7,zero
 40129c4:	000d883a 	mov	r6,zero
 40129c8:	100b883a 	mov	r5,r2
 40129cc:	e13ffb17 	ldw	r4,-20(fp)
 40129d0:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 40129d4:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 40129d8:	e0bffc17 	ldw	r2,-16(fp)
 40129dc:	10800044 	addi	r2,r2,1
 40129e0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 40129e4:	e0bffd17 	ldw	r2,-12(fp)
 40129e8:	10bfffc4 	addi	r2,r2,-1
 40129ec:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40129f0:	e0bffd17 	ldw	r2,-12(fp)
 40129f4:	108000b0 	cmpltui	r2,r2,2
 40129f8:	1000021e 	bne	r2,zero,4012a04 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 40129fc:	e0bff817 	ldw	r2,-32(fp)
 4012a00:	103fec26 	beq	r2,zero,40129b4 <__alt_data_end+0xffff29b4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4012a04:	e0bff817 	ldw	r2,-32(fp)
 4012a08:	1000101e 	bne	r2,zero,4012a4c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012a0c:	e0bffc17 	ldw	r2,-16(fp)
 4012a10:	10800003 	ldbu	r2,0(r2)
 4012a14:	10803fcc 	andi	r2,r2,255
 4012a18:	e0ffff03 	ldbu	r3,-4(fp)
 4012a1c:	180f883a 	mov	r7,r3
 4012a20:	000d883a 	mov	r6,zero
 4012a24:	100b883a 	mov	r5,r2
 4012a28:	e13ffb17 	ldw	r4,-20(fp)
 4012a2c:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012a30:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 4012a34:	e0bffc17 	ldw	r2,-16(fp)
 4012a38:	10800044 	addi	r2,r2,1
 4012a3c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4012a40:	e0bffd17 	ldw	r2,-12(fp)
 4012a44:	10bfffc4 	addi	r2,r2,-1
 4012a48:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4012a4c:	e0bff817 	ldw	r2,-32(fp)
 4012a50:	10001426 	beq	r2,zero,4012aa4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012a54:	00000d06 	br	4012a8c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 4012a58:	e0bff917 	ldw	r2,-28(fp)
 4012a5c:	108002a8 	cmpgeui	r2,r2,10
 4012a60:	1000021e 	bne	r2,zero,4012a6c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 4012a64:	0109c404 	movi	r4,10000
 4012a68:	4013ec80 	call	4013ec8 <alt_busy_sleep>
            if (--timeout == 0)
 4012a6c:	e0bff917 	ldw	r2,-28(fp)
 4012a70:	10bfffc4 	addi	r2,r2,-1
 4012a74:	e0bff915 	stw	r2,-28(fp)
 4012a78:	e0bff917 	ldw	r2,-28(fp)
 4012a7c:	1000031e 	bne	r2,zero,4012a8c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4012a80:	00bfff84 	movi	r2,-2
 4012a84:	e0bff815 	stw	r2,-32(fp)
               break;
 4012a88:	00000306 	br	4012a98 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012a8c:	e13ffb17 	ldw	r4,-20(fp)
 4012a90:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 4012a94:	103ff01e 	bne	r2,zero,4012a58 <__alt_data_end+0xffff2a58>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4012a98:	e13ffb17 	ldw	r4,-20(fp)
 4012a9c:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>
 4012aa0:	00000e06 	br	4012adc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 4012aa4:	e0bfff03 	ldbu	r2,-4(fp)
 4012aa8:	10000c26 	beq	r2,zero,4012adc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012aac:	01400704 	movi	r5,28
 4012ab0:	e13ffb17 	ldw	r4,-20(fp)
 4012ab4:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 4012ab8:	000b883a 	mov	r5,zero
 4012abc:	e13ffb17 	ldw	r4,-20(fp)
 4012ac0:	40131d80 	call	40131d8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 4012ac4:	e0bffa17 	ldw	r2,-24(fp)
 4012ac8:	00c00044 	movi	r3,1
 4012acc:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 4012ad0:	01400044 	movi	r5,1
 4012ad4:	e13ffb17 	ldw	r4,-20(fp)
 4012ad8:	40130340 	call	4013034 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 4012adc:	e0bff817 	ldw	r2,-32(fp)
}
 4012ae0:	e037883a 	mov	sp,fp
 4012ae4:	dfc00117 	ldw	ra,4(sp)
 4012ae8:	df000017 	ldw	fp,0(sp)
 4012aec:	dec00204 	addi	sp,sp,8
 4012af0:	f800283a 	ret

04012af4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4012af4:	defff404 	addi	sp,sp,-48
 4012af8:	dfc00b15 	stw	ra,44(sp)
 4012afc:	df000a15 	stw	fp,40(sp)
 4012b00:	df000a04 	addi	fp,sp,40
 4012b04:	e13ffb15 	stw	r4,-20(fp)
 4012b08:	e17ffc15 	stw	r5,-16(fp)
 4012b0c:	e1bffd15 	stw	r6,-12(fp)
 4012b10:	3807883a 	mov	r3,r7
 4012b14:	e0800217 	ldw	r2,8(fp)
 4012b18:	e0fffe05 	stb	r3,-8(fp)
 4012b1c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012b20:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 4012b24:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 4012b28:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 4012b2c:	e0bffd17 	ldw	r2,-12(fp)
 4012b30:	1000021e 	bne	r2,zero,4012b3c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012b34:	0005883a 	mov	r2,zero
 4012b38:	00006d06 	br	4012cf0 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012b3c:	e0bffe03 	ldbu	r2,-8(fp)
 4012b40:	10000a1e 	bne	r2,zero,4012b6c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012b44:	e13ffb17 	ldw	r4,-20(fp)
 4012b48:	40119a40 	call	40119a4 <alt_avalon_i2c_enable>
 4012b4c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4012b50:	e0bff917 	ldw	r2,-28(fp)
 4012b54:	10000226 	beq	r2,zero,4012b60 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 4012b58:	e0bff917 	ldw	r2,-28(fp)
 4012b5c:	00006406 	br	4012cf0 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012b60:	01400704 	movi	r5,28
 4012b64:	e13ffb17 	ldw	r4,-20(fp)
 4012b68:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4012b6c:	e0bffe03 	ldbu	r2,-8(fp)
 4012b70:	100d883a 	mov	r6,r2
 4012b74:	01400044 	movi	r5,1
 4012b78:	e13ffb17 	ldw	r4,-20(fp)
 4012b7c:	401200c0 	call	401200c <alt_avalon_i2c_send_address>
 4012b80:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 4012b84:	e0bff917 	ldw	r2,-28(fp)
 4012b88:	1000341e 	bne	r2,zero,4012c5c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4012b8c:	00001906 	br	4012bf4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4012b90:	000f883a 	mov	r7,zero
 4012b94:	000d883a 	mov	r6,zero
 4012b98:	000b883a 	mov	r5,zero
 4012b9c:	e13ffb17 	ldw	r4,-20(fp)
 4012ba0:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012ba4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 4012ba8:	e0bff817 	ldw	r2,-32(fp)
 4012bac:	10800044 	addi	r2,r2,1
 4012bb0:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 4012bb4:	e0bff917 	ldw	r2,-28(fp)
 4012bb8:	10000e1e 	bne	r2,zero,4012bf4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 4012bbc:	e0bffa04 	addi	r2,fp,-24
 4012bc0:	100f883a 	mov	r7,r2
 4012bc4:	000d883a 	mov	r6,zero
 4012bc8:	e17ffc17 	ldw	r5,-16(fp)
 4012bcc:	e13ffb17 	ldw	r4,-20(fp)
 4012bd0:	4011dd80 	call	4011dd8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 4012bd4:	e0bffa17 	ldw	r2,-24(fp)
 4012bd8:	e0fffc17 	ldw	r3,-16(fp)
 4012bdc:	1885883a 	add	r2,r3,r2
 4012be0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 4012be4:	e0bffa17 	ldw	r2,-24(fp)
 4012be8:	e0fff717 	ldw	r3,-36(fp)
 4012bec:	1885883a 	add	r2,r3,r2
 4012bf0:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4012bf4:	e0bffd17 	ldw	r2,-12(fp)
 4012bf8:	10bfffc4 	addi	r2,r2,-1
 4012bfc:	e0fff817 	ldw	r3,-32(fp)
 4012c00:	1880022e 	bgeu	r3,r2,4012c0c <alt_avalon_i2c_master_receive+0x118>
 4012c04:	e0bff917 	ldw	r2,-28(fp)
 4012c08:	103fe126 	beq	r2,zero,4012b90 <__alt_data_end+0xffff2b90>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4012c0c:	e0bff917 	ldw	r2,-28(fp)
 4012c10:	1000121e 	bne	r2,zero,4012c5c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012c14:	e0bfff03 	ldbu	r2,-4(fp)
 4012c18:	100f883a 	mov	r7,r2
 4012c1c:	000d883a 	mov	r6,zero
 4012c20:	000b883a 	mov	r5,zero
 4012c24:	e13ffb17 	ldw	r4,-20(fp)
 4012c28:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012c2c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4012c30:	00000a06 	br	4012c5c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 4012c34:	e17ffc17 	ldw	r5,-16(fp)
 4012c38:	e13ffb17 	ldw	r4,-20(fp)
 4012c3c:	4011e800 	call	4011e80 <alt_avalon_i2c_rx_read>
 4012c40:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 4012c44:	e0bffc17 	ldw	r2,-16(fp)
 4012c48:	10800044 	addi	r2,r2,1
 4012c4c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 4012c50:	e0bff717 	ldw	r2,-36(fp)
 4012c54:	10800044 	addi	r2,r2,1
 4012c58:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4012c5c:	e0fff717 	ldw	r3,-36(fp)
 4012c60:	e0bffd17 	ldw	r2,-12(fp)
 4012c64:	1880022e 	bgeu	r3,r2,4012c70 <alt_avalon_i2c_master_receive+0x17c>
 4012c68:	e0bff917 	ldw	r2,-28(fp)
 4012c6c:	103ff126 	beq	r2,zero,4012c34 <__alt_data_end+0xffff2c34>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 4012c70:	e0bfff03 	ldbu	r2,-4(fp)
 4012c74:	1000021e 	bne	r2,zero,4012c80 <alt_avalon_i2c_master_receive+0x18c>
 4012c78:	e0bff917 	ldw	r2,-28(fp)
 4012c7c:	10001b26 	beq	r2,zero,4012cec <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 4012c80:	0149c404 	movi	r5,10000
 4012c84:	e13ffd17 	ldw	r4,-12(fp)
 4012c88:	4010fb00 	call	4010fb0 <__mulsi3>
 4012c8c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012c90:	00000d06 	br	4012cc8 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4012c94:	e0bff617 	ldw	r2,-40(fp)
 4012c98:	108002a8 	cmpgeui	r2,r2,10
 4012c9c:	1000021e 	bne	r2,zero,4012ca8 <alt_avalon_i2c_master_receive+0x1b4>
 4012ca0:	0109c404 	movi	r4,10000
 4012ca4:	4013ec80 	call	4013ec8 <alt_busy_sleep>
            if (--timeout == 0)
 4012ca8:	e0bff617 	ldw	r2,-40(fp)
 4012cac:	10bfffc4 	addi	r2,r2,-1
 4012cb0:	e0bff615 	stw	r2,-40(fp)
 4012cb4:	e0bff617 	ldw	r2,-40(fp)
 4012cb8:	1000031e 	bne	r2,zero,4012cc8 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4012cbc:	00bfff84 	movi	r2,-2
 4012cc0:	e0bff915 	stw	r2,-28(fp)
               break;
 4012cc4:	00000306 	br	4012cd4 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012cc8:	e13ffb17 	ldw	r4,-20(fp)
 4012ccc:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 4012cd0:	103ff01e 	bne	r2,zero,4012c94 <__alt_data_end+0xffff2c94>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 4012cd4:	e0bff904 	addi	r2,fp,-28
 4012cd8:	100b883a 	mov	r5,r2
 4012cdc:	e13ffb17 	ldw	r4,-20(fp)
 4012ce0:	40121680 	call	4012168 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4012ce4:	e13ffb17 	ldw	r4,-20(fp)
 4012ce8:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>
    }

    return status;
 4012cec:	e0bff917 	ldw	r2,-28(fp)
}
 4012cf0:	e037883a 	mov	sp,fp
 4012cf4:	dfc00117 	ldw	ra,4(sp)
 4012cf8:	df000017 	ldw	fp,0(sp)
 4012cfc:	dec00204 	addi	sp,sp,8
 4012d00:	f800283a 	ret

04012d04 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4012d04:	defff504 	addi	sp,sp,-44
 4012d08:	dfc00a15 	stw	ra,40(sp)
 4012d0c:	df000915 	stw	fp,36(sp)
 4012d10:	df000904 	addi	fp,sp,36
 4012d14:	e13ffb15 	stw	r4,-20(fp)
 4012d18:	e17ffc15 	stw	r5,-16(fp)
 4012d1c:	e1bffd15 	stw	r6,-12(fp)
 4012d20:	3807883a 	mov	r3,r7
 4012d24:	e0800217 	ldw	r2,8(fp)
 4012d28:	e0fffe05 	stb	r3,-8(fp)
 4012d2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4012d30:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4012d34:	e0bffb17 	ldw	r2,-20(fp)
 4012d38:	10800717 	ldw	r2,28(r2)
 4012d3c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 4012d40:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 4012d44:	e0bffd17 	ldw	r2,-12(fp)
 4012d48:	1000021e 	bne	r2,zero,4012d54 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4012d4c:	0005883a 	mov	r2,zero
 4012d50:	00006306 	br	4012ee0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4012d54:	e0bffb17 	ldw	r2,-20(fp)
 4012d58:	10c00617 	ldw	r3,24(r2)
 4012d5c:	00810074 	movhi	r2,1025
 4012d60:	10858a04 	addi	r2,r2,5672
 4012d64:	18800226 	beq	r3,r2,4012d70 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4012d68:	00bfff44 	movi	r2,-3
 4012d6c:	00005c06 	br	4012ee0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4012d70:	e0bffe03 	ldbu	r2,-8(fp)
 4012d74:	10000a1e 	bne	r2,zero,4012da0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4012d78:	e13ffb17 	ldw	r4,-20(fp)
 4012d7c:	40119a40 	call	40119a4 <alt_avalon_i2c_enable>
 4012d80:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4012d84:	e0bff717 	ldw	r2,-36(fp)
 4012d88:	10000226 	beq	r2,zero,4012d94 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 4012d8c:	e0bff717 	ldw	r2,-36(fp)
 4012d90:	00005306 	br	4012ee0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012d94:	01400704 	movi	r5,28
 4012d98:	e13ffb17 	ldw	r4,-20(fp)
 4012d9c:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4012da0:	e0bffe03 	ldbu	r2,-8(fp)
 4012da4:	100d883a 	mov	r6,r2
 4012da8:	01400044 	movi	r5,1
 4012dac:	e13ffb17 	ldw	r4,-20(fp)
 4012db0:	401200c0 	call	401200c <alt_avalon_i2c_send_address>
 4012db4:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 4012db8:	e0bff717 	ldw	r2,-36(fp)
 4012dbc:	1000191e 	bne	r2,zero,4012e24 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4012dc0:	00000906 	br	4012de8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4012dc4:	000f883a 	mov	r7,zero
 4012dc8:	000d883a 	mov	r6,zero
 4012dcc:	000b883a 	mov	r5,zero
 4012dd0:	e13ffb17 	ldw	r4,-20(fp)
 4012dd4:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012dd8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 4012ddc:	e0bff917 	ldw	r2,-28(fp)
 4012de0:	10800044 	addi	r2,r2,1
 4012de4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4012de8:	e0bffd17 	ldw	r2,-12(fp)
 4012dec:	10bfffc4 	addi	r2,r2,-1
 4012df0:	e0fff917 	ldw	r3,-28(fp)
 4012df4:	1880022e 	bgeu	r3,r2,4012e00 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 4012df8:	e0bff717 	ldw	r2,-36(fp)
 4012dfc:	103ff126 	beq	r2,zero,4012dc4 <__alt_data_end+0xffff2dc4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4012e00:	e0bff717 	ldw	r2,-36(fp)
 4012e04:	1000071e 	bne	r2,zero,4012e24 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4012e08:	e0bfff03 	ldbu	r2,-4(fp)
 4012e0c:	100f883a 	mov	r7,r2
 4012e10:	000d883a 	mov	r6,zero
 4012e14:	000b883a 	mov	r5,zero
 4012e18:	e13ffb17 	ldw	r4,-20(fp)
 4012e1c:	4011f280 	call	4011f28 <alt_avalon_i2c_cmd_write>
 4012e20:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4012e24:	e0bff717 	ldw	r2,-36(fp)
 4012e28:	10001826 	beq	r2,zero,4012e8c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 4012e2c:	0149c404 	movi	r5,10000
 4012e30:	e13ffd17 	ldw	r4,-12(fp)
 4012e34:	4010fb00 	call	4010fb0 <__mulsi3>
 4012e38:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012e3c:	00000d06 	br	4012e74 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4012e40:	e0bff817 	ldw	r2,-32(fp)
 4012e44:	108002a8 	cmpgeui	r2,r2,10
 4012e48:	1000021e 	bne	r2,zero,4012e54 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 4012e4c:	0109c404 	movi	r4,10000
 4012e50:	4013ec80 	call	4013ec8 <alt_busy_sleep>
            if (--timeout == 0)
 4012e54:	e0bff817 	ldw	r2,-32(fp)
 4012e58:	10bfffc4 	addi	r2,r2,-1
 4012e5c:	e0bff815 	stw	r2,-32(fp)
 4012e60:	e0bff817 	ldw	r2,-32(fp)
 4012e64:	1000031e 	bne	r2,zero,4012e74 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4012e68:	00bfff84 	movi	r2,-2
 4012e6c:	e0bff715 	stw	r2,-36(fp)
               break;
 4012e70:	00000306 	br	4012e80 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4012e74:	e13ffb17 	ldw	r4,-20(fp)
 4012e78:	4011d940 	call	4011d94 <alt_avalon_i2c_is_busy>
 4012e7c:	103ff01e 	bne	r2,zero,4012e40 <__alt_data_end+0xffff2e40>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4012e80:	e13ffb17 	ldw	r4,-20(fp)
 4012e84:	4011a3c0 	call	4011a3c <alt_avalon_i2c_disable>
 4012e88:	00001406 	br	4012edc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 4012e8c:	e0bfff03 	ldbu	r2,-4(fp)
 4012e90:	10001226 	beq	r2,zero,4012edc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4012e94:	01400704 	movi	r5,28
 4012e98:	e13ffb17 	ldw	r4,-20(fp)
 4012e9c:	4012f900 	call	4012f90 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 4012ea0:	000b883a 	mov	r5,zero
 4012ea4:	e13ffb17 	ldw	r4,-20(fp)
 4012ea8:	40131280 	call	4013128 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 4012eac:	e0bffa17 	ldw	r2,-24(fp)
 4012eb0:	00c00084 	movi	r3,2
 4012eb4:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 4012eb8:	e0bffa17 	ldw	r2,-24(fp)
 4012ebc:	e0fffc17 	ldw	r3,-16(fp)
 4012ec0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 4012ec4:	e0bffa17 	ldw	r2,-24(fp)
 4012ec8:	e0fffd17 	ldw	r3,-12(fp)
 4012ecc:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 4012ed0:	01400084 	movi	r5,2
 4012ed4:	e13ffb17 	ldw	r4,-20(fp)
 4012ed8:	40130340 	call	4013034 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 4012edc:	e0bff717 	ldw	r2,-36(fp)
}
 4012ee0:	e037883a 	mov	sp,fp
 4012ee4:	dfc00117 	ldw	ra,4(sp)
 4012ee8:	df000017 	ldw	fp,0(sp)
 4012eec:	dec00204 	addi	sp,sp,8
 4012ef0:	f800283a 	ret

04012ef4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 4012ef4:	defffd04 	addi	sp,sp,-12
 4012ef8:	df000215 	stw	fp,8(sp)
 4012efc:	df000204 	addi	fp,sp,8
 4012f00:	e13ffe15 	stw	r4,-8(fp)
 4012f04:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 4012f08:	e0bffe17 	ldw	r2,-8(fp)
 4012f0c:	10800317 	ldw	r2,12(r2)
 4012f10:	10800404 	addi	r2,r2,16
 4012f14:	10c00037 	ldwio	r3,0(r2)
 4012f18:	e0bffe17 	ldw	r2,-8(fp)
 4012f1c:	10800317 	ldw	r2,12(r2)
 4012f20:	10800304 	addi	r2,r2,12
 4012f24:	10800037 	ldwio	r2,0(r2)
 4012f28:	1884703a 	and	r2,r3,r2
 4012f2c:	1007883a 	mov	r3,r2
 4012f30:	e0bfff17 	ldw	r2,-4(fp)
 4012f34:	10c00015 	stw	r3,0(r2)
}
 4012f38:	0001883a 	nop
 4012f3c:	e037883a 	mov	sp,fp
 4012f40:	df000017 	ldw	fp,0(sp)
 4012f44:	dec00104 	addi	sp,sp,4
 4012f48:	f800283a 	ret

04012f4c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 4012f4c:	defffd04 	addi	sp,sp,-12
 4012f50:	df000215 	stw	fp,8(sp)
 4012f54:	df000204 	addi	fp,sp,8
 4012f58:	e13ffe15 	stw	r4,-8(fp)
 4012f5c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 4012f60:	e0bffe17 	ldw	r2,-8(fp)
 4012f64:	10800317 	ldw	r2,12(r2)
 4012f68:	10800404 	addi	r2,r2,16
 4012f6c:	10800037 	ldwio	r2,0(r2)
 4012f70:	1007883a 	mov	r3,r2
 4012f74:	e0bfff17 	ldw	r2,-4(fp)
 4012f78:	10c00015 	stw	r3,0(r2)
}
 4012f7c:	0001883a 	nop
 4012f80:	e037883a 	mov	sp,fp
 4012f84:	df000017 	ldw	fp,0(sp)
 4012f88:	dec00104 	addi	sp,sp,4
 4012f8c:	f800283a 	ret

04012f90 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4012f90:	defffd04 	addi	sp,sp,-12
 4012f94:	df000215 	stw	fp,8(sp)
 4012f98:	df000204 	addi	fp,sp,8
 4012f9c:	e13ffe15 	stw	r4,-8(fp)
 4012fa0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4012fa4:	e0bffe17 	ldw	r2,-8(fp)
 4012fa8:	10800317 	ldw	r2,12(r2)
 4012fac:	10800404 	addi	r2,r2,16
 4012fb0:	e0ffff17 	ldw	r3,-4(fp)
 4012fb4:	10c00035 	stwio	r3,0(r2)
}
 4012fb8:	0001883a 	nop
 4012fbc:	e037883a 	mov	sp,fp
 4012fc0:	df000017 	ldw	fp,0(sp)
 4012fc4:	dec00104 	addi	sp,sp,4
 4012fc8:	f800283a 	ret

04012fcc <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4012fcc:	defffb04 	addi	sp,sp,-20
 4012fd0:	dfc00415 	stw	ra,16(sp)
 4012fd4:	df000315 	stw	fp,12(sp)
 4012fd8:	df000304 	addi	fp,sp,12
 4012fdc:	e13ffe15 	stw	r4,-8(fp)
 4012fe0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 4012fe4:	e17ffd04 	addi	r5,fp,-12
 4012fe8:	e13ffe17 	ldw	r4,-8(fp)
 4012fec:	40130980 	call	4013098 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 4012ff0:	e0bfff17 	ldw	r2,-4(fp)
 4012ff4:	0086303a 	nor	r3,zero,r2
 4012ff8:	e0bffd17 	ldw	r2,-12(fp)
 4012ffc:	1884703a 	and	r2,r3,r2
 4013000:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4013004:	e0bffe17 	ldw	r2,-8(fp)
 4013008:	10800317 	ldw	r2,12(r2)
 401300c:	10800304 	addi	r2,r2,12
 4013010:	e0fffd17 	ldw	r3,-12(fp)
 4013014:	18c007cc 	andi	r3,r3,31
 4013018:	10c00035 	stwio	r3,0(r2)
}
 401301c:	0001883a 	nop
 4013020:	e037883a 	mov	sp,fp
 4013024:	dfc00117 	ldw	ra,4(sp)
 4013028:	df000017 	ldw	fp,0(sp)
 401302c:	dec00204 	addi	sp,sp,8
 4013030:	f800283a 	ret

04013034 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4013034:	defffb04 	addi	sp,sp,-20
 4013038:	dfc00415 	stw	ra,16(sp)
 401303c:	df000315 	stw	fp,12(sp)
 4013040:	df000304 	addi	fp,sp,12
 4013044:	e13ffe15 	stw	r4,-8(fp)
 4013048:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401304c:	e17ffd04 	addi	r5,fp,-12
 4013050:	e13ffe17 	ldw	r4,-8(fp)
 4013054:	40130980 	call	4013098 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 4013058:	e0fffd17 	ldw	r3,-12(fp)
 401305c:	e0bfff17 	ldw	r2,-4(fp)
 4013060:	1884b03a 	or	r2,r3,r2
 4013064:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4013068:	e0bffe17 	ldw	r2,-8(fp)
 401306c:	10800317 	ldw	r2,12(r2)
 4013070:	10800304 	addi	r2,r2,12
 4013074:	e0fffd17 	ldw	r3,-12(fp)
 4013078:	18c007cc 	andi	r3,r3,31
 401307c:	10c00035 	stwio	r3,0(r2)
}
 4013080:	0001883a 	nop
 4013084:	e037883a 	mov	sp,fp
 4013088:	dfc00117 	ldw	ra,4(sp)
 401308c:	df000017 	ldw	fp,0(sp)
 4013090:	dec00204 	addi	sp,sp,8
 4013094:	f800283a 	ret

04013098 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 4013098:	defffd04 	addi	sp,sp,-12
 401309c:	df000215 	stw	fp,8(sp)
 40130a0:	df000204 	addi	fp,sp,8
 40130a4:	e13ffe15 	stw	r4,-8(fp)
 40130a8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40130ac:	e0bffe17 	ldw	r2,-8(fp)
 40130b0:	10800317 	ldw	r2,12(r2)
 40130b4:	10800304 	addi	r2,r2,12
 40130b8:	10800037 	ldwio	r2,0(r2)
 40130bc:	10c007cc 	andi	r3,r2,31
 40130c0:	e0bfff17 	ldw	r2,-4(fp)
 40130c4:	10c00015 	stw	r3,0(r2)
}
 40130c8:	0001883a 	nop
 40130cc:	e037883a 	mov	sp,fp
 40130d0:	df000017 	ldw	fp,0(sp)
 40130d4:	dec00104 	addi	sp,sp,4
 40130d8:	f800283a 	ret

040130dc <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 40130dc:	defffd04 	addi	sp,sp,-12
 40130e0:	df000215 	stw	fp,8(sp)
 40130e4:	df000204 	addi	fp,sp,8
 40130e8:	e13ffe15 	stw	r4,-8(fp)
 40130ec:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 40130f0:	e0bffe17 	ldw	r2,-8(fp)
 40130f4:	10800317 	ldw	r2,12(r2)
 40130f8:	10800204 	addi	r2,r2,8
 40130fc:	10800037 	ldwio	r2,0(r2)
 4013100:	10800c0c 	andi	r2,r2,48
 4013104:	1005d13a 	srai	r2,r2,4
 4013108:	1007883a 	mov	r3,r2
 401310c:	e0bfff17 	ldw	r2,-4(fp)
 4013110:	10c00015 	stw	r3,0(r2)
}
 4013114:	0001883a 	nop
 4013118:	e037883a 	mov	sp,fp
 401311c:	df000017 	ldw	fp,0(sp)
 4013120:	dec00104 	addi	sp,sp,4
 4013124:	f800283a 	ret

04013128 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 4013128:	defffd04 	addi	sp,sp,-12
 401312c:	df000215 	stw	fp,8(sp)
 4013130:	df000204 	addi	fp,sp,8
 4013134:	e13ffe15 	stw	r4,-8(fp)
 4013138:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401313c:	e0bffe17 	ldw	r2,-8(fp)
 4013140:	10800317 	ldw	r2,12(r2)
 4013144:	10800204 	addi	r2,r2,8
 4013148:	e0fffe17 	ldw	r3,-8(fp)
 401314c:	18c00317 	ldw	r3,12(r3)
 4013150:	18c00204 	addi	r3,r3,8
 4013154:	18c00037 	ldwio	r3,0(r3)
 4013158:	1809883a 	mov	r4,r3
 401315c:	00fff3c4 	movi	r3,-49
 4013160:	20c8703a 	and	r4,r4,r3
 4013164:	e0ffff17 	ldw	r3,-4(fp)
 4013168:	1806913a 	slli	r3,r3,4
 401316c:	18c00c0c 	andi	r3,r3,48
 4013170:	20c6b03a 	or	r3,r4,r3
 4013174:	10c00035 	stwio	r3,0(r2)
}
 4013178:	0001883a 	nop
 401317c:	e037883a 	mov	sp,fp
 4013180:	df000017 	ldw	fp,0(sp)
 4013184:	dec00104 	addi	sp,sp,4
 4013188:	f800283a 	ret

0401318c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401318c:	defffd04 	addi	sp,sp,-12
 4013190:	df000215 	stw	fp,8(sp)
 4013194:	df000204 	addi	fp,sp,8
 4013198:	e13ffe15 	stw	r4,-8(fp)
 401319c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 40131a0:	e0bffe17 	ldw	r2,-8(fp)
 40131a4:	10800317 	ldw	r2,12(r2)
 40131a8:	10800204 	addi	r2,r2,8
 40131ac:	10800037 	ldwio	r2,0(r2)
 40131b0:	1080030c 	andi	r2,r2,12
 40131b4:	1005d0ba 	srai	r2,r2,2
 40131b8:	1007883a 	mov	r3,r2
 40131bc:	e0bfff17 	ldw	r2,-4(fp)
 40131c0:	10c00015 	stw	r3,0(r2)
}
 40131c4:	0001883a 	nop
 40131c8:	e037883a 	mov	sp,fp
 40131cc:	df000017 	ldw	fp,0(sp)
 40131d0:	dec00104 	addi	sp,sp,4
 40131d4:	f800283a 	ret

040131d8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 40131d8:	defffd04 	addi	sp,sp,-12
 40131dc:	df000215 	stw	fp,8(sp)
 40131e0:	df000204 	addi	fp,sp,8
 40131e4:	e13ffe15 	stw	r4,-8(fp)
 40131e8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 40131ec:	e0bffe17 	ldw	r2,-8(fp)
 40131f0:	10800317 	ldw	r2,12(r2)
 40131f4:	10c00204 	addi	r3,r2,8
 40131f8:	e0bffe17 	ldw	r2,-8(fp)
 40131fc:	10800317 	ldw	r2,12(r2)
 4013200:	10800204 	addi	r2,r2,8
 4013204:	10800037 	ldwio	r2,0(r2)
 4013208:	1009883a 	mov	r4,r2
 401320c:	00bffcc4 	movi	r2,-13
 4013210:	2088703a 	and	r4,r4,r2
 4013214:	e0bfff17 	ldw	r2,-4(fp)
 4013218:	1085883a 	add	r2,r2,r2
 401321c:	1085883a 	add	r2,r2,r2
 4013220:	1080030c 	andi	r2,r2,12
 4013224:	2084b03a 	or	r2,r4,r2
 4013228:	18800035 	stwio	r2,0(r3)
}
 401322c:	0001883a 	nop
 4013230:	e037883a 	mov	sp,fp
 4013234:	df000017 	ldw	fp,0(sp)
 4013238:	dec00104 	addi	sp,sp,4
 401323c:	f800283a 	ret

04013240 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4013240:	defffa04 	addi	sp,sp,-24
 4013244:	dfc00515 	stw	ra,20(sp)
 4013248:	df000415 	stw	fp,16(sp)
 401324c:	df000404 	addi	fp,sp,16
 4013250:	e13ffd15 	stw	r4,-12(fp)
 4013254:	e17ffe15 	stw	r5,-8(fp)
 4013258:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401325c:	e0bffd17 	ldw	r2,-12(fp)
 4013260:	10800017 	ldw	r2,0(r2)
 4013264:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4013268:	e0bffc17 	ldw	r2,-16(fp)
 401326c:	10c00a04 	addi	r3,r2,40
 4013270:	e0bffd17 	ldw	r2,-12(fp)
 4013274:	10800217 	ldw	r2,8(r2)
 4013278:	100f883a 	mov	r7,r2
 401327c:	e1bfff17 	ldw	r6,-4(fp)
 4013280:	e17ffe17 	ldw	r5,-8(fp)
 4013284:	1809883a 	mov	r4,r3
 4013288:	40138680 	call	4013868 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401328c:	e037883a 	mov	sp,fp
 4013290:	dfc00117 	ldw	ra,4(sp)
 4013294:	df000017 	ldw	fp,0(sp)
 4013298:	dec00204 	addi	sp,sp,8
 401329c:	f800283a 	ret

040132a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40132a0:	defffa04 	addi	sp,sp,-24
 40132a4:	dfc00515 	stw	ra,20(sp)
 40132a8:	df000415 	stw	fp,16(sp)
 40132ac:	df000404 	addi	fp,sp,16
 40132b0:	e13ffd15 	stw	r4,-12(fp)
 40132b4:	e17ffe15 	stw	r5,-8(fp)
 40132b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40132bc:	e0bffd17 	ldw	r2,-12(fp)
 40132c0:	10800017 	ldw	r2,0(r2)
 40132c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40132c8:	e0bffc17 	ldw	r2,-16(fp)
 40132cc:	10c00a04 	addi	r3,r2,40
 40132d0:	e0bffd17 	ldw	r2,-12(fp)
 40132d4:	10800217 	ldw	r2,8(r2)
 40132d8:	100f883a 	mov	r7,r2
 40132dc:	e1bfff17 	ldw	r6,-4(fp)
 40132e0:	e17ffe17 	ldw	r5,-8(fp)
 40132e4:	1809883a 	mov	r4,r3
 40132e8:	4013a840 	call	4013a84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40132ec:	e037883a 	mov	sp,fp
 40132f0:	dfc00117 	ldw	ra,4(sp)
 40132f4:	df000017 	ldw	fp,0(sp)
 40132f8:	dec00204 	addi	sp,sp,8
 40132fc:	f800283a 	ret

04013300 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4013300:	defffc04 	addi	sp,sp,-16
 4013304:	dfc00315 	stw	ra,12(sp)
 4013308:	df000215 	stw	fp,8(sp)
 401330c:	df000204 	addi	fp,sp,8
 4013310:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4013314:	e0bfff17 	ldw	r2,-4(fp)
 4013318:	10800017 	ldw	r2,0(r2)
 401331c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4013320:	e0bffe17 	ldw	r2,-8(fp)
 4013324:	10c00a04 	addi	r3,r2,40
 4013328:	e0bfff17 	ldw	r2,-4(fp)
 401332c:	10800217 	ldw	r2,8(r2)
 4013330:	100b883a 	mov	r5,r2
 4013334:	1809883a 	mov	r4,r3
 4013338:	40137100 	call	4013710 <altera_avalon_jtag_uart_close>
}
 401333c:	e037883a 	mov	sp,fp
 4013340:	dfc00117 	ldw	ra,4(sp)
 4013344:	df000017 	ldw	fp,0(sp)
 4013348:	dec00204 	addi	sp,sp,8
 401334c:	f800283a 	ret

04013350 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4013350:	defffa04 	addi	sp,sp,-24
 4013354:	dfc00515 	stw	ra,20(sp)
 4013358:	df000415 	stw	fp,16(sp)
 401335c:	df000404 	addi	fp,sp,16
 4013360:	e13ffd15 	stw	r4,-12(fp)
 4013364:	e17ffe15 	stw	r5,-8(fp)
 4013368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401336c:	e0bffd17 	ldw	r2,-12(fp)
 4013370:	10800017 	ldw	r2,0(r2)
 4013374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4013378:	e0bffc17 	ldw	r2,-16(fp)
 401337c:	10800a04 	addi	r2,r2,40
 4013380:	e1bfff17 	ldw	r6,-4(fp)
 4013384:	e17ffe17 	ldw	r5,-8(fp)
 4013388:	1009883a 	mov	r4,r2
 401338c:	40137780 	call	4013778 <altera_avalon_jtag_uart_ioctl>
}
 4013390:	e037883a 	mov	sp,fp
 4013394:	dfc00117 	ldw	ra,4(sp)
 4013398:	df000017 	ldw	fp,0(sp)
 401339c:	dec00204 	addi	sp,sp,8
 40133a0:	f800283a 	ret

040133a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40133a4:	defffa04 	addi	sp,sp,-24
 40133a8:	dfc00515 	stw	ra,20(sp)
 40133ac:	df000415 	stw	fp,16(sp)
 40133b0:	df000404 	addi	fp,sp,16
 40133b4:	e13ffd15 	stw	r4,-12(fp)
 40133b8:	e17ffe15 	stw	r5,-8(fp)
 40133bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40133c0:	e0bffd17 	ldw	r2,-12(fp)
 40133c4:	00c00044 	movi	r3,1
 40133c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40133cc:	e0bffd17 	ldw	r2,-12(fp)
 40133d0:	10800017 	ldw	r2,0(r2)
 40133d4:	10800104 	addi	r2,r2,4
 40133d8:	1007883a 	mov	r3,r2
 40133dc:	e0bffd17 	ldw	r2,-12(fp)
 40133e0:	10800817 	ldw	r2,32(r2)
 40133e4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40133e8:	e0bffe17 	ldw	r2,-8(fp)
 40133ec:	e0ffff17 	ldw	r3,-4(fp)
 40133f0:	d8000015 	stw	zero,0(sp)
 40133f4:	e1fffd17 	ldw	r7,-12(fp)
 40133f8:	01810074 	movhi	r6,1025
 40133fc:	318d1904 	addi	r6,r6,13412
 4013400:	180b883a 	mov	r5,r3
 4013404:	1009883a 	mov	r4,r2
 4013408:	4010fd80 	call	4010fd8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401340c:	e0bffd17 	ldw	r2,-12(fp)
 4013410:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4013414:	e0bffd17 	ldw	r2,-12(fp)
 4013418:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401341c:	d0e51117 	ldw	r3,-27580(gp)
 4013420:	e1fffd17 	ldw	r7,-12(fp)
 4013424:	01810074 	movhi	r6,1025
 4013428:	318d9c04 	addi	r6,r6,13936
 401342c:	180b883a 	mov	r5,r3
 4013430:	1009883a 	mov	r4,r2
 4013434:	4013d9c0 	call	4013d9c <alt_alarm_start>
 4013438:	1000040e 	bge	r2,zero,401344c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401343c:	e0fffd17 	ldw	r3,-12(fp)
 4013440:	00a00034 	movhi	r2,32768
 4013444:	10bfffc4 	addi	r2,r2,-1
 4013448:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401344c:	0001883a 	nop
 4013450:	e037883a 	mov	sp,fp
 4013454:	dfc00117 	ldw	ra,4(sp)
 4013458:	df000017 	ldw	fp,0(sp)
 401345c:	dec00204 	addi	sp,sp,8
 4013460:	f800283a 	ret

04013464 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4013464:	defff804 	addi	sp,sp,-32
 4013468:	df000715 	stw	fp,28(sp)
 401346c:	df000704 	addi	fp,sp,28
 4013470:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4013474:	e0bfff17 	ldw	r2,-4(fp)
 4013478:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401347c:	e0bffb17 	ldw	r2,-20(fp)
 4013480:	10800017 	ldw	r2,0(r2)
 4013484:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013488:	e0bffc17 	ldw	r2,-16(fp)
 401348c:	10800104 	addi	r2,r2,4
 4013490:	10800037 	ldwio	r2,0(r2)
 4013494:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4013498:	e0bffd17 	ldw	r2,-12(fp)
 401349c:	1080c00c 	andi	r2,r2,768
 40134a0:	10006d26 	beq	r2,zero,4013658 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40134a4:	e0bffd17 	ldw	r2,-12(fp)
 40134a8:	1080400c 	andi	r2,r2,256
 40134ac:	10003526 	beq	r2,zero,4013584 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40134b0:	00800074 	movhi	r2,1
 40134b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40134b8:	e0bffb17 	ldw	r2,-20(fp)
 40134bc:	10800a17 	ldw	r2,40(r2)
 40134c0:	10800044 	addi	r2,r2,1
 40134c4:	1081ffcc 	andi	r2,r2,2047
 40134c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40134cc:	e0bffb17 	ldw	r2,-20(fp)
 40134d0:	10c00b17 	ldw	r3,44(r2)
 40134d4:	e0bffe17 	ldw	r2,-8(fp)
 40134d8:	18801526 	beq	r3,r2,4013530 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40134dc:	e0bffc17 	ldw	r2,-16(fp)
 40134e0:	10800037 	ldwio	r2,0(r2)
 40134e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40134e8:	e0bff917 	ldw	r2,-28(fp)
 40134ec:	10a0000c 	andi	r2,r2,32768
 40134f0:	10001126 	beq	r2,zero,4013538 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40134f4:	e0bffb17 	ldw	r2,-20(fp)
 40134f8:	10800a17 	ldw	r2,40(r2)
 40134fc:	e0fff917 	ldw	r3,-28(fp)
 4013500:	1809883a 	mov	r4,r3
 4013504:	e0fffb17 	ldw	r3,-20(fp)
 4013508:	1885883a 	add	r2,r3,r2
 401350c:	10800e04 	addi	r2,r2,56
 4013510:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013514:	e0bffb17 	ldw	r2,-20(fp)
 4013518:	10800a17 	ldw	r2,40(r2)
 401351c:	10800044 	addi	r2,r2,1
 4013520:	10c1ffcc 	andi	r3,r2,2047
 4013524:	e0bffb17 	ldw	r2,-20(fp)
 4013528:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401352c:	003fe206 	br	40134b8 <__alt_data_end+0xffff34b8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4013530:	0001883a 	nop
 4013534:	00000106 	br	401353c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4013538:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401353c:	e0bff917 	ldw	r2,-28(fp)
 4013540:	10bfffec 	andhi	r2,r2,65535
 4013544:	10000f26 	beq	r2,zero,4013584 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013548:	e0bffb17 	ldw	r2,-20(fp)
 401354c:	10c00817 	ldw	r3,32(r2)
 4013550:	00bfff84 	movi	r2,-2
 4013554:	1886703a 	and	r3,r3,r2
 4013558:	e0bffb17 	ldw	r2,-20(fp)
 401355c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013560:	e0bffc17 	ldw	r2,-16(fp)
 4013564:	10800104 	addi	r2,r2,4
 4013568:	1007883a 	mov	r3,r2
 401356c:	e0bffb17 	ldw	r2,-20(fp)
 4013570:	10800817 	ldw	r2,32(r2)
 4013574:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013578:	e0bffc17 	ldw	r2,-16(fp)
 401357c:	10800104 	addi	r2,r2,4
 4013580:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4013584:	e0bffd17 	ldw	r2,-12(fp)
 4013588:	1080800c 	andi	r2,r2,512
 401358c:	103fbe26 	beq	r2,zero,4013488 <__alt_data_end+0xffff3488>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4013590:	e0bffd17 	ldw	r2,-12(fp)
 4013594:	1004d43a 	srli	r2,r2,16
 4013598:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401359c:	00001406 	br	40135f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40135a0:	e0bffc17 	ldw	r2,-16(fp)
 40135a4:	e0fffb17 	ldw	r3,-20(fp)
 40135a8:	18c00d17 	ldw	r3,52(r3)
 40135ac:	e13ffb17 	ldw	r4,-20(fp)
 40135b0:	20c7883a 	add	r3,r4,r3
 40135b4:	18c20e04 	addi	r3,r3,2104
 40135b8:	18c00003 	ldbu	r3,0(r3)
 40135bc:	18c03fcc 	andi	r3,r3,255
 40135c0:	18c0201c 	xori	r3,r3,128
 40135c4:	18ffe004 	addi	r3,r3,-128
 40135c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40135cc:	e0bffb17 	ldw	r2,-20(fp)
 40135d0:	10800d17 	ldw	r2,52(r2)
 40135d4:	10800044 	addi	r2,r2,1
 40135d8:	10c1ffcc 	andi	r3,r2,2047
 40135dc:	e0bffb17 	ldw	r2,-20(fp)
 40135e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40135e4:	e0bffa17 	ldw	r2,-24(fp)
 40135e8:	10bfffc4 	addi	r2,r2,-1
 40135ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40135f0:	e0bffa17 	ldw	r2,-24(fp)
 40135f4:	10000526 	beq	r2,zero,401360c <altera_avalon_jtag_uart_irq+0x1a8>
 40135f8:	e0bffb17 	ldw	r2,-20(fp)
 40135fc:	10c00d17 	ldw	r3,52(r2)
 4013600:	e0bffb17 	ldw	r2,-20(fp)
 4013604:	10800c17 	ldw	r2,48(r2)
 4013608:	18bfe51e 	bne	r3,r2,40135a0 <__alt_data_end+0xffff35a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401360c:	e0bffa17 	ldw	r2,-24(fp)
 4013610:	103f9d26 	beq	r2,zero,4013488 <__alt_data_end+0xffff3488>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013614:	e0bffb17 	ldw	r2,-20(fp)
 4013618:	10c00817 	ldw	r3,32(r2)
 401361c:	00bfff44 	movi	r2,-3
 4013620:	1886703a 	and	r3,r3,r2
 4013624:	e0bffb17 	ldw	r2,-20(fp)
 4013628:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401362c:	e0bffb17 	ldw	r2,-20(fp)
 4013630:	10800017 	ldw	r2,0(r2)
 4013634:	10800104 	addi	r2,r2,4
 4013638:	1007883a 	mov	r3,r2
 401363c:	e0bffb17 	ldw	r2,-20(fp)
 4013640:	10800817 	ldw	r2,32(r2)
 4013644:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013648:	e0bffc17 	ldw	r2,-16(fp)
 401364c:	10800104 	addi	r2,r2,4
 4013650:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4013654:	003f8c06 	br	4013488 <__alt_data_end+0xffff3488>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4013658:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401365c:	0001883a 	nop
 4013660:	e037883a 	mov	sp,fp
 4013664:	df000017 	ldw	fp,0(sp)
 4013668:	dec00104 	addi	sp,sp,4
 401366c:	f800283a 	ret

04013670 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4013670:	defff804 	addi	sp,sp,-32
 4013674:	df000715 	stw	fp,28(sp)
 4013678:	df000704 	addi	fp,sp,28
 401367c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4013680:	e0bffb17 	ldw	r2,-20(fp)
 4013684:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4013688:	e0bff917 	ldw	r2,-28(fp)
 401368c:	10800017 	ldw	r2,0(r2)
 4013690:	10800104 	addi	r2,r2,4
 4013694:	10800037 	ldwio	r2,0(r2)
 4013698:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401369c:	e0bffa17 	ldw	r2,-24(fp)
 40136a0:	1081000c 	andi	r2,r2,1024
 40136a4:	10000b26 	beq	r2,zero,40136d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40136a8:	e0bff917 	ldw	r2,-28(fp)
 40136ac:	10800017 	ldw	r2,0(r2)
 40136b0:	10800104 	addi	r2,r2,4
 40136b4:	1007883a 	mov	r3,r2
 40136b8:	e0bff917 	ldw	r2,-28(fp)
 40136bc:	10800817 	ldw	r2,32(r2)
 40136c0:	10810014 	ori	r2,r2,1024
 40136c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40136c8:	e0bff917 	ldw	r2,-28(fp)
 40136cc:	10000915 	stw	zero,36(r2)
 40136d0:	00000a06 	br	40136fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40136d4:	e0bff917 	ldw	r2,-28(fp)
 40136d8:	10c00917 	ldw	r3,36(r2)
 40136dc:	00a00034 	movhi	r2,32768
 40136e0:	10bfff04 	addi	r2,r2,-4
 40136e4:	10c00536 	bltu	r2,r3,40136fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40136e8:	e0bff917 	ldw	r2,-28(fp)
 40136ec:	10800917 	ldw	r2,36(r2)
 40136f0:	10c00044 	addi	r3,r2,1
 40136f4:	e0bff917 	ldw	r2,-28(fp)
 40136f8:	10c00915 	stw	r3,36(r2)
 40136fc:	d0a51117 	ldw	r2,-27580(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4013700:	e037883a 	mov	sp,fp
 4013704:	df000017 	ldw	fp,0(sp)
 4013708:	dec00104 	addi	sp,sp,4
 401370c:	f800283a 	ret

04013710 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4013710:	defffd04 	addi	sp,sp,-12
 4013714:	df000215 	stw	fp,8(sp)
 4013718:	df000204 	addi	fp,sp,8
 401371c:	e13ffe15 	stw	r4,-8(fp)
 4013720:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013724:	00000506 	br	401373c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4013728:	e0bfff17 	ldw	r2,-4(fp)
 401372c:	1090000c 	andi	r2,r2,16384
 4013730:	10000226 	beq	r2,zero,401373c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4013734:	00bffd44 	movi	r2,-11
 4013738:	00000b06 	br	4013768 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401373c:	e0bffe17 	ldw	r2,-8(fp)
 4013740:	10c00d17 	ldw	r3,52(r2)
 4013744:	e0bffe17 	ldw	r2,-8(fp)
 4013748:	10800c17 	ldw	r2,48(r2)
 401374c:	18800526 	beq	r3,r2,4013764 <altera_avalon_jtag_uart_close+0x54>
 4013750:	e0bffe17 	ldw	r2,-8(fp)
 4013754:	10c00917 	ldw	r3,36(r2)
 4013758:	e0bffe17 	ldw	r2,-8(fp)
 401375c:	10800117 	ldw	r2,4(r2)
 4013760:	18bff136 	bltu	r3,r2,4013728 <__alt_data_end+0xffff3728>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4013764:	0005883a 	mov	r2,zero
}
 4013768:	e037883a 	mov	sp,fp
 401376c:	df000017 	ldw	fp,0(sp)
 4013770:	dec00104 	addi	sp,sp,4
 4013774:	f800283a 	ret

04013778 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4013778:	defffa04 	addi	sp,sp,-24
 401377c:	df000515 	stw	fp,20(sp)
 4013780:	df000504 	addi	fp,sp,20
 4013784:	e13ffd15 	stw	r4,-12(fp)
 4013788:	e17ffe15 	stw	r5,-8(fp)
 401378c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4013790:	00bff9c4 	movi	r2,-25
 4013794:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4013798:	e0bffe17 	ldw	r2,-8(fp)
 401379c:	10da8060 	cmpeqi	r3,r2,27137
 40137a0:	1800031e 	bne	r3,zero,40137b0 <altera_avalon_jtag_uart_ioctl+0x38>
 40137a4:	109a80a0 	cmpeqi	r2,r2,27138
 40137a8:	1000181e 	bne	r2,zero,401380c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40137ac:	00002906 	br	4013854 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40137b0:	e0bffd17 	ldw	r2,-12(fp)
 40137b4:	10c00117 	ldw	r3,4(r2)
 40137b8:	00a00034 	movhi	r2,32768
 40137bc:	10bfffc4 	addi	r2,r2,-1
 40137c0:	18802126 	beq	r3,r2,4013848 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40137c4:	e0bfff17 	ldw	r2,-4(fp)
 40137c8:	10800017 	ldw	r2,0(r2)
 40137cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40137d0:	e0bffc17 	ldw	r2,-16(fp)
 40137d4:	10800090 	cmplti	r2,r2,2
 40137d8:	1000061e 	bne	r2,zero,40137f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40137dc:	e0fffc17 	ldw	r3,-16(fp)
 40137e0:	00a00034 	movhi	r2,32768
 40137e4:	10bfffc4 	addi	r2,r2,-1
 40137e8:	18800226 	beq	r3,r2,40137f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40137ec:	e0bffc17 	ldw	r2,-16(fp)
 40137f0:	00000206 	br	40137fc <altera_avalon_jtag_uart_ioctl+0x84>
 40137f4:	00a00034 	movhi	r2,32768
 40137f8:	10bfff84 	addi	r2,r2,-2
 40137fc:	e0fffd17 	ldw	r3,-12(fp)
 4013800:	18800115 	stw	r2,4(r3)
      rc = 0;
 4013804:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4013808:	00000f06 	br	4013848 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401380c:	e0bffd17 	ldw	r2,-12(fp)
 4013810:	10c00117 	ldw	r3,4(r2)
 4013814:	00a00034 	movhi	r2,32768
 4013818:	10bfffc4 	addi	r2,r2,-1
 401381c:	18800c26 	beq	r3,r2,4013850 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4013820:	e0bffd17 	ldw	r2,-12(fp)
 4013824:	10c00917 	ldw	r3,36(r2)
 4013828:	e0bffd17 	ldw	r2,-12(fp)
 401382c:	10800117 	ldw	r2,4(r2)
 4013830:	1885803a 	cmpltu	r2,r3,r2
 4013834:	10c03fcc 	andi	r3,r2,255
 4013838:	e0bfff17 	ldw	r2,-4(fp)
 401383c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4013840:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4013844:	00000206 	br	4013850 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4013848:	0001883a 	nop
 401384c:	00000106 	br	4013854 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4013850:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4013854:	e0bffb17 	ldw	r2,-20(fp)
}
 4013858:	e037883a 	mov	sp,fp
 401385c:	df000017 	ldw	fp,0(sp)
 4013860:	dec00104 	addi	sp,sp,4
 4013864:	f800283a 	ret

04013868 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4013868:	defff304 	addi	sp,sp,-52
 401386c:	dfc00c15 	stw	ra,48(sp)
 4013870:	df000b15 	stw	fp,44(sp)
 4013874:	df000b04 	addi	fp,sp,44
 4013878:	e13ffc15 	stw	r4,-16(fp)
 401387c:	e17ffd15 	stw	r5,-12(fp)
 4013880:	e1bffe15 	stw	r6,-8(fp)
 4013884:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4013888:	e0bffd17 	ldw	r2,-12(fp)
 401388c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4013890:	00004706 	br	40139b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4013894:	e0bffc17 	ldw	r2,-16(fp)
 4013898:	10800a17 	ldw	r2,40(r2)
 401389c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40138a0:	e0bffc17 	ldw	r2,-16(fp)
 40138a4:	10800b17 	ldw	r2,44(r2)
 40138a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40138ac:	e0fff717 	ldw	r3,-36(fp)
 40138b0:	e0bff817 	ldw	r2,-32(fp)
 40138b4:	18800536 	bltu	r3,r2,40138cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40138b8:	e0fff717 	ldw	r3,-36(fp)
 40138bc:	e0bff817 	ldw	r2,-32(fp)
 40138c0:	1885c83a 	sub	r2,r3,r2
 40138c4:	e0bff615 	stw	r2,-40(fp)
 40138c8:	00000406 	br	40138dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40138cc:	00c20004 	movi	r3,2048
 40138d0:	e0bff817 	ldw	r2,-32(fp)
 40138d4:	1885c83a 	sub	r2,r3,r2
 40138d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40138dc:	e0bff617 	ldw	r2,-40(fp)
 40138e0:	10001e26 	beq	r2,zero,401395c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40138e4:	e0fffe17 	ldw	r3,-8(fp)
 40138e8:	e0bff617 	ldw	r2,-40(fp)
 40138ec:	1880022e 	bgeu	r3,r2,40138f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40138f0:	e0bffe17 	ldw	r2,-8(fp)
 40138f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40138f8:	e0bffc17 	ldw	r2,-16(fp)
 40138fc:	10c00e04 	addi	r3,r2,56
 4013900:	e0bff817 	ldw	r2,-32(fp)
 4013904:	1885883a 	add	r2,r3,r2
 4013908:	e1bff617 	ldw	r6,-40(fp)
 401390c:	100b883a 	mov	r5,r2
 4013910:	e13ff517 	ldw	r4,-44(fp)
 4013914:	4014f340 	call	4014f34 <memcpy>
      ptr   += n;
 4013918:	e0fff517 	ldw	r3,-44(fp)
 401391c:	e0bff617 	ldw	r2,-40(fp)
 4013920:	1885883a 	add	r2,r3,r2
 4013924:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4013928:	e0fffe17 	ldw	r3,-8(fp)
 401392c:	e0bff617 	ldw	r2,-40(fp)
 4013930:	1885c83a 	sub	r2,r3,r2
 4013934:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013938:	e0fff817 	ldw	r3,-32(fp)
 401393c:	e0bff617 	ldw	r2,-40(fp)
 4013940:	1885883a 	add	r2,r3,r2
 4013944:	10c1ffcc 	andi	r3,r2,2047
 4013948:	e0bffc17 	ldw	r2,-16(fp)
 401394c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4013950:	e0bffe17 	ldw	r2,-8(fp)
 4013954:	00bfcf16 	blt	zero,r2,4013894 <__alt_data_end+0xffff3894>
 4013958:	00000106 	br	4013960 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401395c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4013960:	e0fff517 	ldw	r3,-44(fp)
 4013964:	e0bffd17 	ldw	r2,-12(fp)
 4013968:	1880141e 	bne	r3,r2,40139bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401396c:	e0bfff17 	ldw	r2,-4(fp)
 4013970:	1090000c 	andi	r2,r2,16384
 4013974:	1000131e 	bne	r2,zero,40139c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4013978:	0001883a 	nop
 401397c:	e0bffc17 	ldw	r2,-16(fp)
 4013980:	10c00a17 	ldw	r3,40(r2)
 4013984:	e0bff717 	ldw	r2,-36(fp)
 4013988:	1880051e 	bne	r3,r2,40139a0 <altera_avalon_jtag_uart_read+0x138>
 401398c:	e0bffc17 	ldw	r2,-16(fp)
 4013990:	10c00917 	ldw	r3,36(r2)
 4013994:	e0bffc17 	ldw	r2,-16(fp)
 4013998:	10800117 	ldw	r2,4(r2)
 401399c:	18bff736 	bltu	r3,r2,401397c <__alt_data_end+0xffff397c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40139a0:	e0bffc17 	ldw	r2,-16(fp)
 40139a4:	10c00a17 	ldw	r3,40(r2)
 40139a8:	e0bff717 	ldw	r2,-36(fp)
 40139ac:	18800726 	beq	r3,r2,40139cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40139b0:	e0bffe17 	ldw	r2,-8(fp)
 40139b4:	00bfb716 	blt	zero,r2,4013894 <__alt_data_end+0xffff3894>
 40139b8:	00000506 	br	40139d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40139bc:	0001883a 	nop
 40139c0:	00000306 	br	40139d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40139c4:	0001883a 	nop
 40139c8:	00000106 	br	40139d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40139cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40139d0:	e0fff517 	ldw	r3,-44(fp)
 40139d4:	e0bffd17 	ldw	r2,-12(fp)
 40139d8:	18801826 	beq	r3,r2,4013a3c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40139dc:	0005303a 	rdctl	r2,status
 40139e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40139e4:	e0fffb17 	ldw	r3,-20(fp)
 40139e8:	00bfff84 	movi	r2,-2
 40139ec:	1884703a 	and	r2,r3,r2
 40139f0:	1001703a 	wrctl	status,r2
  
  return context;
 40139f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40139f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40139fc:	e0bffc17 	ldw	r2,-16(fp)
 4013a00:	10800817 	ldw	r2,32(r2)
 4013a04:	10c00054 	ori	r3,r2,1
 4013a08:	e0bffc17 	ldw	r2,-16(fp)
 4013a0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013a10:	e0bffc17 	ldw	r2,-16(fp)
 4013a14:	10800017 	ldw	r2,0(r2)
 4013a18:	10800104 	addi	r2,r2,4
 4013a1c:	1007883a 	mov	r3,r2
 4013a20:	e0bffc17 	ldw	r2,-16(fp)
 4013a24:	10800817 	ldw	r2,32(r2)
 4013a28:	18800035 	stwio	r2,0(r3)
 4013a2c:	e0bffa17 	ldw	r2,-24(fp)
 4013a30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013a34:	e0bff917 	ldw	r2,-28(fp)
 4013a38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4013a3c:	e0fff517 	ldw	r3,-44(fp)
 4013a40:	e0bffd17 	ldw	r2,-12(fp)
 4013a44:	18800426 	beq	r3,r2,4013a58 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4013a48:	e0fff517 	ldw	r3,-44(fp)
 4013a4c:	e0bffd17 	ldw	r2,-12(fp)
 4013a50:	1885c83a 	sub	r2,r3,r2
 4013a54:	00000606 	br	4013a70 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4013a58:	e0bfff17 	ldw	r2,-4(fp)
 4013a5c:	1090000c 	andi	r2,r2,16384
 4013a60:	10000226 	beq	r2,zero,4013a6c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4013a64:	00bffd44 	movi	r2,-11
 4013a68:	00000106 	br	4013a70 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4013a6c:	00bffec4 	movi	r2,-5
}
 4013a70:	e037883a 	mov	sp,fp
 4013a74:	dfc00117 	ldw	ra,4(sp)
 4013a78:	df000017 	ldw	fp,0(sp)
 4013a7c:	dec00204 	addi	sp,sp,8
 4013a80:	f800283a 	ret

04013a84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4013a84:	defff304 	addi	sp,sp,-52
 4013a88:	dfc00c15 	stw	ra,48(sp)
 4013a8c:	df000b15 	stw	fp,44(sp)
 4013a90:	df000b04 	addi	fp,sp,44
 4013a94:	e13ffc15 	stw	r4,-16(fp)
 4013a98:	e17ffd15 	stw	r5,-12(fp)
 4013a9c:	e1bffe15 	stw	r6,-8(fp)
 4013aa0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4013aa4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4013aa8:	e0bffd17 	ldw	r2,-12(fp)
 4013aac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013ab0:	00003706 	br	4013b90 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4013ab4:	e0bffc17 	ldw	r2,-16(fp)
 4013ab8:	10800c17 	ldw	r2,48(r2)
 4013abc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4013ac0:	e0bffc17 	ldw	r2,-16(fp)
 4013ac4:	10800d17 	ldw	r2,52(r2)
 4013ac8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4013acc:	e0fff917 	ldw	r3,-28(fp)
 4013ad0:	e0bff517 	ldw	r2,-44(fp)
 4013ad4:	1880062e 	bgeu	r3,r2,4013af0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4013ad8:	e0fff517 	ldw	r3,-44(fp)
 4013adc:	e0bff917 	ldw	r2,-28(fp)
 4013ae0:	1885c83a 	sub	r2,r3,r2
 4013ae4:	10bfffc4 	addi	r2,r2,-1
 4013ae8:	e0bff615 	stw	r2,-40(fp)
 4013aec:	00000b06 	br	4013b1c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4013af0:	e0bff517 	ldw	r2,-44(fp)
 4013af4:	10000526 	beq	r2,zero,4013b0c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4013af8:	00c20004 	movi	r3,2048
 4013afc:	e0bff917 	ldw	r2,-28(fp)
 4013b00:	1885c83a 	sub	r2,r3,r2
 4013b04:	e0bff615 	stw	r2,-40(fp)
 4013b08:	00000406 	br	4013b1c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4013b0c:	00c1ffc4 	movi	r3,2047
 4013b10:	e0bff917 	ldw	r2,-28(fp)
 4013b14:	1885c83a 	sub	r2,r3,r2
 4013b18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4013b1c:	e0bff617 	ldw	r2,-40(fp)
 4013b20:	10001e26 	beq	r2,zero,4013b9c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4013b24:	e0fffe17 	ldw	r3,-8(fp)
 4013b28:	e0bff617 	ldw	r2,-40(fp)
 4013b2c:	1880022e 	bgeu	r3,r2,4013b38 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4013b30:	e0bffe17 	ldw	r2,-8(fp)
 4013b34:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4013b38:	e0bffc17 	ldw	r2,-16(fp)
 4013b3c:	10c20e04 	addi	r3,r2,2104
 4013b40:	e0bff917 	ldw	r2,-28(fp)
 4013b44:	1885883a 	add	r2,r3,r2
 4013b48:	e1bff617 	ldw	r6,-40(fp)
 4013b4c:	e17ffd17 	ldw	r5,-12(fp)
 4013b50:	1009883a 	mov	r4,r2
 4013b54:	4014f340 	call	4014f34 <memcpy>
      ptr   += n;
 4013b58:	e0fffd17 	ldw	r3,-12(fp)
 4013b5c:	e0bff617 	ldw	r2,-40(fp)
 4013b60:	1885883a 	add	r2,r3,r2
 4013b64:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4013b68:	e0fffe17 	ldw	r3,-8(fp)
 4013b6c:	e0bff617 	ldw	r2,-40(fp)
 4013b70:	1885c83a 	sub	r2,r3,r2
 4013b74:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013b78:	e0fff917 	ldw	r3,-28(fp)
 4013b7c:	e0bff617 	ldw	r2,-40(fp)
 4013b80:	1885883a 	add	r2,r3,r2
 4013b84:	10c1ffcc 	andi	r3,r2,2047
 4013b88:	e0bffc17 	ldw	r2,-16(fp)
 4013b8c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013b90:	e0bffe17 	ldw	r2,-8(fp)
 4013b94:	00bfc716 	blt	zero,r2,4013ab4 <__alt_data_end+0xffff3ab4>
 4013b98:	00000106 	br	4013ba0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4013b9c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013ba0:	0005303a 	rdctl	r2,status
 4013ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013ba8:	e0fffb17 	ldw	r3,-20(fp)
 4013bac:	00bfff84 	movi	r2,-2
 4013bb0:	1884703a 	and	r2,r3,r2
 4013bb4:	1001703a 	wrctl	status,r2
  
  return context;
 4013bb8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4013bbc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013bc0:	e0bffc17 	ldw	r2,-16(fp)
 4013bc4:	10800817 	ldw	r2,32(r2)
 4013bc8:	10c00094 	ori	r3,r2,2
 4013bcc:	e0bffc17 	ldw	r2,-16(fp)
 4013bd0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013bd4:	e0bffc17 	ldw	r2,-16(fp)
 4013bd8:	10800017 	ldw	r2,0(r2)
 4013bdc:	10800104 	addi	r2,r2,4
 4013be0:	1007883a 	mov	r3,r2
 4013be4:	e0bffc17 	ldw	r2,-16(fp)
 4013be8:	10800817 	ldw	r2,32(r2)
 4013bec:	18800035 	stwio	r2,0(r3)
 4013bf0:	e0bffa17 	ldw	r2,-24(fp)
 4013bf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013bf8:	e0bff817 	ldw	r2,-32(fp)
 4013bfc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4013c00:	e0bffe17 	ldw	r2,-8(fp)
 4013c04:	0080100e 	bge	zero,r2,4013c48 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4013c08:	e0bfff17 	ldw	r2,-4(fp)
 4013c0c:	1090000c 	andi	r2,r2,16384
 4013c10:	1000101e 	bne	r2,zero,4013c54 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4013c14:	0001883a 	nop
 4013c18:	e0bffc17 	ldw	r2,-16(fp)
 4013c1c:	10c00d17 	ldw	r3,52(r2)
 4013c20:	e0bff517 	ldw	r2,-44(fp)
 4013c24:	1880051e 	bne	r3,r2,4013c3c <altera_avalon_jtag_uart_write+0x1b8>
 4013c28:	e0bffc17 	ldw	r2,-16(fp)
 4013c2c:	10c00917 	ldw	r3,36(r2)
 4013c30:	e0bffc17 	ldw	r2,-16(fp)
 4013c34:	10800117 	ldw	r2,4(r2)
 4013c38:	18bff736 	bltu	r3,r2,4013c18 <__alt_data_end+0xffff3c18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4013c3c:	e0bffc17 	ldw	r2,-16(fp)
 4013c40:	10800917 	ldw	r2,36(r2)
 4013c44:	1000051e 	bne	r2,zero,4013c5c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4013c48:	e0bffe17 	ldw	r2,-8(fp)
 4013c4c:	00bfd016 	blt	zero,r2,4013b90 <__alt_data_end+0xffff3b90>
 4013c50:	00000306 	br	4013c60 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4013c54:	0001883a 	nop
 4013c58:	00000106 	br	4013c60 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4013c5c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4013c60:	e0fffd17 	ldw	r3,-12(fp)
 4013c64:	e0bff717 	ldw	r2,-36(fp)
 4013c68:	18800426 	beq	r3,r2,4013c7c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4013c6c:	e0fffd17 	ldw	r3,-12(fp)
 4013c70:	e0bff717 	ldw	r2,-36(fp)
 4013c74:	1885c83a 	sub	r2,r3,r2
 4013c78:	00000606 	br	4013c94 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4013c7c:	e0bfff17 	ldw	r2,-4(fp)
 4013c80:	1090000c 	andi	r2,r2,16384
 4013c84:	10000226 	beq	r2,zero,4013c90 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4013c88:	00bffd44 	movi	r2,-11
 4013c8c:	00000106 	br	4013c94 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4013c90:	00bffec4 	movi	r2,-5
}
 4013c94:	e037883a 	mov	sp,fp
 4013c98:	dfc00117 	ldw	ra,4(sp)
 4013c9c:	df000017 	ldw	fp,0(sp)
 4013ca0:	dec00204 	addi	sp,sp,8
 4013ca4:	f800283a 	ret

04013ca8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4013ca8:	defffa04 	addi	sp,sp,-24
 4013cac:	dfc00515 	stw	ra,20(sp)
 4013cb0:	df000415 	stw	fp,16(sp)
 4013cb4:	df000404 	addi	fp,sp,16
 4013cb8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4013cbc:	0007883a 	mov	r3,zero
 4013cc0:	e0bfff17 	ldw	r2,-4(fp)
 4013cc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4013cc8:	e0bfff17 	ldw	r2,-4(fp)
 4013ccc:	10800104 	addi	r2,r2,4
 4013cd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013cd4:	0005303a 	rdctl	r2,status
 4013cd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013cdc:	e0fffd17 	ldw	r3,-12(fp)
 4013ce0:	00bfff84 	movi	r2,-2
 4013ce4:	1884703a 	and	r2,r3,r2
 4013ce8:	1001703a 	wrctl	status,r2
  
  return context;
 4013cec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4013cf0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4013cf4:	4014bd80 	call	4014bd8 <alt_tick>
 4013cf8:	e0bffc17 	ldw	r2,-16(fp)
 4013cfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013d00:	e0bffe17 	ldw	r2,-8(fp)
 4013d04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4013d08:	0001883a 	nop
 4013d0c:	e037883a 	mov	sp,fp
 4013d10:	dfc00117 	ldw	ra,4(sp)
 4013d14:	df000017 	ldw	fp,0(sp)
 4013d18:	dec00204 	addi	sp,sp,8
 4013d1c:	f800283a 	ret

04013d20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4013d20:	defff804 	addi	sp,sp,-32
 4013d24:	dfc00715 	stw	ra,28(sp)
 4013d28:	df000615 	stw	fp,24(sp)
 4013d2c:	df000604 	addi	fp,sp,24
 4013d30:	e13ffc15 	stw	r4,-16(fp)
 4013d34:	e17ffd15 	stw	r5,-12(fp)
 4013d38:	e1bffe15 	stw	r6,-8(fp)
 4013d3c:	e1ffff15 	stw	r7,-4(fp)
 4013d40:	e0bfff17 	ldw	r2,-4(fp)
 4013d44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4013d48:	d0a51117 	ldw	r2,-27580(gp)
 4013d4c:	1000021e 	bne	r2,zero,4013d58 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4013d50:	e0bffb17 	ldw	r2,-20(fp)
 4013d54:	d0a51115 	stw	r2,-27580(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4013d58:	e0bffc17 	ldw	r2,-16(fp)
 4013d5c:	10800104 	addi	r2,r2,4
 4013d60:	00c001c4 	movi	r3,7
 4013d64:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4013d68:	d8000015 	stw	zero,0(sp)
 4013d6c:	e1fffc17 	ldw	r7,-16(fp)
 4013d70:	01810074 	movhi	r6,1025
 4013d74:	318f2a04 	addi	r6,r6,15528
 4013d78:	e17ffe17 	ldw	r5,-8(fp)
 4013d7c:	e13ffd17 	ldw	r4,-12(fp)
 4013d80:	4010fd80 	call	4010fd8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4013d84:	0001883a 	nop
 4013d88:	e037883a 	mov	sp,fp
 4013d8c:	dfc00117 	ldw	ra,4(sp)
 4013d90:	df000017 	ldw	fp,0(sp)
 4013d94:	dec00204 	addi	sp,sp,8
 4013d98:	f800283a 	ret

04013d9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4013d9c:	defff504 	addi	sp,sp,-44
 4013da0:	df000a15 	stw	fp,40(sp)
 4013da4:	df000a04 	addi	fp,sp,40
 4013da8:	e13ffc15 	stw	r4,-16(fp)
 4013dac:	e17ffd15 	stw	r5,-12(fp)
 4013db0:	e1bffe15 	stw	r6,-8(fp)
 4013db4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4013db8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4013dbc:	d0a51117 	ldw	r2,-27580(gp)
  
  if (alt_ticks_per_second ())
 4013dc0:	10003c26 	beq	r2,zero,4013eb4 <alt_alarm_start+0x118>
  {
    if (alarm)
 4013dc4:	e0bffc17 	ldw	r2,-16(fp)
 4013dc8:	10003826 	beq	r2,zero,4013eac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4013dcc:	e0bffc17 	ldw	r2,-16(fp)
 4013dd0:	e0fffe17 	ldw	r3,-8(fp)
 4013dd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4013dd8:	e0bffc17 	ldw	r2,-16(fp)
 4013ddc:	e0ffff17 	ldw	r3,-4(fp)
 4013de0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013de4:	0005303a 	rdctl	r2,status
 4013de8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013dec:	e0fff917 	ldw	r3,-28(fp)
 4013df0:	00bfff84 	movi	r2,-2
 4013df4:	1884703a 	and	r2,r3,r2
 4013df8:	1001703a 	wrctl	status,r2
  
  return context;
 4013dfc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4013e00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4013e04:	d0a51217 	ldw	r2,-27576(gp)
      
      current_nticks = alt_nticks();
 4013e08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4013e0c:	e0fffd17 	ldw	r3,-12(fp)
 4013e10:	e0bff617 	ldw	r2,-40(fp)
 4013e14:	1885883a 	add	r2,r3,r2
 4013e18:	10c00044 	addi	r3,r2,1
 4013e1c:	e0bffc17 	ldw	r2,-16(fp)
 4013e20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4013e24:	e0bffc17 	ldw	r2,-16(fp)
 4013e28:	10c00217 	ldw	r3,8(r2)
 4013e2c:	e0bff617 	ldw	r2,-40(fp)
 4013e30:	1880042e 	bgeu	r3,r2,4013e44 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4013e34:	e0bffc17 	ldw	r2,-16(fp)
 4013e38:	00c00044 	movi	r3,1
 4013e3c:	10c00405 	stb	r3,16(r2)
 4013e40:	00000206 	br	4013e4c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4013e44:	e0bffc17 	ldw	r2,-16(fp)
 4013e48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4013e4c:	e0bffc17 	ldw	r2,-16(fp)
 4013e50:	d0e00c04 	addi	r3,gp,-32720
 4013e54:	e0fffa15 	stw	r3,-24(fp)
 4013e58:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013e5c:	e0bffb17 	ldw	r2,-20(fp)
 4013e60:	e0fffa17 	ldw	r3,-24(fp)
 4013e64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4013e68:	e0bffa17 	ldw	r2,-24(fp)
 4013e6c:	10c00017 	ldw	r3,0(r2)
 4013e70:	e0bffb17 	ldw	r2,-20(fp)
 4013e74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4013e78:	e0bffa17 	ldw	r2,-24(fp)
 4013e7c:	10800017 	ldw	r2,0(r2)
 4013e80:	e0fffb17 	ldw	r3,-20(fp)
 4013e84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4013e88:	e0bffa17 	ldw	r2,-24(fp)
 4013e8c:	e0fffb17 	ldw	r3,-20(fp)
 4013e90:	10c00015 	stw	r3,0(r2)
 4013e94:	e0bff817 	ldw	r2,-32(fp)
 4013e98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e9c:	e0bff717 	ldw	r2,-36(fp)
 4013ea0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4013ea4:	0005883a 	mov	r2,zero
 4013ea8:	00000306 	br	4013eb8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4013eac:	00bffa84 	movi	r2,-22
 4013eb0:	00000106 	br	4013eb8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4013eb4:	00bfde84 	movi	r2,-134
  }
}
 4013eb8:	e037883a 	mov	sp,fp
 4013ebc:	df000017 	ldw	fp,0(sp)
 4013ec0:	dec00104 	addi	sp,sp,4
 4013ec4:	f800283a 	ret

04013ec8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4013ec8:	defffa04 	addi	sp,sp,-24
 4013ecc:	dfc00515 	stw	ra,20(sp)
 4013ed0:	df000415 	stw	fp,16(sp)
 4013ed4:	df000404 	addi	fp,sp,16
 4013ed8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4013edc:	00800244 	movi	r2,9
 4013ee0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4013ee4:	014003f4 	movhi	r5,15
 4013ee8:	29509004 	addi	r5,r5,16960
 4013eec:	e13ffd17 	ldw	r4,-12(fp)
 4013ef0:	4010fb00 	call	4010fb0 <__mulsi3>
 4013ef4:	100b883a 	mov	r5,r2
 4013ef8:	01013174 	movhi	r4,1221
 4013efc:	212d0004 	addi	r4,r4,-19456
 4013f00:	4010ef40 	call	4010ef4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4013f04:	100b883a 	mov	r5,r2
 4013f08:	01200034 	movhi	r4,32768
 4013f0c:	213fffc4 	addi	r4,r4,-1
 4013f10:	4010ef40 	call	4010ef4 <__udivsi3>
 4013f14:	100b883a 	mov	r5,r2
 4013f18:	e13fff17 	ldw	r4,-4(fp)
 4013f1c:	4010ef40 	call	4010ef4 <__udivsi3>
 4013f20:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4013f24:	e0bffe17 	ldw	r2,-8(fp)
 4013f28:	10002a26 	beq	r2,zero,4013fd4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4013f2c:	e03ffc15 	stw	zero,-16(fp)
 4013f30:	00001706 	br	4013f90 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4013f34:	00a00034 	movhi	r2,32768
 4013f38:	10bfffc4 	addi	r2,r2,-1
 4013f3c:	10bfffc4 	addi	r2,r2,-1
 4013f40:	103ffe1e 	bne	r2,zero,4013f3c <__alt_data_end+0xffff3f3c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4013f44:	014003f4 	movhi	r5,15
 4013f48:	29509004 	addi	r5,r5,16960
 4013f4c:	e13ffd17 	ldw	r4,-12(fp)
 4013f50:	4010fb00 	call	4010fb0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4013f54:	100b883a 	mov	r5,r2
 4013f58:	01013174 	movhi	r4,1221
 4013f5c:	212d0004 	addi	r4,r4,-19456
 4013f60:	4010ef40 	call	4010ef4 <__udivsi3>
 4013f64:	100b883a 	mov	r5,r2
 4013f68:	01200034 	movhi	r4,32768
 4013f6c:	213fffc4 	addi	r4,r4,-1
 4013f70:	4010ef40 	call	4010ef4 <__udivsi3>
 4013f74:	1007883a 	mov	r3,r2
 4013f78:	e0bfff17 	ldw	r2,-4(fp)
 4013f7c:	10c5c83a 	sub	r2,r2,r3
 4013f80:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4013f84:	e0bffc17 	ldw	r2,-16(fp)
 4013f88:	10800044 	addi	r2,r2,1
 4013f8c:	e0bffc15 	stw	r2,-16(fp)
 4013f90:	e0fffc17 	ldw	r3,-16(fp)
 4013f94:	e0bffe17 	ldw	r2,-8(fp)
 4013f98:	18bfe616 	blt	r3,r2,4013f34 <__alt_data_end+0xffff3f34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4013f9c:	014003f4 	movhi	r5,15
 4013fa0:	29509004 	addi	r5,r5,16960
 4013fa4:	e13ffd17 	ldw	r4,-12(fp)
 4013fa8:	4010fb00 	call	4010fb0 <__mulsi3>
 4013fac:	100b883a 	mov	r5,r2
 4013fb0:	01013174 	movhi	r4,1221
 4013fb4:	212d0004 	addi	r4,r4,-19456
 4013fb8:	4010ef40 	call	4010ef4 <__udivsi3>
 4013fbc:	e17fff17 	ldw	r5,-4(fp)
 4013fc0:	1009883a 	mov	r4,r2
 4013fc4:	4010fb00 	call	4010fb0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4013fc8:	10bfffc4 	addi	r2,r2,-1
 4013fcc:	103ffe1e 	bne	r2,zero,4013fc8 <__alt_data_end+0xffff3fc8>
 4013fd0:	00000d06 	br	4014008 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4013fd4:	014003f4 	movhi	r5,15
 4013fd8:	29509004 	addi	r5,r5,16960
 4013fdc:	e13ffd17 	ldw	r4,-12(fp)
 4013fe0:	4010fb00 	call	4010fb0 <__mulsi3>
 4013fe4:	100b883a 	mov	r5,r2
 4013fe8:	01013174 	movhi	r4,1221
 4013fec:	212d0004 	addi	r4,r4,-19456
 4013ff0:	4010ef40 	call	4010ef4 <__udivsi3>
 4013ff4:	e17fff17 	ldw	r5,-4(fp)
 4013ff8:	1009883a 	mov	r4,r2
 4013ffc:	4010fb00 	call	4010fb0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4014000:	10bfffc4 	addi	r2,r2,-1
 4014004:	00bffe16 	blt	zero,r2,4014000 <__alt_data_end+0xffff4000>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4014008:	0005883a 	mov	r2,zero
}
 401400c:	e037883a 	mov	sp,fp
 4014010:	dfc00117 	ldw	ra,4(sp)
 4014014:	df000017 	ldw	fp,0(sp)
 4014018:	dec00204 	addi	sp,sp,8
 401401c:	f800283a 	ret

04014020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014020:	defffe04 	addi	sp,sp,-8
 4014024:	dfc00115 	stw	ra,4(sp)
 4014028:	df000015 	stw	fp,0(sp)
 401402c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014030:	d0a00b17 	ldw	r2,-32724(gp)
 4014034:	10000326 	beq	r2,zero,4014044 <alt_get_errno+0x24>
 4014038:	d0a00b17 	ldw	r2,-32724(gp)
 401403c:	103ee83a 	callr	r2
 4014040:	00000106 	br	4014048 <alt_get_errno+0x28>
 4014044:	d0a50b04 	addi	r2,gp,-27604
}
 4014048:	e037883a 	mov	sp,fp
 401404c:	dfc00117 	ldw	ra,4(sp)
 4014050:	df000017 	ldw	fp,0(sp)
 4014054:	dec00204 	addi	sp,sp,8
 4014058:	f800283a 	ret

0401405c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401405c:	defffb04 	addi	sp,sp,-20
 4014060:	dfc00415 	stw	ra,16(sp)
 4014064:	df000315 	stw	fp,12(sp)
 4014068:	df000304 	addi	fp,sp,12
 401406c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4014070:	e0bfff17 	ldw	r2,-4(fp)
 4014074:	10000816 	blt	r2,zero,4014098 <close+0x3c>
 4014078:	01400304 	movi	r5,12
 401407c:	e13fff17 	ldw	r4,-4(fp)
 4014080:	4010fb00 	call	4010fb0 <__mulsi3>
 4014084:	1007883a 	mov	r3,r2
 4014088:	00810074 	movhi	r2,1025
 401408c:	1099ba04 	addi	r2,r2,26344
 4014090:	1885883a 	add	r2,r3,r2
 4014094:	00000106 	br	401409c <close+0x40>
 4014098:	0005883a 	mov	r2,zero
 401409c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40140a0:	e0bffd17 	ldw	r2,-12(fp)
 40140a4:	10001926 	beq	r2,zero,401410c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40140a8:	e0bffd17 	ldw	r2,-12(fp)
 40140ac:	10800017 	ldw	r2,0(r2)
 40140b0:	10800417 	ldw	r2,16(r2)
 40140b4:	10000626 	beq	r2,zero,40140d0 <close+0x74>
 40140b8:	e0bffd17 	ldw	r2,-12(fp)
 40140bc:	10800017 	ldw	r2,0(r2)
 40140c0:	10800417 	ldw	r2,16(r2)
 40140c4:	e13ffd17 	ldw	r4,-12(fp)
 40140c8:	103ee83a 	callr	r2
 40140cc:	00000106 	br	40140d4 <close+0x78>
 40140d0:	0005883a 	mov	r2,zero
 40140d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40140d8:	e13fff17 	ldw	r4,-4(fp)
 40140dc:	4014ab80 	call	4014ab8 <alt_release_fd>
    if (rval < 0)
 40140e0:	e0bffe17 	ldw	r2,-8(fp)
 40140e4:	1000070e 	bge	r2,zero,4014104 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 40140e8:	40140200 	call	4014020 <alt_get_errno>
 40140ec:	1007883a 	mov	r3,r2
 40140f0:	e0bffe17 	ldw	r2,-8(fp)
 40140f4:	0085c83a 	sub	r2,zero,r2
 40140f8:	18800015 	stw	r2,0(r3)
      return -1;
 40140fc:	00bfffc4 	movi	r2,-1
 4014100:	00000706 	br	4014120 <close+0xc4>
    }
    return 0;
 4014104:	0005883a 	mov	r2,zero
 4014108:	00000506 	br	4014120 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401410c:	40140200 	call	4014020 <alt_get_errno>
 4014110:	1007883a 	mov	r3,r2
 4014114:	00801444 	movi	r2,81
 4014118:	18800015 	stw	r2,0(r3)
    return -1;
 401411c:	00bfffc4 	movi	r2,-1
  }
}
 4014120:	e037883a 	mov	sp,fp
 4014124:	dfc00117 	ldw	ra,4(sp)
 4014128:	df000017 	ldw	fp,0(sp)
 401412c:	dec00204 	addi	sp,sp,8
 4014130:	f800283a 	ret

04014134 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4014134:	deffff04 	addi	sp,sp,-4
 4014138:	df000015 	stw	fp,0(sp)
 401413c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4014140:	0001883a 	nop
 4014144:	e037883a 	mov	sp,fp
 4014148:	df000017 	ldw	fp,0(sp)
 401414c:	dec00104 	addi	sp,sp,4
 4014150:	f800283a 	ret

04014154 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4014154:	defffc04 	addi	sp,sp,-16
 4014158:	df000315 	stw	fp,12(sp)
 401415c:	df000304 	addi	fp,sp,12
 4014160:	e13ffd15 	stw	r4,-12(fp)
 4014164:	e17ffe15 	stw	r5,-8(fp)
 4014168:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401416c:	e0bfff17 	ldw	r2,-4(fp)
}
 4014170:	e037883a 	mov	sp,fp
 4014174:	df000017 	ldw	fp,0(sp)
 4014178:	dec00104 	addi	sp,sp,4
 401417c:	f800283a 	ret

04014180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014180:	defffe04 	addi	sp,sp,-8
 4014184:	dfc00115 	stw	ra,4(sp)
 4014188:	df000015 	stw	fp,0(sp)
 401418c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014190:	d0a00b17 	ldw	r2,-32724(gp)
 4014194:	10000326 	beq	r2,zero,40141a4 <alt_get_errno+0x24>
 4014198:	d0a00b17 	ldw	r2,-32724(gp)
 401419c:	103ee83a 	callr	r2
 40141a0:	00000106 	br	40141a8 <alt_get_errno+0x28>
 40141a4:	d0a50b04 	addi	r2,gp,-27604
}
 40141a8:	e037883a 	mov	sp,fp
 40141ac:	dfc00117 	ldw	ra,4(sp)
 40141b0:	df000017 	ldw	fp,0(sp)
 40141b4:	dec00204 	addi	sp,sp,8
 40141b8:	f800283a 	ret

040141bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40141bc:	defffa04 	addi	sp,sp,-24
 40141c0:	dfc00515 	stw	ra,20(sp)
 40141c4:	df000415 	stw	fp,16(sp)
 40141c8:	df000404 	addi	fp,sp,16
 40141cc:	e13ffe15 	stw	r4,-8(fp)
 40141d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40141d4:	e0bffe17 	ldw	r2,-8(fp)
 40141d8:	10000326 	beq	r2,zero,40141e8 <alt_dev_llist_insert+0x2c>
 40141dc:	e0bffe17 	ldw	r2,-8(fp)
 40141e0:	10800217 	ldw	r2,8(r2)
 40141e4:	1000061e 	bne	r2,zero,4014200 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40141e8:	40141800 	call	4014180 <alt_get_errno>
 40141ec:	1007883a 	mov	r3,r2
 40141f0:	00800584 	movi	r2,22
 40141f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40141f8:	00bffa84 	movi	r2,-22
 40141fc:	00001306 	br	401424c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4014200:	e0bffe17 	ldw	r2,-8(fp)
 4014204:	e0ffff17 	ldw	r3,-4(fp)
 4014208:	e0fffc15 	stw	r3,-16(fp)
 401420c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014210:	e0bffd17 	ldw	r2,-12(fp)
 4014214:	e0fffc17 	ldw	r3,-16(fp)
 4014218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401421c:	e0bffc17 	ldw	r2,-16(fp)
 4014220:	10c00017 	ldw	r3,0(r2)
 4014224:	e0bffd17 	ldw	r2,-12(fp)
 4014228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401422c:	e0bffc17 	ldw	r2,-16(fp)
 4014230:	10800017 	ldw	r2,0(r2)
 4014234:	e0fffd17 	ldw	r3,-12(fp)
 4014238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401423c:	e0bffc17 	ldw	r2,-16(fp)
 4014240:	e0fffd17 	ldw	r3,-12(fp)
 4014244:	10c00015 	stw	r3,0(r2)

  return 0;  
 4014248:	0005883a 	mov	r2,zero
}
 401424c:	e037883a 	mov	sp,fp
 4014250:	dfc00117 	ldw	ra,4(sp)
 4014254:	df000017 	ldw	fp,0(sp)
 4014258:	dec00204 	addi	sp,sp,8
 401425c:	f800283a 	ret

04014260 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4014260:	defffd04 	addi	sp,sp,-12
 4014264:	dfc00215 	stw	ra,8(sp)
 4014268:	df000115 	stw	fp,4(sp)
 401426c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4014270:	00810074 	movhi	r2,1025
 4014274:	1094c804 	addi	r2,r2,21280
 4014278:	e0bfff15 	stw	r2,-4(fp)
 401427c:	00000606 	br	4014298 <_do_ctors+0x38>
        (*ctor) (); 
 4014280:	e0bfff17 	ldw	r2,-4(fp)
 4014284:	10800017 	ldw	r2,0(r2)
 4014288:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401428c:	e0bfff17 	ldw	r2,-4(fp)
 4014290:	10bfff04 	addi	r2,r2,-4
 4014294:	e0bfff15 	stw	r2,-4(fp)
 4014298:	e0ffff17 	ldw	r3,-4(fp)
 401429c:	00810074 	movhi	r2,1025
 40142a0:	1094c904 	addi	r2,r2,21284
 40142a4:	18bff62e 	bgeu	r3,r2,4014280 <__alt_data_end+0xffff4280>
        (*ctor) (); 
}
 40142a8:	0001883a 	nop
 40142ac:	e037883a 	mov	sp,fp
 40142b0:	dfc00117 	ldw	ra,4(sp)
 40142b4:	df000017 	ldw	fp,0(sp)
 40142b8:	dec00204 	addi	sp,sp,8
 40142bc:	f800283a 	ret

040142c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40142c0:	defffd04 	addi	sp,sp,-12
 40142c4:	dfc00215 	stw	ra,8(sp)
 40142c8:	df000115 	stw	fp,4(sp)
 40142cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40142d0:	00810074 	movhi	r2,1025
 40142d4:	1094c804 	addi	r2,r2,21280
 40142d8:	e0bfff15 	stw	r2,-4(fp)
 40142dc:	00000606 	br	40142f8 <_do_dtors+0x38>
        (*dtor) (); 
 40142e0:	e0bfff17 	ldw	r2,-4(fp)
 40142e4:	10800017 	ldw	r2,0(r2)
 40142e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40142ec:	e0bfff17 	ldw	r2,-4(fp)
 40142f0:	10bfff04 	addi	r2,r2,-4
 40142f4:	e0bfff15 	stw	r2,-4(fp)
 40142f8:	e0ffff17 	ldw	r3,-4(fp)
 40142fc:	00810074 	movhi	r2,1025
 4014300:	1094c904 	addi	r2,r2,21284
 4014304:	18bff62e 	bgeu	r3,r2,40142e0 <__alt_data_end+0xffff42e0>
        (*dtor) (); 
}
 4014308:	0001883a 	nop
 401430c:	e037883a 	mov	sp,fp
 4014310:	dfc00117 	ldw	ra,4(sp)
 4014314:	df000017 	ldw	fp,0(sp)
 4014318:	dec00204 	addi	sp,sp,8
 401431c:	f800283a 	ret

04014320 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4014320:	defffa04 	addi	sp,sp,-24
 4014324:	dfc00515 	stw	ra,20(sp)
 4014328:	df000415 	stw	fp,16(sp)
 401432c:	df000404 	addi	fp,sp,16
 4014330:	e13ffe15 	stw	r4,-8(fp)
 4014334:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4014338:	e0bfff17 	ldw	r2,-4(fp)
 401433c:	10800017 	ldw	r2,0(r2)
 4014340:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4014344:	e13ffe17 	ldw	r4,-8(fp)
 4014348:	401071c0 	call	401071c <strlen>
 401434c:	10800044 	addi	r2,r2,1
 4014350:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4014354:	00000d06 	br	401438c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4014358:	e0bffc17 	ldw	r2,-16(fp)
 401435c:	10800217 	ldw	r2,8(r2)
 4014360:	e0fffd17 	ldw	r3,-12(fp)
 4014364:	180d883a 	mov	r6,r3
 4014368:	e17ffe17 	ldw	r5,-8(fp)
 401436c:	1009883a 	mov	r4,r2
 4014370:	4014f040 	call	4014f04 <memcmp>
 4014374:	1000021e 	bne	r2,zero,4014380 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4014378:	e0bffc17 	ldw	r2,-16(fp)
 401437c:	00000706 	br	401439c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4014380:	e0bffc17 	ldw	r2,-16(fp)
 4014384:	10800017 	ldw	r2,0(r2)
 4014388:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401438c:	e0fffc17 	ldw	r3,-16(fp)
 4014390:	e0bfff17 	ldw	r2,-4(fp)
 4014394:	18bff01e 	bne	r3,r2,4014358 <__alt_data_end+0xffff4358>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4014398:	0005883a 	mov	r2,zero
}
 401439c:	e037883a 	mov	sp,fp
 40143a0:	dfc00117 	ldw	ra,4(sp)
 40143a4:	df000017 	ldw	fp,0(sp)
 40143a8:	dec00204 	addi	sp,sp,8
 40143ac:	f800283a 	ret

040143b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40143b0:	deffff04 	addi	sp,sp,-4
 40143b4:	df000015 	stw	fp,0(sp)
 40143b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40143bc:	0001883a 	nop
 40143c0:	e037883a 	mov	sp,fp
 40143c4:	df000017 	ldw	fp,0(sp)
 40143c8:	dec00104 	addi	sp,sp,4
 40143cc:	f800283a 	ret

040143d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40143d0:	defffe04 	addi	sp,sp,-8
 40143d4:	df000115 	stw	fp,4(sp)
 40143d8:	df000104 	addi	fp,sp,4
 40143dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40143e0:	e0bfff17 	ldw	r2,-4(fp)
 40143e4:	10bffe84 	addi	r2,r2,-6
 40143e8:	10c00428 	cmpgeui	r3,r2,16
 40143ec:	18001a1e 	bne	r3,zero,4014458 <alt_exception_cause_generated_bad_addr+0x88>
 40143f0:	100690ba 	slli	r3,r2,2
 40143f4:	00810074 	movhi	r2,1025
 40143f8:	10910204 	addi	r2,r2,17416
 40143fc:	1885883a 	add	r2,r3,r2
 4014400:	10800017 	ldw	r2,0(r2)
 4014404:	1000683a 	jmp	r2
 4014408:	04014448 	cmpgei	r16,zero,1297
 401440c:	04014448 	cmpgei	r16,zero,1297
 4014410:	04014458 	cmpnei	r16,zero,1297
 4014414:	04014458 	cmpnei	r16,zero,1297
 4014418:	04014458 	cmpnei	r16,zero,1297
 401441c:	04014448 	cmpgei	r16,zero,1297
 4014420:	04014450 	cmplti	r16,zero,1297
 4014424:	04014458 	cmpnei	r16,zero,1297
 4014428:	04014448 	cmpgei	r16,zero,1297
 401442c:	04014448 	cmpgei	r16,zero,1297
 4014430:	04014458 	cmpnei	r16,zero,1297
 4014434:	04014448 	cmpgei	r16,zero,1297
 4014438:	04014450 	cmplti	r16,zero,1297
 401443c:	04014458 	cmpnei	r16,zero,1297
 4014440:	04014458 	cmpnei	r16,zero,1297
 4014444:	04014448 	cmpgei	r16,zero,1297
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4014448:	00800044 	movi	r2,1
 401444c:	00000306 	br	401445c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4014450:	0005883a 	mov	r2,zero
 4014454:	00000106 	br	401445c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4014458:	0005883a 	mov	r2,zero
  }
}
 401445c:	e037883a 	mov	sp,fp
 4014460:	df000017 	ldw	fp,0(sp)
 4014464:	dec00104 	addi	sp,sp,4
 4014468:	f800283a 	ret

0401446c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401446c:	defff804 	addi	sp,sp,-32
 4014470:	dfc00715 	stw	ra,28(sp)
 4014474:	df000615 	stw	fp,24(sp)
 4014478:	dc000515 	stw	r16,20(sp)
 401447c:	df000604 	addi	fp,sp,24
 4014480:	e13ffb15 	stw	r4,-20(fp)
 4014484:	e17ffc15 	stw	r5,-16(fp)
 4014488:	e1bffd15 	stw	r6,-12(fp)
 401448c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4014490:	e1bffe17 	ldw	r6,-8(fp)
 4014494:	e17ffd17 	ldw	r5,-12(fp)
 4014498:	e13ffc17 	ldw	r4,-16(fp)
 401449c:	40146f40 	call	40146f4 <open>
 40144a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40144a4:	e0bffa17 	ldw	r2,-24(fp)
 40144a8:	10002216 	blt	r2,zero,4014534 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40144ac:	04010074 	movhi	r16,1025
 40144b0:	8419ba04 	addi	r16,r16,26344
 40144b4:	e0bffa17 	ldw	r2,-24(fp)
 40144b8:	01400304 	movi	r5,12
 40144bc:	1009883a 	mov	r4,r2
 40144c0:	4010fb00 	call	4010fb0 <__mulsi3>
 40144c4:	8085883a 	add	r2,r16,r2
 40144c8:	10c00017 	ldw	r3,0(r2)
 40144cc:	e0bffb17 	ldw	r2,-20(fp)
 40144d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40144d4:	04010074 	movhi	r16,1025
 40144d8:	8419ba04 	addi	r16,r16,26344
 40144dc:	e0bffa17 	ldw	r2,-24(fp)
 40144e0:	01400304 	movi	r5,12
 40144e4:	1009883a 	mov	r4,r2
 40144e8:	4010fb00 	call	4010fb0 <__mulsi3>
 40144ec:	8085883a 	add	r2,r16,r2
 40144f0:	10800104 	addi	r2,r2,4
 40144f4:	10c00017 	ldw	r3,0(r2)
 40144f8:	e0bffb17 	ldw	r2,-20(fp)
 40144fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4014500:	04010074 	movhi	r16,1025
 4014504:	8419ba04 	addi	r16,r16,26344
 4014508:	e0bffa17 	ldw	r2,-24(fp)
 401450c:	01400304 	movi	r5,12
 4014510:	1009883a 	mov	r4,r2
 4014514:	4010fb00 	call	4010fb0 <__mulsi3>
 4014518:	8085883a 	add	r2,r16,r2
 401451c:	10800204 	addi	r2,r2,8
 4014520:	10c00017 	ldw	r3,0(r2)
 4014524:	e0bffb17 	ldw	r2,-20(fp)
 4014528:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401452c:	e13ffa17 	ldw	r4,-24(fp)
 4014530:	4014ab80 	call	4014ab8 <alt_release_fd>
  }
} 
 4014534:	0001883a 	nop
 4014538:	e6ffff04 	addi	sp,fp,-4
 401453c:	dfc00217 	ldw	ra,8(sp)
 4014540:	df000117 	ldw	fp,4(sp)
 4014544:	dc000017 	ldw	r16,0(sp)
 4014548:	dec00304 	addi	sp,sp,12
 401454c:	f800283a 	ret

04014550 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4014550:	defffb04 	addi	sp,sp,-20
 4014554:	dfc00415 	stw	ra,16(sp)
 4014558:	df000315 	stw	fp,12(sp)
 401455c:	df000304 	addi	fp,sp,12
 4014560:	e13ffd15 	stw	r4,-12(fp)
 4014564:	e17ffe15 	stw	r5,-8(fp)
 4014568:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401456c:	01c07fc4 	movi	r7,511
 4014570:	01800044 	movi	r6,1
 4014574:	e17ffd17 	ldw	r5,-12(fp)
 4014578:	01010074 	movhi	r4,1025
 401457c:	2119bd04 	addi	r4,r4,26356
 4014580:	401446c0 	call	401446c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4014584:	01c07fc4 	movi	r7,511
 4014588:	000d883a 	mov	r6,zero
 401458c:	e17ffe17 	ldw	r5,-8(fp)
 4014590:	01010074 	movhi	r4,1025
 4014594:	2119ba04 	addi	r4,r4,26344
 4014598:	401446c0 	call	401446c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401459c:	01c07fc4 	movi	r7,511
 40145a0:	01800044 	movi	r6,1
 40145a4:	e17fff17 	ldw	r5,-4(fp)
 40145a8:	01010074 	movhi	r4,1025
 40145ac:	2119c004 	addi	r4,r4,26368
 40145b0:	401446c0 	call	401446c <alt_open_fd>
}  
 40145b4:	0001883a 	nop
 40145b8:	e037883a 	mov	sp,fp
 40145bc:	dfc00117 	ldw	ra,4(sp)
 40145c0:	df000017 	ldw	fp,0(sp)
 40145c4:	dec00204 	addi	sp,sp,8
 40145c8:	f800283a 	ret

040145cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40145cc:	defffe04 	addi	sp,sp,-8
 40145d0:	dfc00115 	stw	ra,4(sp)
 40145d4:	df000015 	stw	fp,0(sp)
 40145d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40145dc:	d0a00b17 	ldw	r2,-32724(gp)
 40145e0:	10000326 	beq	r2,zero,40145f0 <alt_get_errno+0x24>
 40145e4:	d0a00b17 	ldw	r2,-32724(gp)
 40145e8:	103ee83a 	callr	r2
 40145ec:	00000106 	br	40145f4 <alt_get_errno+0x28>
 40145f0:	d0a50b04 	addi	r2,gp,-27604
}
 40145f4:	e037883a 	mov	sp,fp
 40145f8:	dfc00117 	ldw	ra,4(sp)
 40145fc:	df000017 	ldw	fp,0(sp)
 4014600:	dec00204 	addi	sp,sp,8
 4014604:	f800283a 	ret

04014608 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4014608:	defffb04 	addi	sp,sp,-20
 401460c:	dfc00415 	stw	ra,16(sp)
 4014610:	df000315 	stw	fp,12(sp)
 4014614:	dc000215 	stw	r16,8(sp)
 4014618:	df000304 	addi	fp,sp,12
 401461c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4014620:	e0bffe17 	ldw	r2,-8(fp)
 4014624:	10800217 	ldw	r2,8(r2)
 4014628:	10d00034 	orhi	r3,r2,16384
 401462c:	e0bffe17 	ldw	r2,-8(fp)
 4014630:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4014634:	e03ffd15 	stw	zero,-12(fp)
 4014638:	00002306 	br	40146c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401463c:	04010074 	movhi	r16,1025
 4014640:	8419ba04 	addi	r16,r16,26344
 4014644:	e0bffd17 	ldw	r2,-12(fp)
 4014648:	01400304 	movi	r5,12
 401464c:	1009883a 	mov	r4,r2
 4014650:	4010fb00 	call	4010fb0 <__mulsi3>
 4014654:	8085883a 	add	r2,r16,r2
 4014658:	10c00017 	ldw	r3,0(r2)
 401465c:	e0bffe17 	ldw	r2,-8(fp)
 4014660:	10800017 	ldw	r2,0(r2)
 4014664:	1880151e 	bne	r3,r2,40146bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4014668:	04010074 	movhi	r16,1025
 401466c:	8419ba04 	addi	r16,r16,26344
 4014670:	e0bffd17 	ldw	r2,-12(fp)
 4014674:	01400304 	movi	r5,12
 4014678:	1009883a 	mov	r4,r2
 401467c:	4010fb00 	call	4010fb0 <__mulsi3>
 4014680:	8085883a 	add	r2,r16,r2
 4014684:	10800204 	addi	r2,r2,8
 4014688:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401468c:	10000b0e 	bge	r2,zero,40146bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4014690:	01400304 	movi	r5,12
 4014694:	e13ffd17 	ldw	r4,-12(fp)
 4014698:	4010fb00 	call	4010fb0 <__mulsi3>
 401469c:	1007883a 	mov	r3,r2
 40146a0:	00810074 	movhi	r2,1025
 40146a4:	1099ba04 	addi	r2,r2,26344
 40146a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40146ac:	e0bffe17 	ldw	r2,-8(fp)
 40146b0:	18800226 	beq	r3,r2,40146bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40146b4:	00bffcc4 	movi	r2,-13
 40146b8:	00000806 	br	40146dc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40146bc:	e0bffd17 	ldw	r2,-12(fp)
 40146c0:	10800044 	addi	r2,r2,1
 40146c4:	e0bffd15 	stw	r2,-12(fp)
 40146c8:	d0a00a17 	ldw	r2,-32728(gp)
 40146cc:	1007883a 	mov	r3,r2
 40146d0:	e0bffd17 	ldw	r2,-12(fp)
 40146d4:	18bfd92e 	bgeu	r3,r2,401463c <__alt_data_end+0xffff463c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40146d8:	0005883a 	mov	r2,zero
}
 40146dc:	e6ffff04 	addi	sp,fp,-4
 40146e0:	dfc00217 	ldw	ra,8(sp)
 40146e4:	df000117 	ldw	fp,4(sp)
 40146e8:	dc000017 	ldw	r16,0(sp)
 40146ec:	dec00304 	addi	sp,sp,12
 40146f0:	f800283a 	ret

040146f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40146f4:	defff604 	addi	sp,sp,-40
 40146f8:	dfc00915 	stw	ra,36(sp)
 40146fc:	df000815 	stw	fp,32(sp)
 4014700:	df000804 	addi	fp,sp,32
 4014704:	e13ffd15 	stw	r4,-12(fp)
 4014708:	e17ffe15 	stw	r5,-8(fp)
 401470c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4014710:	00bfffc4 	movi	r2,-1
 4014714:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4014718:	00bffb44 	movi	r2,-19
 401471c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4014720:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4014724:	d1600804 	addi	r5,gp,-32736
 4014728:	e13ffd17 	ldw	r4,-12(fp)
 401472c:	40143200 	call	4014320 <alt_find_dev>
 4014730:	e0bff815 	stw	r2,-32(fp)
 4014734:	e0bff817 	ldw	r2,-32(fp)
 4014738:	1000051e 	bne	r2,zero,4014750 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401473c:	e13ffd17 	ldw	r4,-12(fp)
 4014740:	4014d040 	call	4014d04 <alt_find_file>
 4014744:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4014748:	00800044 	movi	r2,1
 401474c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4014750:	e0bff817 	ldw	r2,-32(fp)
 4014754:	10002b26 	beq	r2,zero,4014804 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4014758:	e13ff817 	ldw	r4,-32(fp)
 401475c:	4014e0c0 	call	4014e0c <alt_get_fd>
 4014760:	e0bff915 	stw	r2,-28(fp)
 4014764:	e0bff917 	ldw	r2,-28(fp)
 4014768:	1000030e 	bge	r2,zero,4014778 <open+0x84>
    {
      status = index;
 401476c:	e0bff917 	ldw	r2,-28(fp)
 4014770:	e0bffa15 	stw	r2,-24(fp)
 4014774:	00002506 	br	401480c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4014778:	01400304 	movi	r5,12
 401477c:	e13ff917 	ldw	r4,-28(fp)
 4014780:	4010fb00 	call	4010fb0 <__mulsi3>
 4014784:	1007883a 	mov	r3,r2
 4014788:	00810074 	movhi	r2,1025
 401478c:	1099ba04 	addi	r2,r2,26344
 4014790:	1885883a 	add	r2,r3,r2
 4014794:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4014798:	e0fffe17 	ldw	r3,-8(fp)
 401479c:	00900034 	movhi	r2,16384
 40147a0:	10bfffc4 	addi	r2,r2,-1
 40147a4:	1886703a 	and	r3,r3,r2
 40147a8:	e0bffc17 	ldw	r2,-16(fp)
 40147ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40147b0:	e0bffb17 	ldw	r2,-20(fp)
 40147b4:	1000051e 	bne	r2,zero,40147cc <open+0xd8>
 40147b8:	e13ffc17 	ldw	r4,-16(fp)
 40147bc:	40146080 	call	4014608 <alt_file_locked>
 40147c0:	e0bffa15 	stw	r2,-24(fp)
 40147c4:	e0bffa17 	ldw	r2,-24(fp)
 40147c8:	10001016 	blt	r2,zero,401480c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40147cc:	e0bff817 	ldw	r2,-32(fp)
 40147d0:	10800317 	ldw	r2,12(r2)
 40147d4:	10000826 	beq	r2,zero,40147f8 <open+0x104>
 40147d8:	e0bff817 	ldw	r2,-32(fp)
 40147dc:	10800317 	ldw	r2,12(r2)
 40147e0:	e1ffff17 	ldw	r7,-4(fp)
 40147e4:	e1bffe17 	ldw	r6,-8(fp)
 40147e8:	e17ffd17 	ldw	r5,-12(fp)
 40147ec:	e13ffc17 	ldw	r4,-16(fp)
 40147f0:	103ee83a 	callr	r2
 40147f4:	00000106 	br	40147fc <open+0x108>
 40147f8:	0005883a 	mov	r2,zero
 40147fc:	e0bffa15 	stw	r2,-24(fp)
 4014800:	00000206 	br	401480c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4014804:	00bffb44 	movi	r2,-19
 4014808:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401480c:	e0bffa17 	ldw	r2,-24(fp)
 4014810:	1000090e 	bge	r2,zero,4014838 <open+0x144>
  {
    alt_release_fd (index);  
 4014814:	e13ff917 	ldw	r4,-28(fp)
 4014818:	4014ab80 	call	4014ab8 <alt_release_fd>
    ALT_ERRNO = -status;
 401481c:	40145cc0 	call	40145cc <alt_get_errno>
 4014820:	1007883a 	mov	r3,r2
 4014824:	e0bffa17 	ldw	r2,-24(fp)
 4014828:	0085c83a 	sub	r2,zero,r2
 401482c:	18800015 	stw	r2,0(r3)
    return -1;
 4014830:	00bfffc4 	movi	r2,-1
 4014834:	00000106 	br	401483c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4014838:	e0bff917 	ldw	r2,-28(fp)
}
 401483c:	e037883a 	mov	sp,fp
 4014840:	dfc00117 	ldw	ra,4(sp)
 4014844:	df000017 	ldw	fp,0(sp)
 4014848:	dec00204 	addi	sp,sp,8
 401484c:	f800283a 	ret

04014850 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 4014850:	defff204 	addi	sp,sp,-56
 4014854:	dfc00a15 	stw	ra,40(sp)
 4014858:	df000915 	stw	fp,36(sp)
 401485c:	df000904 	addi	fp,sp,36
 4014860:	e13fff15 	stw	r4,-4(fp)
 4014864:	e1400215 	stw	r5,8(fp)
 4014868:	e1800315 	stw	r6,12(fp)
 401486c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 4014870:	e0800204 	addi	r2,fp,8
 4014874:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4014878:	e0bfff17 	ldw	r2,-4(fp)
 401487c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 4014880:	00006f06 	br	4014a40 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4014884:	e0bff807 	ldb	r2,-32(fp)
 4014888:	10800960 	cmpeqi	r2,r2,37
 401488c:	1000041e 	bne	r2,zero,40148a0 <alt_printf+0x50>
        {
            alt_putchar(c);
 4014890:	e0bff807 	ldb	r2,-32(fp)
 4014894:	1009883a 	mov	r4,r2
 4014898:	4014a7c0 	call	4014a7c <alt_putchar>
 401489c:	00006806 	br	4014a40 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 40148a0:	e0bff717 	ldw	r2,-36(fp)
 40148a4:	10c00044 	addi	r3,r2,1
 40148a8:	e0fff715 	stw	r3,-36(fp)
 40148ac:	10800003 	ldbu	r2,0(r2)
 40148b0:	e0bff805 	stb	r2,-32(fp)
 40148b4:	e0bff807 	ldb	r2,-32(fp)
 40148b8:	10006926 	beq	r2,zero,4014a60 <alt_printf+0x210>
            {
                if (c == '%')
 40148bc:	e0bff807 	ldb	r2,-32(fp)
 40148c0:	10800958 	cmpnei	r2,r2,37
 40148c4:	1000041e 	bne	r2,zero,40148d8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 40148c8:	e0bff807 	ldb	r2,-32(fp)
 40148cc:	1009883a 	mov	r4,r2
 40148d0:	4014a7c0 	call	4014a7c <alt_putchar>
 40148d4:	00005a06 	br	4014a40 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 40148d8:	e0bff807 	ldb	r2,-32(fp)
 40148dc:	108018d8 	cmpnei	r2,r2,99
 40148e0:	1000081e 	bne	r2,zero,4014904 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 40148e4:	e0bffe17 	ldw	r2,-8(fp)
 40148e8:	10c00104 	addi	r3,r2,4
 40148ec:	e0fffe15 	stw	r3,-8(fp)
 40148f0:	10800017 	ldw	r2,0(r2)
 40148f4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 40148f8:	e13ffd17 	ldw	r4,-12(fp)
 40148fc:	4014a7c0 	call	4014a7c <alt_putchar>
 4014900:	00004f06 	br	4014a40 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4014904:	e0bff807 	ldb	r2,-32(fp)
 4014908:	10801e18 	cmpnei	r2,r2,120
 401490c:	1000341e 	bne	r2,zero,40149e0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4014910:	e0bffe17 	ldw	r2,-8(fp)
 4014914:	10c00104 	addi	r3,r2,4
 4014918:	e0fffe15 	stw	r3,-8(fp)
 401491c:	10800017 	ldw	r2,0(r2)
 4014920:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4014924:	e0bffb17 	ldw	r2,-20(fp)
 4014928:	1000031e 	bne	r2,zero,4014938 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 401492c:	01000c04 	movi	r4,48
 4014930:	4014a7c0 	call	4014a7c <alt_putchar>
                        continue;
 4014934:	00004206 	br	4014a40 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4014938:	00800704 	movi	r2,28
 401493c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 4014940:	00000306 	br	4014950 <alt_printf+0x100>
                        digit_shift -= 4;
 4014944:	e0bff917 	ldw	r2,-28(fp)
 4014948:	10bfff04 	addi	r2,r2,-4
 401494c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4014950:	00c003c4 	movi	r3,15
 4014954:	e0bff917 	ldw	r2,-28(fp)
 4014958:	1884983a 	sll	r2,r3,r2
 401495c:	1007883a 	mov	r3,r2
 4014960:	e0bffb17 	ldw	r2,-20(fp)
 4014964:	1884703a 	and	r2,r3,r2
 4014968:	103ff626 	beq	r2,zero,4014944 <__alt_data_end+0xffff4944>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401496c:	00001906 	br	40149d4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4014970:	00c003c4 	movi	r3,15
 4014974:	e0bff917 	ldw	r2,-28(fp)
 4014978:	1884983a 	sll	r2,r3,r2
 401497c:	1007883a 	mov	r3,r2
 4014980:	e0bffb17 	ldw	r2,-20(fp)
 4014984:	1886703a 	and	r3,r3,r2
 4014988:	e0bff917 	ldw	r2,-28(fp)
 401498c:	1884d83a 	srl	r2,r3,r2
 4014990:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4014994:	e0bffc17 	ldw	r2,-16(fp)
 4014998:	108002a8 	cmpgeui	r2,r2,10
 401499c:	1000041e 	bne	r2,zero,40149b0 <alt_printf+0x160>
                            c = '0' + digit;
 40149a0:	e0bffc17 	ldw	r2,-16(fp)
 40149a4:	10800c04 	addi	r2,r2,48
 40149a8:	e0bff805 	stb	r2,-32(fp)
 40149ac:	00000306 	br	40149bc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 40149b0:	e0bffc17 	ldw	r2,-16(fp)
 40149b4:	108015c4 	addi	r2,r2,87
 40149b8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 40149bc:	e0bff807 	ldb	r2,-32(fp)
 40149c0:	1009883a 	mov	r4,r2
 40149c4:	4014a7c0 	call	4014a7c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 40149c8:	e0bff917 	ldw	r2,-28(fp)
 40149cc:	10bfff04 	addi	r2,r2,-4
 40149d0:	e0bff915 	stw	r2,-28(fp)
 40149d4:	e0bff917 	ldw	r2,-28(fp)
 40149d8:	103fe50e 	bge	r2,zero,4014970 <__alt_data_end+0xffff4970>
 40149dc:	00001806 	br	4014a40 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 40149e0:	e0bff807 	ldb	r2,-32(fp)
 40149e4:	10801cd8 	cmpnei	r2,r2,115
 40149e8:	1000151e 	bne	r2,zero,4014a40 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 40149ec:	e0bffe17 	ldw	r2,-8(fp)
 40149f0:	10c00104 	addi	r3,r2,4
 40149f4:	e0fffe15 	stw	r3,-8(fp)
 40149f8:	10800017 	ldw	r2,0(r2)
 40149fc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 4014a00:	00000906 	br	4014a28 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4014a04:	e0bffa17 	ldw	r2,-24(fp)
 4014a08:	10c00044 	addi	r3,r2,1
 4014a0c:	e0fffa15 	stw	r3,-24(fp)
 4014a10:	10800003 	ldbu	r2,0(r2)
 4014a14:	10803fcc 	andi	r2,r2,255
 4014a18:	1080201c 	xori	r2,r2,128
 4014a1c:	10bfe004 	addi	r2,r2,-128
 4014a20:	1009883a 	mov	r4,r2
 4014a24:	4014a7c0 	call	4014a7c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4014a28:	e0bffa17 	ldw	r2,-24(fp)
 4014a2c:	10800003 	ldbu	r2,0(r2)
 4014a30:	10803fcc 	andi	r2,r2,255
 4014a34:	1080201c 	xori	r2,r2,128
 4014a38:	10bfe004 	addi	r2,r2,-128
 4014a3c:	103ff11e 	bne	r2,zero,4014a04 <__alt_data_end+0xffff4a04>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4014a40:	e0bff717 	ldw	r2,-36(fp)
 4014a44:	10c00044 	addi	r3,r2,1
 4014a48:	e0fff715 	stw	r3,-36(fp)
 4014a4c:	10800003 	ldbu	r2,0(r2)
 4014a50:	e0bff805 	stb	r2,-32(fp)
 4014a54:	e0bff807 	ldb	r2,-32(fp)
 4014a58:	103f8a1e 	bne	r2,zero,4014884 <__alt_data_end+0xffff4884>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4014a5c:	00000106 	br	4014a64 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 4014a60:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4014a64:	0001883a 	nop
 4014a68:	e037883a 	mov	sp,fp
 4014a6c:	dfc00117 	ldw	ra,4(sp)
 4014a70:	df000017 	ldw	fp,0(sp)
 4014a74:	dec00504 	addi	sp,sp,20
 4014a78:	f800283a 	ret

04014a7c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4014a7c:	defffd04 	addi	sp,sp,-12
 4014a80:	dfc00215 	stw	ra,8(sp)
 4014a84:	df000115 	stw	fp,4(sp)
 4014a88:	df000104 	addi	fp,sp,4
 4014a8c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4014a90:	d0a00217 	ldw	r2,-32760(gp)
 4014a94:	10800217 	ldw	r2,8(r2)
 4014a98:	100b883a 	mov	r5,r2
 4014a9c:	e13fff17 	ldw	r4,-4(fp)
 4014aa0:	4014f5c0 	call	4014f5c <putc>
#endif
#endif
}
 4014aa4:	e037883a 	mov	sp,fp
 4014aa8:	dfc00117 	ldw	ra,4(sp)
 4014aac:	df000017 	ldw	fp,0(sp)
 4014ab0:	dec00204 	addi	sp,sp,8
 4014ab4:	f800283a 	ret

04014ab8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4014ab8:	defffc04 	addi	sp,sp,-16
 4014abc:	dfc00315 	stw	ra,12(sp)
 4014ac0:	df000215 	stw	fp,8(sp)
 4014ac4:	dc000115 	stw	r16,4(sp)
 4014ac8:	df000204 	addi	fp,sp,8
 4014acc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4014ad0:	e0bffe17 	ldw	r2,-8(fp)
 4014ad4:	108000d0 	cmplti	r2,r2,3
 4014ad8:	1000111e 	bne	r2,zero,4014b20 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4014adc:	04010074 	movhi	r16,1025
 4014ae0:	8419ba04 	addi	r16,r16,26344
 4014ae4:	e0bffe17 	ldw	r2,-8(fp)
 4014ae8:	01400304 	movi	r5,12
 4014aec:	1009883a 	mov	r4,r2
 4014af0:	4010fb00 	call	4010fb0 <__mulsi3>
 4014af4:	8085883a 	add	r2,r16,r2
 4014af8:	10800204 	addi	r2,r2,8
 4014afc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4014b00:	04010074 	movhi	r16,1025
 4014b04:	8419ba04 	addi	r16,r16,26344
 4014b08:	e0bffe17 	ldw	r2,-8(fp)
 4014b0c:	01400304 	movi	r5,12
 4014b10:	1009883a 	mov	r4,r2
 4014b14:	4010fb00 	call	4010fb0 <__mulsi3>
 4014b18:	8085883a 	add	r2,r16,r2
 4014b1c:	10000015 	stw	zero,0(r2)
  }
}
 4014b20:	0001883a 	nop
 4014b24:	e6ffff04 	addi	sp,fp,-4
 4014b28:	dfc00217 	ldw	ra,8(sp)
 4014b2c:	df000117 	ldw	fp,4(sp)
 4014b30:	dc000017 	ldw	r16,0(sp)
 4014b34:	dec00304 	addi	sp,sp,12
 4014b38:	f800283a 	ret

04014b3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4014b3c:	defffa04 	addi	sp,sp,-24
 4014b40:	df000515 	stw	fp,20(sp)
 4014b44:	df000504 	addi	fp,sp,20
 4014b48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014b4c:	0005303a 	rdctl	r2,status
 4014b50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014b54:	e0fffc17 	ldw	r3,-16(fp)
 4014b58:	00bfff84 	movi	r2,-2
 4014b5c:	1884703a 	and	r2,r3,r2
 4014b60:	1001703a 	wrctl	status,r2
  
  return context;
 4014b64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4014b68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4014b6c:	e0bfff17 	ldw	r2,-4(fp)
 4014b70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4014b74:	e0bffd17 	ldw	r2,-12(fp)
 4014b78:	10800017 	ldw	r2,0(r2)
 4014b7c:	e0fffd17 	ldw	r3,-12(fp)
 4014b80:	18c00117 	ldw	r3,4(r3)
 4014b84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4014b88:	e0bffd17 	ldw	r2,-12(fp)
 4014b8c:	10800117 	ldw	r2,4(r2)
 4014b90:	e0fffd17 	ldw	r3,-12(fp)
 4014b94:	18c00017 	ldw	r3,0(r3)
 4014b98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4014b9c:	e0bffd17 	ldw	r2,-12(fp)
 4014ba0:	e0fffd17 	ldw	r3,-12(fp)
 4014ba4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4014ba8:	e0bffd17 	ldw	r2,-12(fp)
 4014bac:	e0fffd17 	ldw	r3,-12(fp)
 4014bb0:	10c00015 	stw	r3,0(r2)
 4014bb4:	e0bffb17 	ldw	r2,-20(fp)
 4014bb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014bbc:	e0bffe17 	ldw	r2,-8(fp)
 4014bc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4014bc4:	0001883a 	nop
 4014bc8:	e037883a 	mov	sp,fp
 4014bcc:	df000017 	ldw	fp,0(sp)
 4014bd0:	dec00104 	addi	sp,sp,4
 4014bd4:	f800283a 	ret

04014bd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4014bd8:	defffb04 	addi	sp,sp,-20
 4014bdc:	dfc00415 	stw	ra,16(sp)
 4014be0:	df000315 	stw	fp,12(sp)
 4014be4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4014be8:	d0a00c17 	ldw	r2,-32720(gp)
 4014bec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4014bf0:	d0a51217 	ldw	r2,-27576(gp)
 4014bf4:	10800044 	addi	r2,r2,1
 4014bf8:	d0a51215 	stw	r2,-27576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4014bfc:	00002e06 	br	4014cb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4014c00:	e0bffd17 	ldw	r2,-12(fp)
 4014c04:	10800017 	ldw	r2,0(r2)
 4014c08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4014c0c:	e0bffd17 	ldw	r2,-12(fp)
 4014c10:	10800403 	ldbu	r2,16(r2)
 4014c14:	10803fcc 	andi	r2,r2,255
 4014c18:	10000426 	beq	r2,zero,4014c2c <alt_tick+0x54>
 4014c1c:	d0a51217 	ldw	r2,-27576(gp)
 4014c20:	1000021e 	bne	r2,zero,4014c2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4014c24:	e0bffd17 	ldw	r2,-12(fp)
 4014c28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4014c2c:	e0bffd17 	ldw	r2,-12(fp)
 4014c30:	10800217 	ldw	r2,8(r2)
 4014c34:	d0e51217 	ldw	r3,-27576(gp)
 4014c38:	18801d36 	bltu	r3,r2,4014cb0 <alt_tick+0xd8>
 4014c3c:	e0bffd17 	ldw	r2,-12(fp)
 4014c40:	10800403 	ldbu	r2,16(r2)
 4014c44:	10803fcc 	andi	r2,r2,255
 4014c48:	1000191e 	bne	r2,zero,4014cb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4014c4c:	e0bffd17 	ldw	r2,-12(fp)
 4014c50:	10800317 	ldw	r2,12(r2)
 4014c54:	e0fffd17 	ldw	r3,-12(fp)
 4014c58:	18c00517 	ldw	r3,20(r3)
 4014c5c:	1809883a 	mov	r4,r3
 4014c60:	103ee83a 	callr	r2
 4014c64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4014c68:	e0bfff17 	ldw	r2,-4(fp)
 4014c6c:	1000031e 	bne	r2,zero,4014c7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4014c70:	e13ffd17 	ldw	r4,-12(fp)
 4014c74:	4014b3c0 	call	4014b3c <alt_alarm_stop>
 4014c78:	00000d06 	br	4014cb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4014c7c:	e0bffd17 	ldw	r2,-12(fp)
 4014c80:	10c00217 	ldw	r3,8(r2)
 4014c84:	e0bfff17 	ldw	r2,-4(fp)
 4014c88:	1887883a 	add	r3,r3,r2
 4014c8c:	e0bffd17 	ldw	r2,-12(fp)
 4014c90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4014c94:	e0bffd17 	ldw	r2,-12(fp)
 4014c98:	10c00217 	ldw	r3,8(r2)
 4014c9c:	d0a51217 	ldw	r2,-27576(gp)
 4014ca0:	1880032e 	bgeu	r3,r2,4014cb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4014ca4:	e0bffd17 	ldw	r2,-12(fp)
 4014ca8:	00c00044 	movi	r3,1
 4014cac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4014cb0:	e0bffe17 	ldw	r2,-8(fp)
 4014cb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4014cb8:	e0fffd17 	ldw	r3,-12(fp)
 4014cbc:	d0a00c04 	addi	r2,gp,-32720
 4014cc0:	18bfcf1e 	bne	r3,r2,4014c00 <__alt_data_end+0xffff4c00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4014cc4:	0001883a 	nop
}
 4014cc8:	0001883a 	nop
 4014ccc:	e037883a 	mov	sp,fp
 4014cd0:	dfc00117 	ldw	ra,4(sp)
 4014cd4:	df000017 	ldw	fp,0(sp)
 4014cd8:	dec00204 	addi	sp,sp,8
 4014cdc:	f800283a 	ret

04014ce0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4014ce0:	deffff04 	addi	sp,sp,-4
 4014ce4:	df000015 	stw	fp,0(sp)
 4014ce8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4014cec:	000170fa 	wrctl	ienable,zero
}
 4014cf0:	0001883a 	nop
 4014cf4:	e037883a 	mov	sp,fp
 4014cf8:	df000017 	ldw	fp,0(sp)
 4014cfc:	dec00104 	addi	sp,sp,4
 4014d00:	f800283a 	ret

04014d04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4014d04:	defffb04 	addi	sp,sp,-20
 4014d08:	dfc00415 	stw	ra,16(sp)
 4014d0c:	df000315 	stw	fp,12(sp)
 4014d10:	df000304 	addi	fp,sp,12
 4014d14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4014d18:	d0a00617 	ldw	r2,-32744(gp)
 4014d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014d20:	00003106 	br	4014de8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4014d24:	e0bffd17 	ldw	r2,-12(fp)
 4014d28:	10800217 	ldw	r2,8(r2)
 4014d2c:	1009883a 	mov	r4,r2
 4014d30:	401071c0 	call	401071c <strlen>
 4014d34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4014d38:	e0bffd17 	ldw	r2,-12(fp)
 4014d3c:	10c00217 	ldw	r3,8(r2)
 4014d40:	e0bffe17 	ldw	r2,-8(fp)
 4014d44:	10bfffc4 	addi	r2,r2,-1
 4014d48:	1885883a 	add	r2,r3,r2
 4014d4c:	10800003 	ldbu	r2,0(r2)
 4014d50:	10803fcc 	andi	r2,r2,255
 4014d54:	1080201c 	xori	r2,r2,128
 4014d58:	10bfe004 	addi	r2,r2,-128
 4014d5c:	10800bd8 	cmpnei	r2,r2,47
 4014d60:	1000031e 	bne	r2,zero,4014d70 <alt_find_file+0x6c>
    {
      len -= 1;
 4014d64:	e0bffe17 	ldw	r2,-8(fp)
 4014d68:	10bfffc4 	addi	r2,r2,-1
 4014d6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4014d70:	e0bffe17 	ldw	r2,-8(fp)
 4014d74:	e0ffff17 	ldw	r3,-4(fp)
 4014d78:	1885883a 	add	r2,r3,r2
 4014d7c:	10800003 	ldbu	r2,0(r2)
 4014d80:	10803fcc 	andi	r2,r2,255
 4014d84:	1080201c 	xori	r2,r2,128
 4014d88:	10bfe004 	addi	r2,r2,-128
 4014d8c:	10800be0 	cmpeqi	r2,r2,47
 4014d90:	1000081e 	bne	r2,zero,4014db4 <alt_find_file+0xb0>
 4014d94:	e0bffe17 	ldw	r2,-8(fp)
 4014d98:	e0ffff17 	ldw	r3,-4(fp)
 4014d9c:	1885883a 	add	r2,r3,r2
 4014da0:	10800003 	ldbu	r2,0(r2)
 4014da4:	10803fcc 	andi	r2,r2,255
 4014da8:	1080201c 	xori	r2,r2,128
 4014dac:	10bfe004 	addi	r2,r2,-128
 4014db0:	10000a1e 	bne	r2,zero,4014ddc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4014db4:	e0bffd17 	ldw	r2,-12(fp)
 4014db8:	10800217 	ldw	r2,8(r2)
 4014dbc:	e0fffe17 	ldw	r3,-8(fp)
 4014dc0:	180d883a 	mov	r6,r3
 4014dc4:	e17fff17 	ldw	r5,-4(fp)
 4014dc8:	1009883a 	mov	r4,r2
 4014dcc:	4014f040 	call	4014f04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4014dd0:	1000021e 	bne	r2,zero,4014ddc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4014dd4:	e0bffd17 	ldw	r2,-12(fp)
 4014dd8:	00000706 	br	4014df8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4014ddc:	e0bffd17 	ldw	r2,-12(fp)
 4014de0:	10800017 	ldw	r2,0(r2)
 4014de4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4014de8:	e0fffd17 	ldw	r3,-12(fp)
 4014dec:	d0a00604 	addi	r2,gp,-32744
 4014df0:	18bfcc1e 	bne	r3,r2,4014d24 <__alt_data_end+0xffff4d24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4014df4:	0005883a 	mov	r2,zero
}
 4014df8:	e037883a 	mov	sp,fp
 4014dfc:	dfc00117 	ldw	ra,4(sp)
 4014e00:	df000017 	ldw	fp,0(sp)
 4014e04:	dec00204 	addi	sp,sp,8
 4014e08:	f800283a 	ret

04014e0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4014e0c:	defffa04 	addi	sp,sp,-24
 4014e10:	dfc00515 	stw	ra,20(sp)
 4014e14:	df000415 	stw	fp,16(sp)
 4014e18:	dc000315 	stw	r16,12(sp)
 4014e1c:	df000404 	addi	fp,sp,16
 4014e20:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4014e24:	00bffa04 	movi	r2,-24
 4014e28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4014e2c:	e03ffc15 	stw	zero,-16(fp)
 4014e30:	00001d06 	br	4014ea8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4014e34:	04010074 	movhi	r16,1025
 4014e38:	8419ba04 	addi	r16,r16,26344
 4014e3c:	e0bffc17 	ldw	r2,-16(fp)
 4014e40:	01400304 	movi	r5,12
 4014e44:	1009883a 	mov	r4,r2
 4014e48:	4010fb00 	call	4010fb0 <__mulsi3>
 4014e4c:	8085883a 	add	r2,r16,r2
 4014e50:	10800017 	ldw	r2,0(r2)
 4014e54:	1000111e 	bne	r2,zero,4014e9c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4014e58:	04010074 	movhi	r16,1025
 4014e5c:	8419ba04 	addi	r16,r16,26344
 4014e60:	e0bffc17 	ldw	r2,-16(fp)
 4014e64:	01400304 	movi	r5,12
 4014e68:	1009883a 	mov	r4,r2
 4014e6c:	4010fb00 	call	4010fb0 <__mulsi3>
 4014e70:	8085883a 	add	r2,r16,r2
 4014e74:	e0fffe17 	ldw	r3,-8(fp)
 4014e78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4014e7c:	d0e00a17 	ldw	r3,-32728(gp)
 4014e80:	e0bffc17 	ldw	r2,-16(fp)
 4014e84:	1880020e 	bge	r3,r2,4014e90 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4014e88:	e0bffc17 	ldw	r2,-16(fp)
 4014e8c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4014e90:	e0bffc17 	ldw	r2,-16(fp)
 4014e94:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4014e98:	00000606 	br	4014eb4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4014e9c:	e0bffc17 	ldw	r2,-16(fp)
 4014ea0:	10800044 	addi	r2,r2,1
 4014ea4:	e0bffc15 	stw	r2,-16(fp)
 4014ea8:	e0bffc17 	ldw	r2,-16(fp)
 4014eac:	10800810 	cmplti	r2,r2,32
 4014eb0:	103fe01e 	bne	r2,zero,4014e34 <__alt_data_end+0xffff4e34>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4014eb4:	e0bffd17 	ldw	r2,-12(fp)
}
 4014eb8:	e6ffff04 	addi	sp,fp,-4
 4014ebc:	dfc00217 	ldw	ra,8(sp)
 4014ec0:	df000117 	ldw	fp,4(sp)
 4014ec4:	dc000017 	ldw	r16,0(sp)
 4014ec8:	dec00304 	addi	sp,sp,12
 4014ecc:	f800283a 	ret

04014ed0 <atexit>:
 4014ed0:	200b883a 	mov	r5,r4
 4014ed4:	000f883a 	mov	r7,zero
 4014ed8:	000d883a 	mov	r6,zero
 4014edc:	0009883a 	mov	r4,zero
 4014ee0:	40150081 	jmpi	4015008 <__register_exitproc>

04014ee4 <exit>:
 4014ee4:	defffe04 	addi	sp,sp,-8
 4014ee8:	000b883a 	mov	r5,zero
 4014eec:	dc000015 	stw	r16,0(sp)
 4014ef0:	dfc00115 	stw	ra,4(sp)
 4014ef4:	2021883a 	mov	r16,r4
 4014ef8:	40151600 	call	4015160 <__call_exitprocs>
 4014efc:	8009883a 	mov	r4,r16
 4014f00:	40152f00 	call	40152f0 <_exit>

04014f04 <memcmp>:
 4014f04:	218d883a 	add	r6,r4,r6
 4014f08:	21800826 	beq	r4,r6,4014f2c <memcmp+0x28>
 4014f0c:	20800003 	ldbu	r2,0(r4)
 4014f10:	28c00003 	ldbu	r3,0(r5)
 4014f14:	10c00226 	beq	r2,r3,4014f20 <memcmp+0x1c>
 4014f18:	10c5c83a 	sub	r2,r2,r3
 4014f1c:	f800283a 	ret
 4014f20:	21000044 	addi	r4,r4,1
 4014f24:	29400044 	addi	r5,r5,1
 4014f28:	003ff706 	br	4014f08 <__alt_data_end+0xffff4f08>
 4014f2c:	0005883a 	mov	r2,zero
 4014f30:	f800283a 	ret

04014f34 <memcpy>:
 4014f34:	2005883a 	mov	r2,r4
 4014f38:	2007883a 	mov	r3,r4
 4014f3c:	218d883a 	add	r6,r4,r6
 4014f40:	19800526 	beq	r3,r6,4014f58 <memcpy+0x24>
 4014f44:	29000003 	ldbu	r4,0(r5)
 4014f48:	18c00044 	addi	r3,r3,1
 4014f4c:	29400044 	addi	r5,r5,1
 4014f50:	193fffc5 	stb	r4,-1(r3)
 4014f54:	003ffa06 	br	4014f40 <__alt_data_end+0xffff4f40>
 4014f58:	f800283a 	ret

04014f5c <putc>:
 4014f5c:	defffd04 	addi	sp,sp,-12
 4014f60:	00810074 	movhi	r2,1025
 4014f64:	dc000115 	stw	r16,4(sp)
 4014f68:	dfc00215 	stw	ra,8(sp)
 4014f6c:	10833b04 	addi	r2,r2,3308
 4014f70:	28800115 	stw	r2,4(r5)
 4014f74:	00810074 	movhi	r2,1025
 4014f78:	109a1c04 	addi	r2,r2,26736
 4014f7c:	d9000005 	stb	r4,0(sp)
 4014f80:	2021883a 	mov	r16,r4
 4014f84:	11000017 	ldw	r4,0(r2)
 4014f88:	01c00044 	movi	r7,1
 4014f8c:	d80d883a 	mov	r6,sp
 4014f90:	4010cec0 	call	4010cec <__sfvwrite_small_dev>
 4014f94:	00ffffc4 	movi	r3,-1
 4014f98:	10c00126 	beq	r2,r3,4014fa0 <putc+0x44>
 4014f9c:	8005883a 	mov	r2,r16
 4014fa0:	dfc00217 	ldw	ra,8(sp)
 4014fa4:	dc000117 	ldw	r16,4(sp)
 4014fa8:	dec00304 	addi	sp,sp,12
 4014fac:	f800283a 	ret

04014fb0 <_putc_r>:
 4014fb0:	defffd04 	addi	sp,sp,-12
 4014fb4:	00810074 	movhi	r2,1025
 4014fb8:	dc000115 	stw	r16,4(sp)
 4014fbc:	dfc00215 	stw	ra,8(sp)
 4014fc0:	10833b04 	addi	r2,r2,3308
 4014fc4:	30800115 	stw	r2,4(r6)
 4014fc8:	00810074 	movhi	r2,1025
 4014fcc:	109a1c04 	addi	r2,r2,26736
 4014fd0:	11000017 	ldw	r4,0(r2)
 4014fd4:	2821883a 	mov	r16,r5
 4014fd8:	01c00044 	movi	r7,1
 4014fdc:	300b883a 	mov	r5,r6
 4014fe0:	d80d883a 	mov	r6,sp
 4014fe4:	dc000005 	stb	r16,0(sp)
 4014fe8:	4010cec0 	call	4010cec <__sfvwrite_small_dev>
 4014fec:	00ffffc4 	movi	r3,-1
 4014ff0:	10c00126 	beq	r2,r3,4014ff8 <_putc_r+0x48>
 4014ff4:	8005883a 	mov	r2,r16
 4014ff8:	dfc00217 	ldw	ra,8(sp)
 4014ffc:	dc000117 	ldw	r16,4(sp)
 4015000:	dec00304 	addi	sp,sp,12
 4015004:	f800283a 	ret

04015008 <__register_exitproc>:
 4015008:	00810074 	movhi	r2,1025
 401500c:	109a1b04 	addi	r2,r2,26732
 4015010:	10c00017 	ldw	r3,0(r2)
 4015014:	defff904 	addi	sp,sp,-28
 4015018:	dc000015 	stw	r16,0(sp)
 401501c:	1c000c17 	ldw	r16,48(r3)
 4015020:	dd400515 	stw	r21,20(sp)
 4015024:	dd000415 	stw	r20,16(sp)
 4015028:	dcc00315 	stw	r19,12(sp)
 401502c:	dc800215 	stw	r18,8(sp)
 4015030:	dc400115 	stw	r17,4(sp)
 4015034:	dfc00615 	stw	ra,24(sp)
 4015038:	202b883a 	mov	r21,r4
 401503c:	2823883a 	mov	r17,r5
 4015040:	3027883a 	mov	r19,r6
 4015044:	3825883a 	mov	r18,r7
 4015048:	1029883a 	mov	r20,r2
 401504c:	8000021e 	bne	r16,zero,4015058 <__register_exitproc+0x50>
 4015050:	1c000d04 	addi	r16,r3,52
 4015054:	1c000c15 	stw	r16,48(r3)
 4015058:	80800117 	ldw	r2,4(r16)
 401505c:	00c007c4 	movi	r3,31
 4015060:	1880110e 	bge	r3,r2,40150a8 <__register_exitproc+0xa0>
 4015064:	00800034 	movhi	r2,0
 4015068:	10800004 	addi	r2,r2,0
 401506c:	1000021e 	bne	r2,zero,4015078 <__register_exitproc+0x70>
 4015070:	00bfffc4 	movi	r2,-1
 4015074:	00003106 	br	401513c <__register_exitproc+0x134>
 4015078:	01002304 	movi	r4,140
 401507c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4015080:	1021883a 	mov	r16,r2
 4015084:	103ffa26 	beq	r2,zero,4015070 <__alt_data_end+0xffff5070>
 4015088:	10000115 	stw	zero,4(r2)
 401508c:	a0800017 	ldw	r2,0(r20)
 4015090:	10c00c17 	ldw	r3,48(r2)
 4015094:	80c00015 	stw	r3,0(r16)
 4015098:	14000c15 	stw	r16,48(r2)
 401509c:	80002215 	stw	zero,136(r16)
 40150a0:	a8001d26 	beq	r21,zero,4015118 <__register_exitproc+0x110>
 40150a4:	00000606 	br	40150c0 <__register_exitproc+0xb8>
 40150a8:	a8001b26 	beq	r21,zero,4015118 <__register_exitproc+0x110>
 40150ac:	80802217 	ldw	r2,136(r16)
 40150b0:	1000091e 	bne	r2,zero,40150d8 <__register_exitproc+0xd0>
 40150b4:	00800034 	movhi	r2,0
 40150b8:	10800004 	addi	r2,r2,0
 40150bc:	103fec26 	beq	r2,zero,4015070 <__alt_data_end+0xffff5070>
 40150c0:	01004204 	movi	r4,264
 40150c4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 40150c8:	103fe926 	beq	r2,zero,4015070 <__alt_data_end+0xffff5070>
 40150cc:	10004015 	stw	zero,256(r2)
 40150d0:	10004115 	stw	zero,260(r2)
 40150d4:	80802215 	stw	r2,136(r16)
 40150d8:	81400117 	ldw	r5,4(r16)
 40150dc:	01000044 	movi	r4,1
 40150e0:	2947883a 	add	r3,r5,r5
 40150e4:	18c7883a 	add	r3,r3,r3
 40150e8:	10c7883a 	add	r3,r2,r3
 40150ec:	1cc00015 	stw	r19,0(r3)
 40150f0:	2148983a 	sll	r4,r4,r5
 40150f4:	11404017 	ldw	r5,256(r2)
 40150f8:	290ab03a 	or	r5,r5,r4
 40150fc:	11404015 	stw	r5,256(r2)
 4015100:	1c802015 	stw	r18,128(r3)
 4015104:	00c00084 	movi	r3,2
 4015108:	a8c0031e 	bne	r21,r3,4015118 <__register_exitproc+0x110>
 401510c:	10c04117 	ldw	r3,260(r2)
 4015110:	1908b03a 	or	r4,r3,r4
 4015114:	11004115 	stw	r4,260(r2)
 4015118:	80800117 	ldw	r2,4(r16)
 401511c:	10c00044 	addi	r3,r2,1
 4015120:	10800084 	addi	r2,r2,2
 4015124:	1085883a 	add	r2,r2,r2
 4015128:	1085883a 	add	r2,r2,r2
 401512c:	80c00115 	stw	r3,4(r16)
 4015130:	80a1883a 	add	r16,r16,r2
 4015134:	84400015 	stw	r17,0(r16)
 4015138:	0005883a 	mov	r2,zero
 401513c:	dfc00617 	ldw	ra,24(sp)
 4015140:	dd400517 	ldw	r21,20(sp)
 4015144:	dd000417 	ldw	r20,16(sp)
 4015148:	dcc00317 	ldw	r19,12(sp)
 401514c:	dc800217 	ldw	r18,8(sp)
 4015150:	dc400117 	ldw	r17,4(sp)
 4015154:	dc000017 	ldw	r16,0(sp)
 4015158:	dec00704 	addi	sp,sp,28
 401515c:	f800283a 	ret

04015160 <__call_exitprocs>:
 4015160:	defff504 	addi	sp,sp,-44
 4015164:	dd000515 	stw	r20,20(sp)
 4015168:	05010074 	movhi	r20,1025
 401516c:	dc800315 	stw	r18,12(sp)
 4015170:	dfc00a15 	stw	ra,40(sp)
 4015174:	df000915 	stw	fp,36(sp)
 4015178:	ddc00815 	stw	r23,32(sp)
 401517c:	dd800715 	stw	r22,28(sp)
 4015180:	dd400615 	stw	r21,24(sp)
 4015184:	dcc00415 	stw	r19,16(sp)
 4015188:	dc400215 	stw	r17,8(sp)
 401518c:	dc000115 	stw	r16,4(sp)
 4015190:	d9000015 	stw	r4,0(sp)
 4015194:	2825883a 	mov	r18,r5
 4015198:	a51a1b04 	addi	r20,r20,26732
 401519c:	a4400017 	ldw	r17,0(r20)
 40151a0:	8cc00c17 	ldw	r19,48(r17)
 40151a4:	8c400c04 	addi	r17,r17,48
 40151a8:	98004526 	beq	r19,zero,40152c0 <__call_exitprocs+0x160>
 40151ac:	9c000117 	ldw	r16,4(r19)
 40151b0:	00900034 	movhi	r2,16384
 40151b4:	10bfffc4 	addi	r2,r2,-1
 40151b8:	9d402217 	ldw	r21,136(r19)
 40151bc:	85bfffc4 	addi	r22,r16,-1
 40151c0:	80a1883a 	add	r16,r16,r2
 40151c4:	8421883a 	add	r16,r16,r16
 40151c8:	8421883a 	add	r16,r16,r16
 40151cc:	ac2f883a 	add	r23,r21,r16
 40151d0:	84000204 	addi	r16,r16,8
 40151d4:	9c21883a 	add	r16,r19,r16
 40151d8:	b0002716 	blt	r22,zero,4015278 <__call_exitprocs+0x118>
 40151dc:	90000726 	beq	r18,zero,40151fc <__call_exitprocs+0x9c>
 40151e0:	a800041e 	bne	r21,zero,40151f4 <__call_exitprocs+0x94>
 40151e4:	b5bfffc4 	addi	r22,r22,-1
 40151e8:	bdffff04 	addi	r23,r23,-4
 40151ec:	843fff04 	addi	r16,r16,-4
 40151f0:	003ff906 	br	40151d8 <__alt_data_end+0xffff51d8>
 40151f4:	b9002017 	ldw	r4,128(r23)
 40151f8:	913ffa1e 	bne	r18,r4,40151e4 <__alt_data_end+0xffff51e4>
 40151fc:	99000117 	ldw	r4,4(r19)
 4015200:	82000017 	ldw	r8,0(r16)
 4015204:	213fffc4 	addi	r4,r4,-1
 4015208:	b100021e 	bne	r22,r4,4015214 <__call_exitprocs+0xb4>
 401520c:	9d800115 	stw	r22,4(r19)
 4015210:	00000106 	br	4015218 <__call_exitprocs+0xb8>
 4015214:	80000015 	stw	zero,0(r16)
 4015218:	403ff226 	beq	r8,zero,40151e4 <__alt_data_end+0xffff51e4>
 401521c:	9f000117 	ldw	fp,4(r19)
 4015220:	a8000526 	beq	r21,zero,4015238 <__call_exitprocs+0xd8>
 4015224:	00800044 	movi	r2,1
 4015228:	1592983a 	sll	r9,r2,r22
 401522c:	a9404017 	ldw	r5,256(r21)
 4015230:	494a703a 	and	r5,r9,r5
 4015234:	2800021e 	bne	r5,zero,4015240 <__call_exitprocs+0xe0>
 4015238:	403ee83a 	callr	r8
 401523c:	00000906 	br	4015264 <__call_exitprocs+0x104>
 4015240:	a9004117 	ldw	r4,260(r21)
 4015244:	4908703a 	and	r4,r9,r4
 4015248:	2000041e 	bne	r4,zero,401525c <__call_exitprocs+0xfc>
 401524c:	b9400017 	ldw	r5,0(r23)
 4015250:	d9000017 	ldw	r4,0(sp)
 4015254:	403ee83a 	callr	r8
 4015258:	00000206 	br	4015264 <__call_exitprocs+0x104>
 401525c:	b9000017 	ldw	r4,0(r23)
 4015260:	403ee83a 	callr	r8
 4015264:	99000117 	ldw	r4,4(r19)
 4015268:	e13fcc1e 	bne	fp,r4,401519c <__alt_data_end+0xffff519c>
 401526c:	89000017 	ldw	r4,0(r17)
 4015270:	993fdc26 	beq	r19,r4,40151e4 <__alt_data_end+0xffff51e4>
 4015274:	003fc906 	br	401519c <__alt_data_end+0xffff519c>
 4015278:	00800034 	movhi	r2,0
 401527c:	10800004 	addi	r2,r2,0
 4015280:	10000f26 	beq	r2,zero,40152c0 <__call_exitprocs+0x160>
 4015284:	99400117 	ldw	r5,4(r19)
 4015288:	99000017 	ldw	r4,0(r19)
 401528c:	2800091e 	bne	r5,zero,40152b4 <__call_exitprocs+0x154>
 4015290:	20000826 	beq	r4,zero,40152b4 <__call_exitprocs+0x154>
 4015294:	89000015 	stw	r4,0(r17)
 4015298:	a8000226 	beq	r21,zero,40152a4 <__call_exitprocs+0x144>
 401529c:	a809883a 	mov	r4,r21
 40152a0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 40152a4:	9809883a 	mov	r4,r19
 40152a8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 40152ac:	8cc00017 	ldw	r19,0(r17)
 40152b0:	003fbd06 	br	40151a8 <__alt_data_end+0xffff51a8>
 40152b4:	9823883a 	mov	r17,r19
 40152b8:	2027883a 	mov	r19,r4
 40152bc:	003fba06 	br	40151a8 <__alt_data_end+0xffff51a8>
 40152c0:	dfc00a17 	ldw	ra,40(sp)
 40152c4:	df000917 	ldw	fp,36(sp)
 40152c8:	ddc00817 	ldw	r23,32(sp)
 40152cc:	dd800717 	ldw	r22,28(sp)
 40152d0:	dd400617 	ldw	r21,24(sp)
 40152d4:	dd000517 	ldw	r20,20(sp)
 40152d8:	dcc00417 	ldw	r19,16(sp)
 40152dc:	dc800317 	ldw	r18,12(sp)
 40152e0:	dc400217 	ldw	r17,8(sp)
 40152e4:	dc000117 	ldw	r16,4(sp)
 40152e8:	dec00b04 	addi	sp,sp,44
 40152ec:	f800283a 	ret

040152f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40152f0:	defffd04 	addi	sp,sp,-12
 40152f4:	df000215 	stw	fp,8(sp)
 40152f8:	df000204 	addi	fp,sp,8
 40152fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4015300:	0001883a 	nop
 4015304:	e0bfff17 	ldw	r2,-4(fp)
 4015308:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401530c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4015310:	10000226 	beq	r2,zero,401531c <_exit+0x2c>
    ALT_SIM_FAIL();
 4015314:	002af070 	cmpltui	zero,zero,43969
 4015318:	00000106 	br	4015320 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401531c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4015320:	003fff06 	br	4015320 <__alt_data_end+0xffff5320>
